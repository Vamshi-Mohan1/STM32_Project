#include "stm32l4xx_hal.h"

int counter;
// push button(BTN is onnecte to PC13
//LED is connectef to PA5 or PB13(user mannual).

//before you uses any module enable clock.
// BUS for both port are AHB2(datasheet)
//To enable AHB2EN bit0 bit 2

#define BTN_PORT GPIOC
#define BTN_PIN GPIO_PIN_13
#define LED_PORT GPIOA
#define LED_PIN GPIO_PIN_5

UART_HandleTypeDef huart2;
uint8_t bStatus;



int _write(int file,char *ptr,int len)
{
	    int i=0;
	    for(i=0;i<len;i++)
	    	ITM_SendChar((*ptr++));
	    return len;
}
char message[20] = "Hello from STM32\r\n";

int main()
{
	HAL_Init();
	//HAL_UART_Init(huart)
	usart_init();



//USART2 is attached to APB1 bus




	/* Loop forever */
	while(1)
	{
		HAL_UART_Transmit(&huart2, (uint8_t *)message, 20, 100);
		printf("hello");

		HAL_Delay(10);
	}

}
void usart_init(void)
{
	GPIO_InitTypeDef GPIO_InitStruct = {0};
	HAL_StatusTypeDef  status;
	int result;
	  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
	  if(huart->Instance==USART2)
	  {
	    /* USER CODE BEGIN USART2_MspInit 0 */

	    /* USER CODE END USART2_MspInit 0 */

	  /** Initializes the peripherals clock
	  */
	    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
	    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
	    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
	    {
	      Error_Handler();
	    }


	//
	__HAL_RCC_GPIOA_CLK_ENABLE();
	//
	__HAL_RCC_USART2_CLK_ENABLE();

	//config pins to act as alternate functions
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);


	//msp find what is this ?
	huart2.Instance = USART2;
	huart2.Init.BaudRate = 115200;
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
	huart2.Init.StopBits = UART_STOPBITS_1;
	huart2.Init.Parity = UART_PARITY_NONE;
	huart2.Init.Mode = UART_MODE_TX;
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;

	result=HAL_UART_Init(&huart2);
	if(result != HAL_OK)
	{
		printf("Error setting usart\r\n");
	}


}

void SysTick_Handler(void)
{
	HAL_IncTick();
}

