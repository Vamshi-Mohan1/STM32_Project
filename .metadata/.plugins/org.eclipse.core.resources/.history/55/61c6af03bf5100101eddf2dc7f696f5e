
4_ADC_ContinuosConvertion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002868  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  080029f8  080029f8  000039f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a80  08002a80  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002a80  08002a80  00003a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002a88  08002a88  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a88  08002a88  00003a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002a8c  08002a8c  00003a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002a90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          000001f8  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007cc2  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000012cd  00000000  00000000  0000bd5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b0  00000000  00000000  0000d028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000050c  00000000  00000000  0000d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027cad  00000000  00000000  0000dbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008bca  00000000  00000000  00035891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc7cb  00000000  00000000  0003e45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ac26  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002240  00000000  00000000  0013ac6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  0013ceac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080029e0 	.word	0x080029e0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080029e0 	.word	0x080029e0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f000 f94a 	bl	8000840 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 f815 	bl	80005dc <HAL_InitTick>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005b8:	2301      	movs	r3, #1
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	e001      	b.n	80005c2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005be:	f000 f805 	bl	80005cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <HAL_InitTick+0x6c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d023      	beq.n	8000638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <HAL_InitTick+0x70>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_InitTick+0x6c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f941 	bl	800088e <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10f      	bne.n	8000632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f000 f919 	bl	8000856 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000624:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <HAL_InitTick+0x74>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e007      	b.n	800063c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e004      	b.n	800063c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e001      	b.n	800063c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000008 	.word	0x20000008
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000658:	4b06      	ldr	r3, [pc, #24]	@ (8000674 <HAL_IncTick+0x20>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	461a      	mov	r2, r3
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_IncTick+0x24>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	4413      	add	r3, r2
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <HAL_IncTick+0x24>)
 8000666:	6013      	str	r3, [r2, #0]
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000004 	.word	0x20000004
 8000678:	20000084 	.word	0x20000084

0800067c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return uwTick;
 8000680:	4b03      	ldr	r3, [pc, #12]	@ (8000690 <HAL_GetTick+0x14>)
 8000682:	681b      	ldr	r3, [r3, #0]
}
 8000684:	4618      	mov	r0, r3
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	20000084 	.word	0x20000084

08000694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800069c:	f7ff ffee 	bl	800067c <HAL_GetTick>
 80006a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006ac:	d005      	beq.n	80006ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006ae:	4b0a      	ldr	r3, [pc, #40]	@ (80006d8 <HAL_Delay+0x44>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	461a      	mov	r2, r3
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006ba:	bf00      	nop
 80006bc:	f7ff ffde 	bl	800067c <HAL_GetTick>
 80006c0:	4602      	mov	r2, r0
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	1ad3      	subs	r3, r2, r3
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d8f7      	bhi.n	80006bc <HAL_Delay+0x28>
  {
  }
}
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000004 	.word	0x20000004

080006dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 80006ee:	68db      	ldr	r3, [r3, #12]
 80006f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f2:	68ba      	ldr	r2, [r7, #8]
 80006f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006f8:	4013      	ands	r3, r2
 80006fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000704:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000708:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800070c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070e:	4a04      	ldr	r2, [pc, #16]	@ (8000720 <__NVIC_SetPriorityGrouping+0x44>)
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	60d3      	str	r3, [r2, #12]
}
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000728:	4b04      	ldr	r3, [pc, #16]	@ (800073c <__NVIC_GetPriorityGrouping+0x18>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	0a1b      	lsrs	r3, r3, #8
 800072e:	f003 0307 	and.w	r3, r3, #7
}
 8000732:	4618      	mov	r0, r3
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	6039      	str	r1, [r7, #0]
 800074a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000750:	2b00      	cmp	r3, #0
 8000752:	db0a      	blt.n	800076a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	b2da      	uxtb	r2, r3
 8000758:	490c      	ldr	r1, [pc, #48]	@ (800078c <__NVIC_SetPriority+0x4c>)
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	0112      	lsls	r2, r2, #4
 8000760:	b2d2      	uxtb	r2, r2
 8000762:	440b      	add	r3, r1
 8000764:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000768:	e00a      	b.n	8000780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	b2da      	uxtb	r2, r3
 800076e:	4908      	ldr	r1, [pc, #32]	@ (8000790 <__NVIC_SetPriority+0x50>)
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	3b04      	subs	r3, #4
 8000778:	0112      	lsls	r2, r2, #4
 800077a:	b2d2      	uxtb	r2, r2
 800077c:	440b      	add	r3, r1
 800077e:	761a      	strb	r2, [r3, #24]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100
 8000790:	e000ed00 	.word	0xe000ed00

08000794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000794:	b480      	push	{r7}
 8000796:	b089      	sub	sp, #36	@ 0x24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	f003 0307 	and.w	r3, r3, #7
 80007a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	f1c3 0307 	rsb	r3, r3, #7
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	bf28      	it	cs
 80007b2:	2304      	movcs	r3, #4
 80007b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3304      	adds	r3, #4
 80007ba:	2b06      	cmp	r3, #6
 80007bc:	d902      	bls.n	80007c4 <NVIC_EncodePriority+0x30>
 80007be:	69fb      	ldr	r3, [r7, #28]
 80007c0:	3b03      	subs	r3, #3
 80007c2:	e000      	b.n	80007c6 <NVIC_EncodePriority+0x32>
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	f04f 32ff 	mov.w	r2, #4294967295
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	fa02 f303 	lsl.w	r3, r2, r3
 80007d2:	43da      	mvns	r2, r3
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	401a      	ands	r2, r3
 80007d8:	697b      	ldr	r3, [r7, #20]
 80007da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007dc:	f04f 31ff 	mov.w	r1, #4294967295
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa01 f303 	lsl.w	r3, r1, r3
 80007e6:	43d9      	mvns	r1, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ec:	4313      	orrs	r3, r2
         );
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	3724      	adds	r7, #36	@ 0x24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
	...

080007fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3b01      	subs	r3, #1
 8000808:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800080c:	d301      	bcc.n	8000812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800080e:	2301      	movs	r3, #1
 8000810:	e00f      	b.n	8000832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000812:	4a0a      	ldr	r2, [pc, #40]	@ (800083c <SysTick_Config+0x40>)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3b01      	subs	r3, #1
 8000818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800081a:	210f      	movs	r1, #15
 800081c:	f04f 30ff 	mov.w	r0, #4294967295
 8000820:	f7ff ff8e 	bl	8000740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000824:	4b05      	ldr	r3, [pc, #20]	@ (800083c <SysTick_Config+0x40>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800082a:	4b04      	ldr	r3, [pc, #16]	@ (800083c <SysTick_Config+0x40>)
 800082c:	2207      	movs	r2, #7
 800082e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	e000e010 	.word	0xe000e010

08000840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000848:	6878      	ldr	r0, [r7, #4]
 800084a:	f7ff ff47 	bl	80006dc <__NVIC_SetPriorityGrouping>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b086      	sub	sp, #24
 800085a:	af00      	add	r7, sp, #0
 800085c:	4603      	mov	r3, r0
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000868:	f7ff ff5c 	bl	8000724 <__NVIC_GetPriorityGrouping>
 800086c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	68b9      	ldr	r1, [r7, #8]
 8000872:	6978      	ldr	r0, [r7, #20]
 8000874:	f7ff ff8e 	bl	8000794 <NVIC_EncodePriority>
 8000878:	4602      	mov	r2, r0
 800087a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800087e:	4611      	mov	r1, r2
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff ff5d 	bl	8000740 <__NVIC_SetPriority>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800088e:	b580      	push	{r7, lr}
 8000890:	b082      	sub	sp, #8
 8000892:	af00      	add	r7, sp, #0
 8000894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff ffb0 	bl	80007fc <SysTick_Config>
 800089c:	4603      	mov	r3, r0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b087      	sub	sp, #28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008b6:	e17f      	b.n	8000bb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	2101      	movs	r1, #1
 80008be:	697b      	ldr	r3, [r7, #20]
 80008c0:	fa01 f303 	lsl.w	r3, r1, r3
 80008c4:	4013      	ands	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	f000 8171 	beq.w	8000bb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	f003 0303 	and.w	r3, r3, #3
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d005      	beq.n	80008e8 <HAL_GPIO_Init+0x40>
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	685b      	ldr	r3, [r3, #4]
 80008e0:	f003 0303 	and.w	r3, r3, #3
 80008e4:	2b02      	cmp	r3, #2
 80008e6:	d130      	bne.n	800094a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ee:	697b      	ldr	r3, [r7, #20]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	4013      	ands	r3, r2
 80008fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68da      	ldr	r2, [r3, #12]
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	693a      	ldr	r2, [r7, #16]
 800090e:	4313      	orrs	r3, r2
 8000910:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800091e:	2201      	movs	r2, #1
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43db      	mvns	r3, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4013      	ands	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	091b      	lsrs	r3, r3, #4
 8000934:	f003 0201 	and.w	r2, r3, #1
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa02 f303 	lsl.w	r3, r2, r3
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	4313      	orrs	r3, r2
 8000942:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f003 0303 	and.w	r3, r3, #3
 8000952:	2b03      	cmp	r3, #3
 8000954:	d118      	bne.n	8000988 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800095c:	2201      	movs	r2, #1
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	08db      	lsrs	r3, r3, #3
 8000972:	f003 0201 	and.w	r2, r3, #1
 8000976:	697b      	ldr	r3, [r7, #20]
 8000978:	fa02 f303 	lsl.w	r3, r2, r3
 800097c:	693a      	ldr	r2, [r7, #16]
 800097e:	4313      	orrs	r3, r2
 8000980:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	693a      	ldr	r2, [r7, #16]
 8000986:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 0303 	and.w	r3, r3, #3
 8000990:	2b03      	cmp	r3, #3
 8000992:	d017      	beq.n	80009c4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800099a:	697b      	ldr	r3, [r7, #20]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2203      	movs	r2, #3
 80009a0:	fa02 f303 	lsl.w	r3, r2, r3
 80009a4:	43db      	mvns	r3, r3
 80009a6:	693a      	ldr	r2, [r7, #16]
 80009a8:	4013      	ands	r3, r2
 80009aa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	fa02 f303 	lsl.w	r3, r2, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	f003 0303 	and.w	r3, r3, #3
 80009cc:	2b02      	cmp	r3, #2
 80009ce:	d123      	bne.n	8000a18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80009d0:	697b      	ldr	r3, [r7, #20]
 80009d2:	08da      	lsrs	r2, r3, #3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3208      	adds	r2, #8
 80009d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f003 0307 	and.w	r3, r3, #7
 80009e4:	009b      	lsls	r3, r3, #2
 80009e6:	220f      	movs	r2, #15
 80009e8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ec:	43db      	mvns	r3, r3
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	4013      	ands	r3, r2
 80009f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	691a      	ldr	r2, [r3, #16]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	3208      	adds	r2, #8
 8000a12:	6939      	ldr	r1, [r7, #16]
 8000a14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	2203      	movs	r2, #3
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	43db      	mvns	r3, r3
 8000a2a:	693a      	ldr	r2, [r7, #16]
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	f003 0203 	and.w	r2, r3, #3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	005b      	lsls	r3, r3, #1
 8000a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a40:	693a      	ldr	r2, [r7, #16]
 8000a42:	4313      	orrs	r3, r2
 8000a44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	693a      	ldr	r2, [r7, #16]
 8000a4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	685b      	ldr	r3, [r3, #4]
 8000a50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	f000 80ac 	beq.w	8000bb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000bd8 <HAL_GPIO_Init+0x330>)
 8000a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8000bd8 <HAL_GPIO_Init+0x330>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a66:	4b5c      	ldr	r3, [pc, #368]	@ (8000bd8 <HAL_GPIO_Init+0x330>)
 8000a68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a72:	4a5a      	ldr	r2, [pc, #360]	@ (8000bdc <HAL_GPIO_Init+0x334>)
 8000a74:	697b      	ldr	r3, [r7, #20]
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	3302      	adds	r3, #2
 8000a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	f003 0303 	and.w	r3, r3, #3
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	220f      	movs	r2, #15
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43db      	mvns	r3, r3
 8000a90:	693a      	ldr	r2, [r7, #16]
 8000a92:	4013      	ands	r3, r2
 8000a94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a9c:	d025      	beq.n	8000aea <HAL_GPIO_Init+0x242>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a4f      	ldr	r2, [pc, #316]	@ (8000be0 <HAL_GPIO_Init+0x338>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d01f      	beq.n	8000ae6 <HAL_GPIO_Init+0x23e>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a4e      	ldr	r2, [pc, #312]	@ (8000be4 <HAL_GPIO_Init+0x33c>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d019      	beq.n	8000ae2 <HAL_GPIO_Init+0x23a>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a4d      	ldr	r2, [pc, #308]	@ (8000be8 <HAL_GPIO_Init+0x340>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d013      	beq.n	8000ade <HAL_GPIO_Init+0x236>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a4c      	ldr	r2, [pc, #304]	@ (8000bec <HAL_GPIO_Init+0x344>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d00d      	beq.n	8000ada <HAL_GPIO_Init+0x232>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8000bf0 <HAL_GPIO_Init+0x348>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d007      	beq.n	8000ad6 <HAL_GPIO_Init+0x22e>
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4a4a      	ldr	r2, [pc, #296]	@ (8000bf4 <HAL_GPIO_Init+0x34c>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d101      	bne.n	8000ad2 <HAL_GPIO_Init+0x22a>
 8000ace:	2306      	movs	r3, #6
 8000ad0:	e00c      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ad2:	2307      	movs	r3, #7
 8000ad4:	e00a      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ad6:	2305      	movs	r3, #5
 8000ad8:	e008      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ada:	2304      	movs	r3, #4
 8000adc:	e006      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ade:	2303      	movs	r3, #3
 8000ae0:	e004      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	e002      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e000      	b.n	8000aec <HAL_GPIO_Init+0x244>
 8000aea:	2300      	movs	r3, #0
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	f002 0203 	and.w	r2, r2, #3
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	4093      	lsls	r3, r2
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000afc:	4937      	ldr	r1, [pc, #220]	@ (8000bdc <HAL_GPIO_Init+0x334>)
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	089b      	lsrs	r3, r3, #2
 8000b02:	3302      	adds	r3, #2
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d003      	beq.n	8000b2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000b26:	693a      	ldr	r2, [r7, #16]
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b2e:	4a32      	ldr	r2, [pc, #200]	@ (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b30:	693b      	ldr	r3, [r7, #16]
 8000b32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b34:	4b30      	ldr	r3, [pc, #192]	@ (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	43db      	mvns	r3, r3
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4013      	ands	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000b44:	683b      	ldr	r3, [r7, #0]
 8000b46:	685b      	ldr	r3, [r3, #4]
 8000b48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d003      	beq.n	8000b58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000b50:	693a      	ldr	r2, [r7, #16]
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b58:	4a27      	ldr	r2, [pc, #156]	@ (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	43db      	mvns	r3, r3
 8000b68:	693a      	ldr	r2, [r7, #16]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d003      	beq.n	8000b82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b82:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b84:	693b      	ldr	r3, [r7, #16]
 8000b86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b88:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <HAL_GPIO_Init+0x350>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bac:	4a12      	ldr	r2, [pc, #72]	@ (8000bf8 <HAL_GPIO_Init+0x350>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	f47f ae78 	bne.w	80008b8 <HAL_GPIO_Init+0x10>
  }
}
 8000bc8:	bf00      	nop
 8000bca:	bf00      	nop
 8000bcc:	371c      	adds	r7, #28
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	40010000 	.word	0x40010000
 8000be0:	48000400 	.word	0x48000400
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48000c00 	.word	0x48000c00
 8000bec:	48001000 	.word	0x48001000
 8000bf0:	48001400 	.word	0x48001400
 8000bf4:	48001800 	.word	0x48001800
 8000bf8:	40010400 	.word	0x40010400

08000bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	@ 0x24
 8000c00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c14:	4b3b      	ldr	r3, [pc, #236]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d005      	beq.n	8000c30 <HAL_RCC_GetSysClockFreq+0x34>
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	2b0c      	cmp	r3, #12
 8000c28:	d121      	bne.n	8000c6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d11e      	bne.n	8000c6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8000c30:	4b34      	ldr	r3, [pc, #208]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f003 0308 	and.w	r3, r3, #8
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d107      	bne.n	8000c4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8000c3c:	4b31      	ldr	r3, [pc, #196]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000c42:	0a1b      	lsrs	r3, r3, #8
 8000c44:	f003 030f 	and.w	r3, r3, #15
 8000c48:	61fb      	str	r3, [r7, #28]
 8000c4a:	e005      	b.n	8000c58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8000c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	091b      	lsrs	r3, r3, #4
 8000c52:	f003 030f 	and.w	r3, r3, #15
 8000c56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8000c58:	4a2b      	ldr	r2, [pc, #172]	@ (8000d08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10d      	bne.n	8000c84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000c6c:	e00a      	b.n	8000c84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	2b04      	cmp	r3, #4
 8000c72:	d102      	bne.n	8000c7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8000c74:	4b25      	ldr	r3, [pc, #148]	@ (8000d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8000c76:	61bb      	str	r3, [r7, #24]
 8000c78:	e004      	b.n	8000c84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	2b08      	cmp	r3, #8
 8000c7e:	d101      	bne.n	8000c84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8000c80:	4b23      	ldr	r3, [pc, #140]	@ (8000d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8000c82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	2b0c      	cmp	r3, #12
 8000c88:	d134      	bne.n	8000cf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	2b02      	cmp	r3, #2
 8000c98:	d003      	beq.n	8000ca2 <HAL_RCC_GetSysClockFreq+0xa6>
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	2b03      	cmp	r3, #3
 8000c9e:	d003      	beq.n	8000ca8 <HAL_RCC_GetSysClockFreq+0xac>
 8000ca0:	e005      	b.n	8000cae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d0c <HAL_RCC_GetSysClockFreq+0x110>)
 8000ca4:	617b      	str	r3, [r7, #20]
      break;
 8000ca6:	e005      	b.n	8000cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <HAL_RCC_GetSysClockFreq+0x114>)
 8000caa:	617b      	str	r3, [r7, #20]
      break;
 8000cac:	e002      	b.n	8000cb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	617b      	str	r3, [r7, #20]
      break;
 8000cb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8000cb4:	4b13      	ldr	r3, [pc, #76]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	091b      	lsrs	r3, r3, #4
 8000cba:	f003 0307 	and.w	r3, r3, #7
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8000cc2:	4b10      	ldr	r3, [pc, #64]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ccc:	697a      	ldr	r2, [r7, #20]
 8000cce:	fb03 f202 	mul.w	r2, r3, r2
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8000cda:	4b0a      	ldr	r3, [pc, #40]	@ (8000d04 <HAL_RCC_GetSysClockFreq+0x108>)
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	0e5b      	lsrs	r3, r3, #25
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	005b      	lsls	r3, r3, #1
 8000ce8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8000cea:	697a      	ldr	r2, [r7, #20]
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8000cf4:	69bb      	ldr	r3, [r7, #24]
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3724      	adds	r7, #36	@ 0x24
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	40021000 	.word	0x40021000
 8000d08:	08002a1c 	.word	0x08002a1c
 8000d0c:	00f42400 	.word	0x00f42400
 8000d10:	007a1200 	.word	0x007a1200

08000d14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000d14:	b480      	push	{r7}
 8000d16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000d18:	4b03      	ldr	r3, [pc, #12]	@ (8000d28 <HAL_RCC_GetHCLKFreq+0x14>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	20000008 	.word	0x20000008

08000d2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8000d30:	f7ff fff0 	bl	8000d14 <HAL_RCC_GetHCLKFreq>
 8000d34:	4602      	mov	r2, r0
 8000d36:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	0a1b      	lsrs	r3, r3, #8
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	4904      	ldr	r1, [pc, #16]	@ (8000d54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000d42:	5ccb      	ldrb	r3, [r1, r3]
 8000d44:	f003 031f 	and.w	r3, r3, #31
 8000d48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40021000 	.word	0x40021000
 8000d54:	08002a14 	.word	0x08002a14

08000d58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8000d5c:	f7ff ffda 	bl	8000d14 <HAL_RCC_GetHCLKFreq>
 8000d60:	4602      	mov	r2, r0
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	0adb      	lsrs	r3, r3, #11
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	4904      	ldr	r1, [pc, #16]	@ (8000d80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000d6e:	5ccb      	ldrb	r3, [r1, r3]
 8000d70:	f003 031f 	and.w	r3, r3, #31
 8000d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	08002a14 	.word	0x08002a14

08000d84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e040      	b.n	8000e18 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d106      	bne.n	8000dac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 f83a 	bl	8000e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2224      	movs	r2, #36	@ 0x24
 8000db0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 0201 	bic.w	r2, r2, #1
 8000dc0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d002      	beq.n	8000dd0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8000dca:	6878      	ldr	r0, [r7, #4]
 8000dcc:	f000 fb74 	bl	80014b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f000 f8b9 	bl	8000f48 <UART_SetConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d101      	bne.n	8000de0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e01b      	b.n	8000e18 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	685a      	ldr	r2, [r3, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8000dee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8000dfe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 fbf3 	bl	80015fc <UART_CheckIdleState>
 8000e16:	4603      	mov	r3, r0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3708      	adds	r7, #8
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	@ 0x28
 8000e38:	af02      	add	r7, sp, #8
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4613      	mov	r3, r2
 8000e42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8000e48:	2b20      	cmp	r3, #32
 8000e4a:	d177      	bne.n	8000f3c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d002      	beq.n	8000e58 <HAL_UART_Transmit+0x24>
 8000e52:	88fb      	ldrh	r3, [r7, #6]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e070      	b.n	8000f3e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2221      	movs	r2, #33	@ 0x21
 8000e68:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8000e6a:	f7ff fc07 	bl	800067c <HAL_GetTick>
 8000e6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	88fa      	ldrh	r2, [r7, #6]
 8000e74:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	88fa      	ldrh	r2, [r7, #6]
 8000e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	689b      	ldr	r3, [r3, #8]
 8000e84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e88:	d108      	bne.n	8000e9c <HAL_UART_Transmit+0x68>
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	691b      	ldr	r3, [r3, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d104      	bne.n	8000e9c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	61bb      	str	r3, [r7, #24]
 8000e9a:	e003      	b.n	8000ea4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8000ea4:	e02f      	b.n	8000f06 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	2200      	movs	r2, #0
 8000eae:	2180      	movs	r1, #128	@ 0x80
 8000eb0:	68f8      	ldr	r0, [r7, #12]
 8000eb2:	f000 fc4b 	bl	800174c <UART_WaitOnFlagUntilTimeout>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e03b      	b.n	8000f3e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d10b      	bne.n	8000ee4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	881a      	ldrh	r2, [r3, #0]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	3302      	adds	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
 8000ee2:	e007      	b.n	8000ef4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	781a      	ldrb	r2, [r3, #0]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	3b01      	subs	r3, #1
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d1c9      	bne.n	8000ea6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	9300      	str	r3, [sp, #0]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	2200      	movs	r2, #0
 8000f1a:	2140      	movs	r1, #64	@ 0x40
 8000f1c:	68f8      	ldr	r0, [r7, #12]
 8000f1e:	f000 fc15 	bl	800174c <UART_WaitOnFlagUntilTimeout>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d004      	beq.n	8000f32 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2220      	movs	r2, #32
 8000f2c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e005      	b.n	8000f3e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	2220      	movs	r2, #32
 8000f36:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	e000      	b.n	8000f3e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8000f3c:	2302      	movs	r3, #2
  }
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3720      	adds	r7, #32
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
	...

08000f48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000f48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f4c:	b08a      	sub	sp, #40	@ 0x28
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	689a      	ldr	r2, [r3, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	431a      	orrs	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	695b      	ldr	r3, [r3, #20]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	681a      	ldr	r2, [r3, #0]
 8000f76:	4ba4      	ldr	r3, [pc, #656]	@ (8001208 <UART_SetConfig+0x2c0>)
 8000f78:	4013      	ands	r3, r2
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	6812      	ldr	r2, [r2, #0]
 8000f7e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000f80:	430b      	orrs	r3, r1
 8000f82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	430a      	orrs	r2, r1
 8000f98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a99      	ldr	r2, [pc, #612]	@ (800120c <UART_SetConfig+0x2c4>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d004      	beq.n	8000fb4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	6a1b      	ldr	r3, [r3, #32]
 8000fae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a90      	ldr	r2, [pc, #576]	@ (8001210 <UART_SetConfig+0x2c8>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d126      	bne.n	8001020 <UART_SetConfig+0xd8>
 8000fd2:	4b90      	ldr	r3, [pc, #576]	@ (8001214 <UART_SetConfig+0x2cc>)
 8000fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b03      	cmp	r3, #3
 8000fde:	d81b      	bhi.n	8001018 <UART_SetConfig+0xd0>
 8000fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe8 <UART_SetConfig+0xa0>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08000ff9 	.word	0x08000ff9
 8000fec:	08001009 	.word	0x08001009
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001011 	.word	0x08001011
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8000ffe:	e116      	b.n	800122e <UART_SetConfig+0x2e6>
 8001000:	2302      	movs	r3, #2
 8001002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001006:	e112      	b.n	800122e <UART_SetConfig+0x2e6>
 8001008:	2304      	movs	r3, #4
 800100a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800100e:	e10e      	b.n	800122e <UART_SetConfig+0x2e6>
 8001010:	2308      	movs	r3, #8
 8001012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001016:	e10a      	b.n	800122e <UART_SetConfig+0x2e6>
 8001018:	2310      	movs	r3, #16
 800101a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800101e:	e106      	b.n	800122e <UART_SetConfig+0x2e6>
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a7c      	ldr	r2, [pc, #496]	@ (8001218 <UART_SetConfig+0x2d0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d138      	bne.n	800109c <UART_SetConfig+0x154>
 800102a:	4b7a      	ldr	r3, [pc, #488]	@ (8001214 <UART_SetConfig+0x2cc>)
 800102c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001030:	f003 030c 	and.w	r3, r3, #12
 8001034:	2b0c      	cmp	r3, #12
 8001036:	d82d      	bhi.n	8001094 <UART_SetConfig+0x14c>
 8001038:	a201      	add	r2, pc, #4	@ (adr r2, 8001040 <UART_SetConfig+0xf8>)
 800103a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103e:	bf00      	nop
 8001040:	08001075 	.word	0x08001075
 8001044:	08001095 	.word	0x08001095
 8001048:	08001095 	.word	0x08001095
 800104c:	08001095 	.word	0x08001095
 8001050:	08001085 	.word	0x08001085
 8001054:	08001095 	.word	0x08001095
 8001058:	08001095 	.word	0x08001095
 800105c:	08001095 	.word	0x08001095
 8001060:	0800107d 	.word	0x0800107d
 8001064:	08001095 	.word	0x08001095
 8001068:	08001095 	.word	0x08001095
 800106c:	08001095 	.word	0x08001095
 8001070:	0800108d 	.word	0x0800108d
 8001074:	2300      	movs	r3, #0
 8001076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800107a:	e0d8      	b.n	800122e <UART_SetConfig+0x2e6>
 800107c:	2302      	movs	r3, #2
 800107e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001082:	e0d4      	b.n	800122e <UART_SetConfig+0x2e6>
 8001084:	2304      	movs	r3, #4
 8001086:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800108a:	e0d0      	b.n	800122e <UART_SetConfig+0x2e6>
 800108c:	2308      	movs	r3, #8
 800108e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001092:	e0cc      	b.n	800122e <UART_SetConfig+0x2e6>
 8001094:	2310      	movs	r3, #16
 8001096:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800109a:	e0c8      	b.n	800122e <UART_SetConfig+0x2e6>
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a5e      	ldr	r2, [pc, #376]	@ (800121c <UART_SetConfig+0x2d4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d125      	bne.n	80010f2 <UART_SetConfig+0x1aa>
 80010a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001214 <UART_SetConfig+0x2cc>)
 80010a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010ac:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80010b0:	2b30      	cmp	r3, #48	@ 0x30
 80010b2:	d016      	beq.n	80010e2 <UART_SetConfig+0x19a>
 80010b4:	2b30      	cmp	r3, #48	@ 0x30
 80010b6:	d818      	bhi.n	80010ea <UART_SetConfig+0x1a2>
 80010b8:	2b20      	cmp	r3, #32
 80010ba:	d00a      	beq.n	80010d2 <UART_SetConfig+0x18a>
 80010bc:	2b20      	cmp	r3, #32
 80010be:	d814      	bhi.n	80010ea <UART_SetConfig+0x1a2>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <UART_SetConfig+0x182>
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d008      	beq.n	80010da <UART_SetConfig+0x192>
 80010c8:	e00f      	b.n	80010ea <UART_SetConfig+0x1a2>
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010d0:	e0ad      	b.n	800122e <UART_SetConfig+0x2e6>
 80010d2:	2302      	movs	r3, #2
 80010d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010d8:	e0a9      	b.n	800122e <UART_SetConfig+0x2e6>
 80010da:	2304      	movs	r3, #4
 80010dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010e0:	e0a5      	b.n	800122e <UART_SetConfig+0x2e6>
 80010e2:	2308      	movs	r3, #8
 80010e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010e8:	e0a1      	b.n	800122e <UART_SetConfig+0x2e6>
 80010ea:	2310      	movs	r3, #16
 80010ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80010f0:	e09d      	b.n	800122e <UART_SetConfig+0x2e6>
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a4a      	ldr	r2, [pc, #296]	@ (8001220 <UART_SetConfig+0x2d8>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d125      	bne.n	8001148 <UART_SetConfig+0x200>
 80010fc:	4b45      	ldr	r3, [pc, #276]	@ (8001214 <UART_SetConfig+0x2cc>)
 80010fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001102:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001106:	2bc0      	cmp	r3, #192	@ 0xc0
 8001108:	d016      	beq.n	8001138 <UART_SetConfig+0x1f0>
 800110a:	2bc0      	cmp	r3, #192	@ 0xc0
 800110c:	d818      	bhi.n	8001140 <UART_SetConfig+0x1f8>
 800110e:	2b80      	cmp	r3, #128	@ 0x80
 8001110:	d00a      	beq.n	8001128 <UART_SetConfig+0x1e0>
 8001112:	2b80      	cmp	r3, #128	@ 0x80
 8001114:	d814      	bhi.n	8001140 <UART_SetConfig+0x1f8>
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <UART_SetConfig+0x1d8>
 800111a:	2b40      	cmp	r3, #64	@ 0x40
 800111c:	d008      	beq.n	8001130 <UART_SetConfig+0x1e8>
 800111e:	e00f      	b.n	8001140 <UART_SetConfig+0x1f8>
 8001120:	2300      	movs	r3, #0
 8001122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001126:	e082      	b.n	800122e <UART_SetConfig+0x2e6>
 8001128:	2302      	movs	r3, #2
 800112a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800112e:	e07e      	b.n	800122e <UART_SetConfig+0x2e6>
 8001130:	2304      	movs	r3, #4
 8001132:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001136:	e07a      	b.n	800122e <UART_SetConfig+0x2e6>
 8001138:	2308      	movs	r3, #8
 800113a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800113e:	e076      	b.n	800122e <UART_SetConfig+0x2e6>
 8001140:	2310      	movs	r3, #16
 8001142:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001146:	e072      	b.n	800122e <UART_SetConfig+0x2e6>
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a35      	ldr	r2, [pc, #212]	@ (8001224 <UART_SetConfig+0x2dc>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d12a      	bne.n	80011a8 <UART_SetConfig+0x260>
 8001152:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <UART_SetConfig+0x2cc>)
 8001154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001158:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800115c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001160:	d01a      	beq.n	8001198 <UART_SetConfig+0x250>
 8001162:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001166:	d81b      	bhi.n	80011a0 <UART_SetConfig+0x258>
 8001168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800116c:	d00c      	beq.n	8001188 <UART_SetConfig+0x240>
 800116e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001172:	d815      	bhi.n	80011a0 <UART_SetConfig+0x258>
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <UART_SetConfig+0x238>
 8001178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800117c:	d008      	beq.n	8001190 <UART_SetConfig+0x248>
 800117e:	e00f      	b.n	80011a0 <UART_SetConfig+0x258>
 8001180:	2300      	movs	r3, #0
 8001182:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001186:	e052      	b.n	800122e <UART_SetConfig+0x2e6>
 8001188:	2302      	movs	r3, #2
 800118a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800118e:	e04e      	b.n	800122e <UART_SetConfig+0x2e6>
 8001190:	2304      	movs	r3, #4
 8001192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001196:	e04a      	b.n	800122e <UART_SetConfig+0x2e6>
 8001198:	2308      	movs	r3, #8
 800119a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800119e:	e046      	b.n	800122e <UART_SetConfig+0x2e6>
 80011a0:	2310      	movs	r3, #16
 80011a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011a6:	e042      	b.n	800122e <UART_SetConfig+0x2e6>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a17      	ldr	r2, [pc, #92]	@ (800120c <UART_SetConfig+0x2c4>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d13a      	bne.n	8001228 <UART_SetConfig+0x2e0>
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <UART_SetConfig+0x2cc>)
 80011b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011b8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80011bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80011c0:	d01a      	beq.n	80011f8 <UART_SetConfig+0x2b0>
 80011c2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80011c6:	d81b      	bhi.n	8001200 <UART_SetConfig+0x2b8>
 80011c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011cc:	d00c      	beq.n	80011e8 <UART_SetConfig+0x2a0>
 80011ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80011d2:	d815      	bhi.n	8001200 <UART_SetConfig+0x2b8>
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <UART_SetConfig+0x298>
 80011d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011dc:	d008      	beq.n	80011f0 <UART_SetConfig+0x2a8>
 80011de:	e00f      	b.n	8001200 <UART_SetConfig+0x2b8>
 80011e0:	2300      	movs	r3, #0
 80011e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011e6:	e022      	b.n	800122e <UART_SetConfig+0x2e6>
 80011e8:	2302      	movs	r3, #2
 80011ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011ee:	e01e      	b.n	800122e <UART_SetConfig+0x2e6>
 80011f0:	2304      	movs	r3, #4
 80011f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011f6:	e01a      	b.n	800122e <UART_SetConfig+0x2e6>
 80011f8:	2308      	movs	r3, #8
 80011fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80011fe:	e016      	b.n	800122e <UART_SetConfig+0x2e6>
 8001200:	2310      	movs	r3, #16
 8001202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8001206:	e012      	b.n	800122e <UART_SetConfig+0x2e6>
 8001208:	efff69f3 	.word	0xefff69f3
 800120c:	40008000 	.word	0x40008000
 8001210:	40013800 	.word	0x40013800
 8001214:	40021000 	.word	0x40021000
 8001218:	40004400 	.word	0x40004400
 800121c:	40004800 	.word	0x40004800
 8001220:	40004c00 	.word	0x40004c00
 8001224:	40005000 	.word	0x40005000
 8001228:	2310      	movs	r3, #16
 800122a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a9f      	ldr	r2, [pc, #636]	@ (80014b0 <UART_SetConfig+0x568>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d17a      	bne.n	800132e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8001238:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800123c:	2b08      	cmp	r3, #8
 800123e:	d824      	bhi.n	800128a <UART_SetConfig+0x342>
 8001240:	a201      	add	r2, pc, #4	@ (adr r2, 8001248 <UART_SetConfig+0x300>)
 8001242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001246:	bf00      	nop
 8001248:	0800126d 	.word	0x0800126d
 800124c:	0800128b 	.word	0x0800128b
 8001250:	08001275 	.word	0x08001275
 8001254:	0800128b 	.word	0x0800128b
 8001258:	0800127b 	.word	0x0800127b
 800125c:	0800128b 	.word	0x0800128b
 8001260:	0800128b 	.word	0x0800128b
 8001264:	0800128b 	.word	0x0800128b
 8001268:	08001283 	.word	0x08001283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800126c:	f7ff fd5e 	bl	8000d2c <HAL_RCC_GetPCLK1Freq>
 8001270:	61f8      	str	r0, [r7, #28]
        break;
 8001272:	e010      	b.n	8001296 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001274:	4b8f      	ldr	r3, [pc, #572]	@ (80014b4 <UART_SetConfig+0x56c>)
 8001276:	61fb      	str	r3, [r7, #28]
        break;
 8001278:	e00d      	b.n	8001296 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800127a:	f7ff fcbf 	bl	8000bfc <HAL_RCC_GetSysClockFreq>
 800127e:	61f8      	str	r0, [r7, #28]
        break;
 8001280:	e009      	b.n	8001296 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001286:	61fb      	str	r3, [r7, #28]
        break;
 8001288:	e005      	b.n	8001296 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001294:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80fb 	beq.w	8001494 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	4613      	mov	r3, r2
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	4413      	add	r3, r2
 80012a8:	69fa      	ldr	r2, [r7, #28]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d305      	bcc.n	80012ba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80012b4:	69fa      	ldr	r2, [r7, #28]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d903      	bls.n	80012c2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80012c0:	e0e8      	b.n	8001494 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	2200      	movs	r2, #0
 80012c6:	461c      	mov	r4, r3
 80012c8:	4615      	mov	r5, r2
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	f04f 0300 	mov.w	r3, #0
 80012d2:	022b      	lsls	r3, r5, #8
 80012d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80012d8:	0222      	lsls	r2, r4, #8
 80012da:	68f9      	ldr	r1, [r7, #12]
 80012dc:	6849      	ldr	r1, [r1, #4]
 80012de:	0849      	lsrs	r1, r1, #1
 80012e0:	2000      	movs	r0, #0
 80012e2:	4688      	mov	r8, r1
 80012e4:	4681      	mov	r9, r0
 80012e6:	eb12 0a08 	adds.w	sl, r2, r8
 80012ea:	eb43 0b09 	adc.w	fp, r3, r9
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	2200      	movs	r2, #0
 80012f4:	603b      	str	r3, [r7, #0]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fc:	4650      	mov	r0, sl
 80012fe:	4659      	mov	r1, fp
 8001300:	f7fe ffb6 	bl	8000270 <__aeabi_uldivmod>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4613      	mov	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001312:	d308      	bcc.n	8001326 <UART_SetConfig+0x3de>
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800131a:	d204      	bcs.n	8001326 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	e0b6      	b.n	8001494 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800132c:	e0b2      	b.n	8001494 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001336:	d15e      	bne.n	80013f6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8001338:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800133c:	2b08      	cmp	r3, #8
 800133e:	d828      	bhi.n	8001392 <UART_SetConfig+0x44a>
 8001340:	a201      	add	r2, pc, #4	@ (adr r2, 8001348 <UART_SetConfig+0x400>)
 8001342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001346:	bf00      	nop
 8001348:	0800136d 	.word	0x0800136d
 800134c:	08001375 	.word	0x08001375
 8001350:	0800137d 	.word	0x0800137d
 8001354:	08001393 	.word	0x08001393
 8001358:	08001383 	.word	0x08001383
 800135c:	08001393 	.word	0x08001393
 8001360:	08001393 	.word	0x08001393
 8001364:	08001393 	.word	0x08001393
 8001368:	0800138b 	.word	0x0800138b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800136c:	f7ff fcde 	bl	8000d2c <HAL_RCC_GetPCLK1Freq>
 8001370:	61f8      	str	r0, [r7, #28]
        break;
 8001372:	e014      	b.n	800139e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001374:	f7ff fcf0 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 8001378:	61f8      	str	r0, [r7, #28]
        break;
 800137a:	e010      	b.n	800139e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800137c:	4b4d      	ldr	r3, [pc, #308]	@ (80014b4 <UART_SetConfig+0x56c>)
 800137e:	61fb      	str	r3, [r7, #28]
        break;
 8001380:	e00d      	b.n	800139e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8001382:	f7ff fc3b 	bl	8000bfc <HAL_RCC_GetSysClockFreq>
 8001386:	61f8      	str	r0, [r7, #28]
        break;
 8001388:	e009      	b.n	800139e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800138a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800138e:	61fb      	str	r3, [r7, #28]
        break;
 8001390:	e005      	b.n	800139e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8001392:	2300      	movs	r3, #0
 8001394:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800139c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d077      	beq.n	8001494 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80013a4:	69fb      	ldr	r3, [r7, #28]
 80013a6:	005a      	lsls	r2, r3, #1
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	441a      	add	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	2b0f      	cmp	r3, #15
 80013be:	d916      	bls.n	80013ee <UART_SetConfig+0x4a6>
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013c6:	d212      	bcs.n	80013ee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	f023 030f 	bic.w	r3, r3, #15
 80013d0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	085b      	lsrs	r3, r3, #1
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	b29a      	uxth	r2, r3
 80013de:	8afb      	ldrh	r3, [r7, #22]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	8afa      	ldrh	r2, [r7, #22]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	e052      	b.n	8001494 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80013f4:	e04e      	b.n	8001494 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80013f6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d827      	bhi.n	800144e <UART_SetConfig+0x506>
 80013fe:	a201      	add	r2, pc, #4	@ (adr r2, 8001404 <UART_SetConfig+0x4bc>)
 8001400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001404:	08001429 	.word	0x08001429
 8001408:	08001431 	.word	0x08001431
 800140c:	08001439 	.word	0x08001439
 8001410:	0800144f 	.word	0x0800144f
 8001414:	0800143f 	.word	0x0800143f
 8001418:	0800144f 	.word	0x0800144f
 800141c:	0800144f 	.word	0x0800144f
 8001420:	0800144f 	.word	0x0800144f
 8001424:	08001447 	.word	0x08001447
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8001428:	f7ff fc80 	bl	8000d2c <HAL_RCC_GetPCLK1Freq>
 800142c:	61f8      	str	r0, [r7, #28]
        break;
 800142e:	e014      	b.n	800145a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8001430:	f7ff fc92 	bl	8000d58 <HAL_RCC_GetPCLK2Freq>
 8001434:	61f8      	str	r0, [r7, #28]
        break;
 8001436:	e010      	b.n	800145a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8001438:	4b1e      	ldr	r3, [pc, #120]	@ (80014b4 <UART_SetConfig+0x56c>)
 800143a:	61fb      	str	r3, [r7, #28]
        break;
 800143c:	e00d      	b.n	800145a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800143e:	f7ff fbdd 	bl	8000bfc <HAL_RCC_GetSysClockFreq>
 8001442:	61f8      	str	r0, [r7, #28]
        break;
 8001444:	e009      	b.n	800145a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8001446:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800144a:	61fb      	str	r3, [r7, #28]
        break;
 800144c:	e005      	b.n	800145a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8001458:	bf00      	nop
    }

    if (pclk != 0U)
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d019      	beq.n	8001494 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	085a      	lsrs	r2, r3, #1
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	441a      	add	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001472:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b0f      	cmp	r3, #15
 8001478:	d909      	bls.n	800148e <UART_SetConfig+0x546>
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001480:	d205      	bcs.n	800148e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8001482:	69bb      	ldr	r3, [r7, #24]
 8001484:	b29a      	uxth	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	e002      	b.n	8001494 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	2200      	movs	r2, #0
 800149e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80014a0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3728      	adds	r7, #40	@ 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ae:	bf00      	nop
 80014b0:	40008000 	.word	0x40008000
 80014b4:	00f42400 	.word	0x00f42400

080014b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00a      	beq.n	80014e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00a      	beq.n	8001504 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152a:	f003 0304 	and.w	r3, r3, #4
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00a      	beq.n	8001548 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800154c:	f003 0310 	and.w	r3, r3, #16
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00a      	beq.n	800156a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	430a      	orrs	r2, r1
 8001568:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800156e:	f003 0320 	and.w	r3, r3, #32
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00a      	beq.n	800158c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	430a      	orrs	r2, r1
 800158a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d01a      	beq.n	80015ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80015b6:	d10a      	bne.n	80015ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d00a      	beq.n	80015f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	430a      	orrs	r2, r1
 80015ee:	605a      	str	r2, [r3, #4]
  }
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b098      	sub	sp, #96	@ 0x60
 8001600:	af02      	add	r7, sp, #8
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800160c:	f7ff f836 	bl	800067c <HAL_GetTick>
 8001610:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0308 	and.w	r3, r3, #8
 800161c:	2b08      	cmp	r3, #8
 800161e:	d12e      	bne.n	800167e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001620:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001628:	2200      	movs	r2, #0
 800162a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f000 f88c 	bl	800174c <UART_WaitOnFlagUntilTimeout>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d021      	beq.n	800167e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001642:	e853 3f00 	ldrex	r3, [r3]
 8001646:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8001648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800164a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800164e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001658:	647b      	str	r3, [r7, #68]	@ 0x44
 800165a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800165c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800165e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001660:	e841 2300 	strex	r3, r2, [r1]
 8001664:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8001666:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1e6      	bne.n	800163a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2220      	movs	r2, #32
 8001670:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2200      	movs	r2, #0
 8001676:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e062      	b.n	8001744 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b04      	cmp	r3, #4
 800168a:	d149      	bne.n	8001720 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800168c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001694:	2200      	movs	r2, #0
 8001696:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f856 	bl	800174c <UART_WaitOnFlagUntilTimeout>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d03c      	beq.n	8001720 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016ae:	e853 3f00 	ldrex	r3, [r3]
 80016b2:	623b      	str	r3, [r7, #32]
   return(result);
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80016ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	461a      	mov	r2, r3
 80016c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80016c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80016ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016cc:	e841 2300 	strex	r3, r2, [r1]
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80016d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e6      	bne.n	80016a6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	3308      	adds	r3, #8
 80016de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	e853 3f00 	ldrex	r3, [r3]
 80016e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f023 0301 	bic.w	r3, r3, #1
 80016ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	3308      	adds	r3, #8
 80016f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80016f8:	61fa      	str	r2, [r7, #28]
 80016fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80016fc:	69b9      	ldr	r1, [r7, #24]
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	e841 2300 	strex	r3, r2, [r1]
 8001704:	617b      	str	r3, [r7, #20]
   return(result);
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1e5      	bne.n	80016d8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2220      	movs	r2, #32
 8001710:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e011      	b.n	8001744 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2220      	movs	r2, #32
 8001724:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2220      	movs	r2, #32
 800172a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	3758      	adds	r7, #88	@ 0x58
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	4613      	mov	r3, r2
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800175c:	e049      	b.n	80017f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001764:	d045      	beq.n	80017f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001766:	f7fe ff89 	bl	800067c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	429a      	cmp	r2, r3
 8001774:	d302      	bcc.n	800177c <UART_WaitOnFlagUntilTimeout+0x30>
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e048      	b.n	8001812 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0304 	and.w	r3, r3, #4
 800178a:	2b00      	cmp	r3, #0
 800178c:	d031      	beq.n	80017f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b08      	cmp	r3, #8
 800179a:	d110      	bne.n	80017be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2208      	movs	r2, #8
 80017a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 f838 	bl	800181a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	2208      	movs	r2, #8
 80017ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e029      	b.n	8001812 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80017c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80017cc:	d111      	bne.n	80017f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80017d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f000 f81e 	bl	800181a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	2220      	movs	r2, #32
 80017e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e00f      	b.n	8001812 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	69da      	ldr	r2, [r3, #28]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4013      	ands	r3, r2
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	429a      	cmp	r2, r3
 8001800:	bf0c      	ite	eq
 8001802:	2301      	moveq	r3, #1
 8001804:	2300      	movne	r3, #0
 8001806:	b2db      	uxtb	r3, r3
 8001808:	461a      	mov	r2, r3
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	429a      	cmp	r2, r3
 800180e:	d0a6      	beq.n	800175e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800181a:	b480      	push	{r7}
 800181c:	b095      	sub	sp, #84	@ 0x54
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800182a:	e853 3f00 	ldrex	r3, [r3]
 800182e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	461a      	mov	r2, r3
 800183e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001840:	643b      	str	r3, [r7, #64]	@ 0x40
 8001842:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001848:	e841 2300 	strex	r3, r2, [r1]
 800184c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800184e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1e6      	bne.n	8001822 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3308      	adds	r3, #8
 800185a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	e853 3f00 	ldrex	r3, [r3]
 8001862:	61fb      	str	r3, [r7, #28]
   return(result);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	3308      	adds	r3, #8
 8001872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800187a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800187c:	e841 2300 	strex	r3, r2, [r1]
 8001880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001884:	2b00      	cmp	r3, #0
 8001886:	d1e5      	bne.n	8001854 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188c:	2b01      	cmp	r3, #1
 800188e:	d118      	bne.n	80018c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	e853 3f00 	ldrex	r3, [r3]
 800189c:	60bb      	str	r3, [r7, #8]
   return(result);
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	f023 0310 	bic.w	r3, r3, #16
 80018a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80018b2:	6979      	ldr	r1, [r7, #20]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	e841 2300 	strex	r3, r2, [r1]
 80018ba:	613b      	str	r3, [r7, #16]
   return(result);
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1e6      	bne.n	8001890 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2220      	movs	r2, #32
 80018c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80018d6:	bf00      	nop
 80018d8:	3754      	adds	r7, #84	@ 0x54
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <main>:
uint8_t bStatus;

char message[20] = "Hello from STM32\r\n";

int main()
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
	//add the array which is in screen short
	HAL_Init();
 80018e8:	f7fe fe58 	bl	800059c <HAL_Init>
	usart_init();
 80018ec:	f000 f8c6 	bl	8001a7c <usart_init>



	while(1)
	{
		printf("Printf is being used ! \n\r");
 80018f0:	4803      	ldr	r0, [pc, #12]	@ (8001900 <main+0x1c>)
 80018f2:	f000 fa09 	bl	8001d08 <iprintf>
		HAL_Delay(10);
 80018f6:	200a      	movs	r0, #10
 80018f8:	f7fe fecc 	bl	8000694 <HAL_Delay>
		printf("Printf is being used ! \n\r");
 80018fc:	bf00      	nop
 80018fe:	e7f7      	b.n	80018f0 <main+0xc>
 8001900:	080029f8 	.word	0x080029f8

08001904 <SysTick_Handler>:

}


void SysTick_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8001908:	f7fe fea4 	bl	8000654 <HAL_IncTick>
}
 800190c:	bf00      	nop
 800190e:	bd80      	pop	{r7, pc}

08001910 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	60f8      	str	r0, [r7, #12]
 8001918:	60b9      	str	r1, [r7, #8]
 800191a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	e00a      	b.n	8001938 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001922:	f3af 8000 	nop.w
 8001926:	4601      	mov	r1, r0
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	1c5a      	adds	r2, r3, #1
 800192c:	60ba      	str	r2, [r7, #8]
 800192e:	b2ca      	uxtb	r2, r1
 8001930:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	429a      	cmp	r2, r3
 800193e:	dbf0      	blt.n	8001922 <_read+0x12>
  }

  return len;
 8001940:	687b      	ldr	r3, [r7, #4]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e009      	b.n	8001970 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	1c5a      	adds	r2, r3, #1
 8001960:	60ba      	str	r2, [r7, #8]
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 f877 	bl	8001a58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3301      	adds	r3, #1
 800196e:	617b      	str	r3, [r7, #20]
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	429a      	cmp	r2, r3
 8001976:	dbf1      	blt.n	800195c <_write+0x12>
  }
  return len;
 8001978:	687b      	ldr	r3, [r7, #4]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3718      	adds	r7, #24
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <_close>:

int _close(int file)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019aa:	605a      	str	r2, [r3, #4]
  return 0;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr

080019ba <_isatty>:

int _isatty(int file)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	@ (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f000 fa18 	bl	8001e50 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20018000 	.word	0x20018000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	20000088 	.word	0x20000088
 8001a54:	20000260 	.word	0x20000260

08001a58 <__io_putchar>:
#include "stm32l4xx_hal.h"

UART_HandleTypeDef huart2;
//system call
int __io_putchar(int ch)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,10);
 8001a60:	1d39      	adds	r1, r7, #4
 8001a62:	230a      	movs	r3, #10
 8001a64:	2201      	movs	r2, #1
 8001a66:	4804      	ldr	r0, [pc, #16]	@ (8001a78 <__io_putchar+0x20>)
 8001a68:	f7ff f9e4 	bl	8000e34 <HAL_UART_Transmit>
	return ch;
 8001a6c:	687b      	ldr	r3, [r7, #4]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000008c 	.word	0x2000008c

08001a7c <usart_init>:

void usart_init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b088      	sub	sp, #32
 8001a80:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
	//
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <usart_init+0xa8>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a96:	4a23      	ldr	r2, [pc, #140]	@ (8001b24 <usart_init+0xa8>)
 8001a98:	f043 0301 	orr.w	r3, r3, #1
 8001a9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <usart_init+0xa8>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
	//
	__HAL_RCC_USART2_CLK_ENABLE();
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b24 <usart_init+0xa8>)
 8001aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aae:	4a1d      	ldr	r2, [pc, #116]	@ (8001b24 <usart_init+0xa8>)
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b24 <usart_init+0xa8>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]

	//config pins to act as alternate functions
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8001ac2:	230c      	movs	r3, #12
 8001ac4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aca:	2307      	movs	r3, #7
 8001acc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 030c 	add.w	r3, r7, #12
 8001ada:	4619      	mov	r1, r3
 8001adc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ae0:	f7fe fee2 	bl	80008a8 <HAL_GPIO_Init>


	//msp find what is this ?
	huart2.Instance = USART2;
 8001ae4:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <usart_init+0xac>)
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <usart_init+0xb0>)
 8001ae8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001aea:	4b0f      	ldr	r3, [pc, #60]	@ (8001b28 <usart_init+0xac>)
 8001aec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001af0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001af2:	4b0d      	ldr	r3, [pc, #52]	@ (8001b28 <usart_init+0xac>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001af8:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <usart_init+0xac>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001afe:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <usart_init+0xac>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX;
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <usart_init+0xac>)
 8001b06:	2208      	movs	r2, #8
 8001b08:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <usart_init+0xac>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <usart_init+0xac>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 8001b16:	4804      	ldr	r0, [pc, #16]	@ (8001b28 <usart_init+0xac>)
 8001b18:	f7ff f934 	bl	8000d84 <HAL_UART_Init>


}
 8001b1c:	bf00      	nop
 8001b1e:	3720      	adds	r7, #32
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	2000008c 	.word	0x2000008c
 8001b2c:	40004400 	.word	0x40004400

08001b30 <Reset_Handler>:
 8001b30:	480d      	ldr	r0, [pc, #52]	@ (8001b68 <LoopForever+0x2>)
 8001b32:	4685      	mov	sp, r0
 8001b34:	f3af 8000 	nop.w
 8001b38:	480c      	ldr	r0, [pc, #48]	@ (8001b6c <LoopForever+0x6>)
 8001b3a:	490d      	ldr	r1, [pc, #52]	@ (8001b70 <LoopForever+0xa>)
 8001b3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b74 <LoopForever+0xe>)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e002      	b.n	8001b48 <LoopCopyDataInit>

08001b42 <CopyDataInit>:
 8001b42:	58d4      	ldr	r4, [r2, r3]
 8001b44:	50c4      	str	r4, [r0, r3]
 8001b46:	3304      	adds	r3, #4

08001b48 <LoopCopyDataInit>:
 8001b48:	18c4      	adds	r4, r0, r3
 8001b4a:	428c      	cmp	r4, r1
 8001b4c:	d3f9      	bcc.n	8001b42 <CopyDataInit>
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <LoopForever+0x12>)
 8001b50:	4c0a      	ldr	r4, [pc, #40]	@ (8001b7c <LoopForever+0x16>)
 8001b52:	2300      	movs	r3, #0
 8001b54:	e001      	b.n	8001b5a <LoopFillZerobss>

08001b56 <FillZerobss>:
 8001b56:	6013      	str	r3, [r2, #0]
 8001b58:	3204      	adds	r2, #4

08001b5a <LoopFillZerobss>:
 8001b5a:	42a2      	cmp	r2, r4
 8001b5c:	d3fb      	bcc.n	8001b56 <FillZerobss>
 8001b5e:	f000 f97d 	bl	8001e5c <__libc_init_array>
 8001b62:	f7ff febf 	bl	80018e4 <main>

08001b66 <LoopForever>:
 8001b66:	e7fe      	b.n	8001b66 <LoopForever>
 8001b68:	20018000 	.word	0x20018000
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000068 	.word	0x20000068
 8001b74:	08002a90 	.word	0x08002a90
 8001b78:	20000068 	.word	0x20000068
 8001b7c:	20000260 	.word	0x20000260

08001b80 <ADC1_2_IRQHandler>:
 8001b80:	e7fe      	b.n	8001b80 <ADC1_2_IRQHandler>
	...

08001b84 <std>:
 8001b84:	2300      	movs	r3, #0
 8001b86:	b510      	push	{r4, lr}
 8001b88:	4604      	mov	r4, r0
 8001b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b92:	6083      	str	r3, [r0, #8]
 8001b94:	8181      	strh	r1, [r0, #12]
 8001b96:	6643      	str	r3, [r0, #100]	@ 0x64
 8001b98:	81c2      	strh	r2, [r0, #14]
 8001b9a:	6183      	str	r3, [r0, #24]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	305c      	adds	r0, #92	@ 0x5c
 8001ba2:	f000 f906 	bl	8001db2 <memset>
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bdc <std+0x58>)
 8001ba8:	6263      	str	r3, [r4, #36]	@ 0x24
 8001baa:	4b0d      	ldr	r3, [pc, #52]	@ (8001be0 <std+0x5c>)
 8001bac:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001bae:	4b0d      	ldr	r3, [pc, #52]	@ (8001be4 <std+0x60>)
 8001bb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <std+0x64>)
 8001bb4:	6323      	str	r3, [r4, #48]	@ 0x30
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001bec <std+0x68>)
 8001bb8:	6224      	str	r4, [r4, #32]
 8001bba:	429c      	cmp	r4, r3
 8001bbc:	d006      	beq.n	8001bcc <std+0x48>
 8001bbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001bc2:	4294      	cmp	r4, r2
 8001bc4:	d002      	beq.n	8001bcc <std+0x48>
 8001bc6:	33d0      	adds	r3, #208	@ 0xd0
 8001bc8:	429c      	cmp	r4, r3
 8001bca:	d105      	bne.n	8001bd8 <std+0x54>
 8001bcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001bd4:	f000 b966 	b.w	8001ea4 <__retarget_lock_init_recursive>
 8001bd8:	bd10      	pop	{r4, pc}
 8001bda:	bf00      	nop
 8001bdc:	08001d2d 	.word	0x08001d2d
 8001be0:	08001d4f 	.word	0x08001d4f
 8001be4:	08001d87 	.word	0x08001d87
 8001be8:	08001dab 	.word	0x08001dab
 8001bec:	20000114 	.word	0x20000114

08001bf0 <stdio_exit_handler>:
 8001bf0:	4a02      	ldr	r2, [pc, #8]	@ (8001bfc <stdio_exit_handler+0xc>)
 8001bf2:	4903      	ldr	r1, [pc, #12]	@ (8001c00 <stdio_exit_handler+0x10>)
 8001bf4:	4803      	ldr	r0, [pc, #12]	@ (8001c04 <stdio_exit_handler+0x14>)
 8001bf6:	f000 b869 	b.w	8001ccc <_fwalk_sglue>
 8001bfa:	bf00      	nop
 8001bfc:	2000000c 	.word	0x2000000c
 8001c00:	08002741 	.word	0x08002741
 8001c04:	2000001c 	.word	0x2000001c

08001c08 <cleanup_stdio>:
 8001c08:	6841      	ldr	r1, [r0, #4]
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001c3c <cleanup_stdio+0x34>)
 8001c0c:	4299      	cmp	r1, r3
 8001c0e:	b510      	push	{r4, lr}
 8001c10:	4604      	mov	r4, r0
 8001c12:	d001      	beq.n	8001c18 <cleanup_stdio+0x10>
 8001c14:	f000 fd94 	bl	8002740 <_fflush_r>
 8001c18:	68a1      	ldr	r1, [r4, #8]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	@ (8001c40 <cleanup_stdio+0x38>)
 8001c1c:	4299      	cmp	r1, r3
 8001c1e:	d002      	beq.n	8001c26 <cleanup_stdio+0x1e>
 8001c20:	4620      	mov	r0, r4
 8001c22:	f000 fd8d 	bl	8002740 <_fflush_r>
 8001c26:	68e1      	ldr	r1, [r4, #12]
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <cleanup_stdio+0x3c>)
 8001c2a:	4299      	cmp	r1, r3
 8001c2c:	d004      	beq.n	8001c38 <cleanup_stdio+0x30>
 8001c2e:	4620      	mov	r0, r4
 8001c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c34:	f000 bd84 	b.w	8002740 <_fflush_r>
 8001c38:	bd10      	pop	{r4, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000114 	.word	0x20000114
 8001c40:	2000017c 	.word	0x2000017c
 8001c44:	200001e4 	.word	0x200001e4

08001c48 <global_stdio_init.part.0>:
 8001c48:	b510      	push	{r4, lr}
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <global_stdio_init.part.0+0x30>)
 8001c4c:	4c0b      	ldr	r4, [pc, #44]	@ (8001c7c <global_stdio_init.part.0+0x34>)
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <global_stdio_init.part.0+0x38>)
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	4620      	mov	r0, r4
 8001c54:	2200      	movs	r2, #0
 8001c56:	2104      	movs	r1, #4
 8001c58:	f7ff ff94 	bl	8001b84 <std>
 8001c5c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001c60:	2201      	movs	r2, #1
 8001c62:	2109      	movs	r1, #9
 8001c64:	f7ff ff8e 	bl	8001b84 <std>
 8001c68:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001c6c:	2202      	movs	r2, #2
 8001c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c72:	2112      	movs	r1, #18
 8001c74:	f7ff bf86 	b.w	8001b84 <std>
 8001c78:	2000024c 	.word	0x2000024c
 8001c7c:	20000114 	.word	0x20000114
 8001c80:	08001bf1 	.word	0x08001bf1

08001c84 <__sfp_lock_acquire>:
 8001c84:	4801      	ldr	r0, [pc, #4]	@ (8001c8c <__sfp_lock_acquire+0x8>)
 8001c86:	f000 b90e 	b.w	8001ea6 <__retarget_lock_acquire_recursive>
 8001c8a:	bf00      	nop
 8001c8c:	20000255 	.word	0x20000255

08001c90 <__sfp_lock_release>:
 8001c90:	4801      	ldr	r0, [pc, #4]	@ (8001c98 <__sfp_lock_release+0x8>)
 8001c92:	f000 b909 	b.w	8001ea8 <__retarget_lock_release_recursive>
 8001c96:	bf00      	nop
 8001c98:	20000255 	.word	0x20000255

08001c9c <__sinit>:
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	f7ff fff0 	bl	8001c84 <__sfp_lock_acquire>
 8001ca4:	6a23      	ldr	r3, [r4, #32]
 8001ca6:	b11b      	cbz	r3, 8001cb0 <__sinit+0x14>
 8001ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cac:	f7ff bff0 	b.w	8001c90 <__sfp_lock_release>
 8001cb0:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <__sinit+0x28>)
 8001cb2:	6223      	str	r3, [r4, #32]
 8001cb4:	4b04      	ldr	r3, [pc, #16]	@ (8001cc8 <__sinit+0x2c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f5      	bne.n	8001ca8 <__sinit+0xc>
 8001cbc:	f7ff ffc4 	bl	8001c48 <global_stdio_init.part.0>
 8001cc0:	e7f2      	b.n	8001ca8 <__sinit+0xc>
 8001cc2:	bf00      	nop
 8001cc4:	08001c09 	.word	0x08001c09
 8001cc8:	2000024c 	.word	0x2000024c

08001ccc <_fwalk_sglue>:
 8001ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001cd0:	4607      	mov	r7, r0
 8001cd2:	4688      	mov	r8, r1
 8001cd4:	4614      	mov	r4, r2
 8001cd6:	2600      	movs	r6, #0
 8001cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8001ce0:	d505      	bpl.n	8001cee <_fwalk_sglue+0x22>
 8001ce2:	6824      	ldr	r4, [r4, #0]
 8001ce4:	2c00      	cmp	r4, #0
 8001ce6:	d1f7      	bne.n	8001cd8 <_fwalk_sglue+0xc>
 8001ce8:	4630      	mov	r0, r6
 8001cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cee:	89ab      	ldrh	r3, [r5, #12]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d907      	bls.n	8001d04 <_fwalk_sglue+0x38>
 8001cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	d003      	beq.n	8001d04 <_fwalk_sglue+0x38>
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	4638      	mov	r0, r7
 8001d00:	47c0      	blx	r8
 8001d02:	4306      	orrs	r6, r0
 8001d04:	3568      	adds	r5, #104	@ 0x68
 8001d06:	e7e9      	b.n	8001cdc <_fwalk_sglue+0x10>

08001d08 <iprintf>:
 8001d08:	b40f      	push	{r0, r1, r2, r3}
 8001d0a:	b507      	push	{r0, r1, r2, lr}
 8001d0c:	4906      	ldr	r1, [pc, #24]	@ (8001d28 <iprintf+0x20>)
 8001d0e:	ab04      	add	r3, sp, #16
 8001d10:	6808      	ldr	r0, [r1, #0]
 8001d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d16:	6881      	ldr	r1, [r0, #8]
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	f000 f9e9 	bl	80020f0 <_vfiprintf_r>
 8001d1e:	b003      	add	sp, #12
 8001d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d24:	b004      	add	sp, #16
 8001d26:	4770      	bx	lr
 8001d28:	20000018 	.word	0x20000018

08001d2c <__sread>:
 8001d2c:	b510      	push	{r4, lr}
 8001d2e:	460c      	mov	r4, r1
 8001d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d34:	f000 f868 	bl	8001e08 <_read_r>
 8001d38:	2800      	cmp	r0, #0
 8001d3a:	bfab      	itete	ge
 8001d3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8001d40:	181b      	addge	r3, r3, r0
 8001d42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001d46:	bfac      	ite	ge
 8001d48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001d4a:	81a3      	strhlt	r3, [r4, #12]
 8001d4c:	bd10      	pop	{r4, pc}

08001d4e <__swrite>:
 8001d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d52:	461f      	mov	r7, r3
 8001d54:	898b      	ldrh	r3, [r1, #12]
 8001d56:	05db      	lsls	r3, r3, #23
 8001d58:	4605      	mov	r5, r0
 8001d5a:	460c      	mov	r4, r1
 8001d5c:	4616      	mov	r6, r2
 8001d5e:	d505      	bpl.n	8001d6c <__swrite+0x1e>
 8001d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d64:	2302      	movs	r3, #2
 8001d66:	2200      	movs	r2, #0
 8001d68:	f000 f83c 	bl	8001de4 <_lseek_r>
 8001d6c:	89a3      	ldrh	r3, [r4, #12]
 8001d6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001d76:	81a3      	strh	r3, [r4, #12]
 8001d78:	4632      	mov	r2, r6
 8001d7a:	463b      	mov	r3, r7
 8001d7c:	4628      	mov	r0, r5
 8001d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d82:	f000 b853 	b.w	8001e2c <_write_r>

08001d86 <__sseek>:
 8001d86:	b510      	push	{r4, lr}
 8001d88:	460c      	mov	r4, r1
 8001d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d8e:	f000 f829 	bl	8001de4 <_lseek_r>
 8001d92:	1c43      	adds	r3, r0, #1
 8001d94:	89a3      	ldrh	r3, [r4, #12]
 8001d96:	bf15      	itete	ne
 8001d98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001d9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001d9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001da2:	81a3      	strheq	r3, [r4, #12]
 8001da4:	bf18      	it	ne
 8001da6:	81a3      	strhne	r3, [r4, #12]
 8001da8:	bd10      	pop	{r4, pc}

08001daa <__sclose>:
 8001daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dae:	f000 b809 	b.w	8001dc4 <_close_r>

08001db2 <memset>:
 8001db2:	4402      	add	r2, r0
 8001db4:	4603      	mov	r3, r0
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d100      	bne.n	8001dbc <memset+0xa>
 8001dba:	4770      	bx	lr
 8001dbc:	f803 1b01 	strb.w	r1, [r3], #1
 8001dc0:	e7f9      	b.n	8001db6 <memset+0x4>
	...

08001dc4 <_close_r>:
 8001dc4:	b538      	push	{r3, r4, r5, lr}
 8001dc6:	4d06      	ldr	r5, [pc, #24]	@ (8001de0 <_close_r+0x1c>)
 8001dc8:	2300      	movs	r3, #0
 8001dca:	4604      	mov	r4, r0
 8001dcc:	4608      	mov	r0, r1
 8001dce:	602b      	str	r3, [r5, #0]
 8001dd0:	f7ff fdd7 	bl	8001982 <_close>
 8001dd4:	1c43      	adds	r3, r0, #1
 8001dd6:	d102      	bne.n	8001dde <_close_r+0x1a>
 8001dd8:	682b      	ldr	r3, [r5, #0]
 8001dda:	b103      	cbz	r3, 8001dde <_close_r+0x1a>
 8001ddc:	6023      	str	r3, [r4, #0]
 8001dde:	bd38      	pop	{r3, r4, r5, pc}
 8001de0:	20000250 	.word	0x20000250

08001de4 <_lseek_r>:
 8001de4:	b538      	push	{r3, r4, r5, lr}
 8001de6:	4d07      	ldr	r5, [pc, #28]	@ (8001e04 <_lseek_r+0x20>)
 8001de8:	4604      	mov	r4, r0
 8001dea:	4608      	mov	r0, r1
 8001dec:	4611      	mov	r1, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	602a      	str	r2, [r5, #0]
 8001df2:	461a      	mov	r2, r3
 8001df4:	f7ff fdec 	bl	80019d0 <_lseek>
 8001df8:	1c43      	adds	r3, r0, #1
 8001dfa:	d102      	bne.n	8001e02 <_lseek_r+0x1e>
 8001dfc:	682b      	ldr	r3, [r5, #0]
 8001dfe:	b103      	cbz	r3, 8001e02 <_lseek_r+0x1e>
 8001e00:	6023      	str	r3, [r4, #0]
 8001e02:	bd38      	pop	{r3, r4, r5, pc}
 8001e04:	20000250 	.word	0x20000250

08001e08 <_read_r>:
 8001e08:	b538      	push	{r3, r4, r5, lr}
 8001e0a:	4d07      	ldr	r5, [pc, #28]	@ (8001e28 <_read_r+0x20>)
 8001e0c:	4604      	mov	r4, r0
 8001e0e:	4608      	mov	r0, r1
 8001e10:	4611      	mov	r1, r2
 8001e12:	2200      	movs	r2, #0
 8001e14:	602a      	str	r2, [r5, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f7ff fd7a 	bl	8001910 <_read>
 8001e1c:	1c43      	adds	r3, r0, #1
 8001e1e:	d102      	bne.n	8001e26 <_read_r+0x1e>
 8001e20:	682b      	ldr	r3, [r5, #0]
 8001e22:	b103      	cbz	r3, 8001e26 <_read_r+0x1e>
 8001e24:	6023      	str	r3, [r4, #0]
 8001e26:	bd38      	pop	{r3, r4, r5, pc}
 8001e28:	20000250 	.word	0x20000250

08001e2c <_write_r>:
 8001e2c:	b538      	push	{r3, r4, r5, lr}
 8001e2e:	4d07      	ldr	r5, [pc, #28]	@ (8001e4c <_write_r+0x20>)
 8001e30:	4604      	mov	r4, r0
 8001e32:	4608      	mov	r0, r1
 8001e34:	4611      	mov	r1, r2
 8001e36:	2200      	movs	r2, #0
 8001e38:	602a      	str	r2, [r5, #0]
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	f7ff fd85 	bl	800194a <_write>
 8001e40:	1c43      	adds	r3, r0, #1
 8001e42:	d102      	bne.n	8001e4a <_write_r+0x1e>
 8001e44:	682b      	ldr	r3, [r5, #0]
 8001e46:	b103      	cbz	r3, 8001e4a <_write_r+0x1e>
 8001e48:	6023      	str	r3, [r4, #0]
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}
 8001e4c:	20000250 	.word	0x20000250

08001e50 <__errno>:
 8001e50:	4b01      	ldr	r3, [pc, #4]	@ (8001e58 <__errno+0x8>)
 8001e52:	6818      	ldr	r0, [r3, #0]
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	20000018 	.word	0x20000018

08001e5c <__libc_init_array>:
 8001e5c:	b570      	push	{r4, r5, r6, lr}
 8001e5e:	4d0d      	ldr	r5, [pc, #52]	@ (8001e94 <__libc_init_array+0x38>)
 8001e60:	4c0d      	ldr	r4, [pc, #52]	@ (8001e98 <__libc_init_array+0x3c>)
 8001e62:	1b64      	subs	r4, r4, r5
 8001e64:	10a4      	asrs	r4, r4, #2
 8001e66:	2600      	movs	r6, #0
 8001e68:	42a6      	cmp	r6, r4
 8001e6a:	d109      	bne.n	8001e80 <__libc_init_array+0x24>
 8001e6c:	4d0b      	ldr	r5, [pc, #44]	@ (8001e9c <__libc_init_array+0x40>)
 8001e6e:	4c0c      	ldr	r4, [pc, #48]	@ (8001ea0 <__libc_init_array+0x44>)
 8001e70:	f000 fdb6 	bl	80029e0 <_init>
 8001e74:	1b64      	subs	r4, r4, r5
 8001e76:	10a4      	asrs	r4, r4, #2
 8001e78:	2600      	movs	r6, #0
 8001e7a:	42a6      	cmp	r6, r4
 8001e7c:	d105      	bne.n	8001e8a <__libc_init_array+0x2e>
 8001e7e:	bd70      	pop	{r4, r5, r6, pc}
 8001e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e84:	4798      	blx	r3
 8001e86:	3601      	adds	r6, #1
 8001e88:	e7ee      	b.n	8001e68 <__libc_init_array+0xc>
 8001e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e8e:	4798      	blx	r3
 8001e90:	3601      	adds	r6, #1
 8001e92:	e7f2      	b.n	8001e7a <__libc_init_array+0x1e>
 8001e94:	08002a88 	.word	0x08002a88
 8001e98:	08002a88 	.word	0x08002a88
 8001e9c:	08002a88 	.word	0x08002a88
 8001ea0:	08002a8c 	.word	0x08002a8c

08001ea4 <__retarget_lock_init_recursive>:
 8001ea4:	4770      	bx	lr

08001ea6 <__retarget_lock_acquire_recursive>:
 8001ea6:	4770      	bx	lr

08001ea8 <__retarget_lock_release_recursive>:
 8001ea8:	4770      	bx	lr
	...

08001eac <_free_r>:
 8001eac:	b538      	push	{r3, r4, r5, lr}
 8001eae:	4605      	mov	r5, r0
 8001eb0:	2900      	cmp	r1, #0
 8001eb2:	d041      	beq.n	8001f38 <_free_r+0x8c>
 8001eb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001eb8:	1f0c      	subs	r4, r1, #4
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	bfb8      	it	lt
 8001ebe:	18e4      	addlt	r4, r4, r3
 8001ec0:	f000 f8e0 	bl	8002084 <__malloc_lock>
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f3c <_free_r+0x90>)
 8001ec6:	6813      	ldr	r3, [r2, #0]
 8001ec8:	b933      	cbnz	r3, 8001ed8 <_free_r+0x2c>
 8001eca:	6063      	str	r3, [r4, #4]
 8001ecc:	6014      	str	r4, [r2, #0]
 8001ece:	4628      	mov	r0, r5
 8001ed0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ed4:	f000 b8dc 	b.w	8002090 <__malloc_unlock>
 8001ed8:	42a3      	cmp	r3, r4
 8001eda:	d908      	bls.n	8001eee <_free_r+0x42>
 8001edc:	6820      	ldr	r0, [r4, #0]
 8001ede:	1821      	adds	r1, r4, r0
 8001ee0:	428b      	cmp	r3, r1
 8001ee2:	bf01      	itttt	eq
 8001ee4:	6819      	ldreq	r1, [r3, #0]
 8001ee6:	685b      	ldreq	r3, [r3, #4]
 8001ee8:	1809      	addeq	r1, r1, r0
 8001eea:	6021      	streq	r1, [r4, #0]
 8001eec:	e7ed      	b.n	8001eca <_free_r+0x1e>
 8001eee:	461a      	mov	r2, r3
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	b10b      	cbz	r3, 8001ef8 <_free_r+0x4c>
 8001ef4:	42a3      	cmp	r3, r4
 8001ef6:	d9fa      	bls.n	8001eee <_free_r+0x42>
 8001ef8:	6811      	ldr	r1, [r2, #0]
 8001efa:	1850      	adds	r0, r2, r1
 8001efc:	42a0      	cmp	r0, r4
 8001efe:	d10b      	bne.n	8001f18 <_free_r+0x6c>
 8001f00:	6820      	ldr	r0, [r4, #0]
 8001f02:	4401      	add	r1, r0
 8001f04:	1850      	adds	r0, r2, r1
 8001f06:	4283      	cmp	r3, r0
 8001f08:	6011      	str	r1, [r2, #0]
 8001f0a:	d1e0      	bne.n	8001ece <_free_r+0x22>
 8001f0c:	6818      	ldr	r0, [r3, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	6053      	str	r3, [r2, #4]
 8001f12:	4408      	add	r0, r1
 8001f14:	6010      	str	r0, [r2, #0]
 8001f16:	e7da      	b.n	8001ece <_free_r+0x22>
 8001f18:	d902      	bls.n	8001f20 <_free_r+0x74>
 8001f1a:	230c      	movs	r3, #12
 8001f1c:	602b      	str	r3, [r5, #0]
 8001f1e:	e7d6      	b.n	8001ece <_free_r+0x22>
 8001f20:	6820      	ldr	r0, [r4, #0]
 8001f22:	1821      	adds	r1, r4, r0
 8001f24:	428b      	cmp	r3, r1
 8001f26:	bf04      	itt	eq
 8001f28:	6819      	ldreq	r1, [r3, #0]
 8001f2a:	685b      	ldreq	r3, [r3, #4]
 8001f2c:	6063      	str	r3, [r4, #4]
 8001f2e:	bf04      	itt	eq
 8001f30:	1809      	addeq	r1, r1, r0
 8001f32:	6021      	streq	r1, [r4, #0]
 8001f34:	6054      	str	r4, [r2, #4]
 8001f36:	e7ca      	b.n	8001ece <_free_r+0x22>
 8001f38:	bd38      	pop	{r3, r4, r5, pc}
 8001f3a:	bf00      	nop
 8001f3c:	2000025c 	.word	0x2000025c

08001f40 <sbrk_aligned>:
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	4e0f      	ldr	r6, [pc, #60]	@ (8001f80 <sbrk_aligned+0x40>)
 8001f44:	460c      	mov	r4, r1
 8001f46:	6831      	ldr	r1, [r6, #0]
 8001f48:	4605      	mov	r5, r0
 8001f4a:	b911      	cbnz	r1, 8001f52 <sbrk_aligned+0x12>
 8001f4c:	f000 fcb4 	bl	80028b8 <_sbrk_r>
 8001f50:	6030      	str	r0, [r6, #0]
 8001f52:	4621      	mov	r1, r4
 8001f54:	4628      	mov	r0, r5
 8001f56:	f000 fcaf 	bl	80028b8 <_sbrk_r>
 8001f5a:	1c43      	adds	r3, r0, #1
 8001f5c:	d103      	bne.n	8001f66 <sbrk_aligned+0x26>
 8001f5e:	f04f 34ff 	mov.w	r4, #4294967295
 8001f62:	4620      	mov	r0, r4
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
 8001f66:	1cc4      	adds	r4, r0, #3
 8001f68:	f024 0403 	bic.w	r4, r4, #3
 8001f6c:	42a0      	cmp	r0, r4
 8001f6e:	d0f8      	beq.n	8001f62 <sbrk_aligned+0x22>
 8001f70:	1a21      	subs	r1, r4, r0
 8001f72:	4628      	mov	r0, r5
 8001f74:	f000 fca0 	bl	80028b8 <_sbrk_r>
 8001f78:	3001      	adds	r0, #1
 8001f7a:	d1f2      	bne.n	8001f62 <sbrk_aligned+0x22>
 8001f7c:	e7ef      	b.n	8001f5e <sbrk_aligned+0x1e>
 8001f7e:	bf00      	nop
 8001f80:	20000258 	.word	0x20000258

08001f84 <_malloc_r>:
 8001f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f88:	1ccd      	adds	r5, r1, #3
 8001f8a:	f025 0503 	bic.w	r5, r5, #3
 8001f8e:	3508      	adds	r5, #8
 8001f90:	2d0c      	cmp	r5, #12
 8001f92:	bf38      	it	cc
 8001f94:	250c      	movcc	r5, #12
 8001f96:	2d00      	cmp	r5, #0
 8001f98:	4606      	mov	r6, r0
 8001f9a:	db01      	blt.n	8001fa0 <_malloc_r+0x1c>
 8001f9c:	42a9      	cmp	r1, r5
 8001f9e:	d904      	bls.n	8001faa <_malloc_r+0x26>
 8001fa0:	230c      	movs	r3, #12
 8001fa2:	6033      	str	r3, [r6, #0]
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001faa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002080 <_malloc_r+0xfc>
 8001fae:	f000 f869 	bl	8002084 <__malloc_lock>
 8001fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8001fb6:	461c      	mov	r4, r3
 8001fb8:	bb44      	cbnz	r4, 800200c <_malloc_r+0x88>
 8001fba:	4629      	mov	r1, r5
 8001fbc:	4630      	mov	r0, r6
 8001fbe:	f7ff ffbf 	bl	8001f40 <sbrk_aligned>
 8001fc2:	1c43      	adds	r3, r0, #1
 8001fc4:	4604      	mov	r4, r0
 8001fc6:	d158      	bne.n	800207a <_malloc_r+0xf6>
 8001fc8:	f8d8 4000 	ldr.w	r4, [r8]
 8001fcc:	4627      	mov	r7, r4
 8001fce:	2f00      	cmp	r7, #0
 8001fd0:	d143      	bne.n	800205a <_malloc_r+0xd6>
 8001fd2:	2c00      	cmp	r4, #0
 8001fd4:	d04b      	beq.n	800206e <_malloc_r+0xea>
 8001fd6:	6823      	ldr	r3, [r4, #0]
 8001fd8:	4639      	mov	r1, r7
 8001fda:	4630      	mov	r0, r6
 8001fdc:	eb04 0903 	add.w	r9, r4, r3
 8001fe0:	f000 fc6a 	bl	80028b8 <_sbrk_r>
 8001fe4:	4581      	cmp	r9, r0
 8001fe6:	d142      	bne.n	800206e <_malloc_r+0xea>
 8001fe8:	6821      	ldr	r1, [r4, #0]
 8001fea:	1a6d      	subs	r5, r5, r1
 8001fec:	4629      	mov	r1, r5
 8001fee:	4630      	mov	r0, r6
 8001ff0:	f7ff ffa6 	bl	8001f40 <sbrk_aligned>
 8001ff4:	3001      	adds	r0, #1
 8001ff6:	d03a      	beq.n	800206e <_malloc_r+0xea>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	442b      	add	r3, r5
 8001ffc:	6023      	str	r3, [r4, #0]
 8001ffe:	f8d8 3000 	ldr.w	r3, [r8]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	bb62      	cbnz	r2, 8002060 <_malloc_r+0xdc>
 8002006:	f8c8 7000 	str.w	r7, [r8]
 800200a:	e00f      	b.n	800202c <_malloc_r+0xa8>
 800200c:	6822      	ldr	r2, [r4, #0]
 800200e:	1b52      	subs	r2, r2, r5
 8002010:	d420      	bmi.n	8002054 <_malloc_r+0xd0>
 8002012:	2a0b      	cmp	r2, #11
 8002014:	d917      	bls.n	8002046 <_malloc_r+0xc2>
 8002016:	1961      	adds	r1, r4, r5
 8002018:	42a3      	cmp	r3, r4
 800201a:	6025      	str	r5, [r4, #0]
 800201c:	bf18      	it	ne
 800201e:	6059      	strne	r1, [r3, #4]
 8002020:	6863      	ldr	r3, [r4, #4]
 8002022:	bf08      	it	eq
 8002024:	f8c8 1000 	streq.w	r1, [r8]
 8002028:	5162      	str	r2, [r4, r5]
 800202a:	604b      	str	r3, [r1, #4]
 800202c:	4630      	mov	r0, r6
 800202e:	f000 f82f 	bl	8002090 <__malloc_unlock>
 8002032:	f104 000b 	add.w	r0, r4, #11
 8002036:	1d23      	adds	r3, r4, #4
 8002038:	f020 0007 	bic.w	r0, r0, #7
 800203c:	1ac2      	subs	r2, r0, r3
 800203e:	bf1c      	itt	ne
 8002040:	1a1b      	subne	r3, r3, r0
 8002042:	50a3      	strne	r3, [r4, r2]
 8002044:	e7af      	b.n	8001fa6 <_malloc_r+0x22>
 8002046:	6862      	ldr	r2, [r4, #4]
 8002048:	42a3      	cmp	r3, r4
 800204a:	bf0c      	ite	eq
 800204c:	f8c8 2000 	streq.w	r2, [r8]
 8002050:	605a      	strne	r2, [r3, #4]
 8002052:	e7eb      	b.n	800202c <_malloc_r+0xa8>
 8002054:	4623      	mov	r3, r4
 8002056:	6864      	ldr	r4, [r4, #4]
 8002058:	e7ae      	b.n	8001fb8 <_malloc_r+0x34>
 800205a:	463c      	mov	r4, r7
 800205c:	687f      	ldr	r7, [r7, #4]
 800205e:	e7b6      	b.n	8001fce <_malloc_r+0x4a>
 8002060:	461a      	mov	r2, r3
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	42a3      	cmp	r3, r4
 8002066:	d1fb      	bne.n	8002060 <_malloc_r+0xdc>
 8002068:	2300      	movs	r3, #0
 800206a:	6053      	str	r3, [r2, #4]
 800206c:	e7de      	b.n	800202c <_malloc_r+0xa8>
 800206e:	230c      	movs	r3, #12
 8002070:	6033      	str	r3, [r6, #0]
 8002072:	4630      	mov	r0, r6
 8002074:	f000 f80c 	bl	8002090 <__malloc_unlock>
 8002078:	e794      	b.n	8001fa4 <_malloc_r+0x20>
 800207a:	6005      	str	r5, [r0, #0]
 800207c:	e7d6      	b.n	800202c <_malloc_r+0xa8>
 800207e:	bf00      	nop
 8002080:	2000025c 	.word	0x2000025c

08002084 <__malloc_lock>:
 8002084:	4801      	ldr	r0, [pc, #4]	@ (800208c <__malloc_lock+0x8>)
 8002086:	f7ff bf0e 	b.w	8001ea6 <__retarget_lock_acquire_recursive>
 800208a:	bf00      	nop
 800208c:	20000254 	.word	0x20000254

08002090 <__malloc_unlock>:
 8002090:	4801      	ldr	r0, [pc, #4]	@ (8002098 <__malloc_unlock+0x8>)
 8002092:	f7ff bf09 	b.w	8001ea8 <__retarget_lock_release_recursive>
 8002096:	bf00      	nop
 8002098:	20000254 	.word	0x20000254

0800209c <__sfputc_r>:
 800209c:	6893      	ldr	r3, [r2, #8]
 800209e:	3b01      	subs	r3, #1
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	b410      	push	{r4}
 80020a4:	6093      	str	r3, [r2, #8]
 80020a6:	da08      	bge.n	80020ba <__sfputc_r+0x1e>
 80020a8:	6994      	ldr	r4, [r2, #24]
 80020aa:	42a3      	cmp	r3, r4
 80020ac:	db01      	blt.n	80020b2 <__sfputc_r+0x16>
 80020ae:	290a      	cmp	r1, #10
 80020b0:	d103      	bne.n	80020ba <__sfputc_r+0x1e>
 80020b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020b6:	f000 bb6b 	b.w	8002790 <__swbuf_r>
 80020ba:	6813      	ldr	r3, [r2, #0]
 80020bc:	1c58      	adds	r0, r3, #1
 80020be:	6010      	str	r0, [r2, #0]
 80020c0:	7019      	strb	r1, [r3, #0]
 80020c2:	4608      	mov	r0, r1
 80020c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020c8:	4770      	bx	lr

080020ca <__sfputs_r>:
 80020ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020cc:	4606      	mov	r6, r0
 80020ce:	460f      	mov	r7, r1
 80020d0:	4614      	mov	r4, r2
 80020d2:	18d5      	adds	r5, r2, r3
 80020d4:	42ac      	cmp	r4, r5
 80020d6:	d101      	bne.n	80020dc <__sfputs_r+0x12>
 80020d8:	2000      	movs	r0, #0
 80020da:	e007      	b.n	80020ec <__sfputs_r+0x22>
 80020dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80020e0:	463a      	mov	r2, r7
 80020e2:	4630      	mov	r0, r6
 80020e4:	f7ff ffda 	bl	800209c <__sfputc_r>
 80020e8:	1c43      	adds	r3, r0, #1
 80020ea:	d1f3      	bne.n	80020d4 <__sfputs_r+0xa>
 80020ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080020f0 <_vfiprintf_r>:
 80020f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020f4:	460d      	mov	r5, r1
 80020f6:	b09d      	sub	sp, #116	@ 0x74
 80020f8:	4614      	mov	r4, r2
 80020fa:	4698      	mov	r8, r3
 80020fc:	4606      	mov	r6, r0
 80020fe:	b118      	cbz	r0, 8002108 <_vfiprintf_r+0x18>
 8002100:	6a03      	ldr	r3, [r0, #32]
 8002102:	b90b      	cbnz	r3, 8002108 <_vfiprintf_r+0x18>
 8002104:	f7ff fdca 	bl	8001c9c <__sinit>
 8002108:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800210a:	07d9      	lsls	r1, r3, #31
 800210c:	d405      	bmi.n	800211a <_vfiprintf_r+0x2a>
 800210e:	89ab      	ldrh	r3, [r5, #12]
 8002110:	059a      	lsls	r2, r3, #22
 8002112:	d402      	bmi.n	800211a <_vfiprintf_r+0x2a>
 8002114:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002116:	f7ff fec6 	bl	8001ea6 <__retarget_lock_acquire_recursive>
 800211a:	89ab      	ldrh	r3, [r5, #12]
 800211c:	071b      	lsls	r3, r3, #28
 800211e:	d501      	bpl.n	8002124 <_vfiprintf_r+0x34>
 8002120:	692b      	ldr	r3, [r5, #16]
 8002122:	b99b      	cbnz	r3, 800214c <_vfiprintf_r+0x5c>
 8002124:	4629      	mov	r1, r5
 8002126:	4630      	mov	r0, r6
 8002128:	f000 fb70 	bl	800280c <__swsetup_r>
 800212c:	b170      	cbz	r0, 800214c <_vfiprintf_r+0x5c>
 800212e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002130:	07dc      	lsls	r4, r3, #31
 8002132:	d504      	bpl.n	800213e <_vfiprintf_r+0x4e>
 8002134:	f04f 30ff 	mov.w	r0, #4294967295
 8002138:	b01d      	add	sp, #116	@ 0x74
 800213a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800213e:	89ab      	ldrh	r3, [r5, #12]
 8002140:	0598      	lsls	r0, r3, #22
 8002142:	d4f7      	bmi.n	8002134 <_vfiprintf_r+0x44>
 8002144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002146:	f7ff feaf 	bl	8001ea8 <__retarget_lock_release_recursive>
 800214a:	e7f3      	b.n	8002134 <_vfiprintf_r+0x44>
 800214c:	2300      	movs	r3, #0
 800214e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002150:	2320      	movs	r3, #32
 8002152:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002156:	f8cd 800c 	str.w	r8, [sp, #12]
 800215a:	2330      	movs	r3, #48	@ 0x30
 800215c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800230c <_vfiprintf_r+0x21c>
 8002160:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002164:	f04f 0901 	mov.w	r9, #1
 8002168:	4623      	mov	r3, r4
 800216a:	469a      	mov	sl, r3
 800216c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002170:	b10a      	cbz	r2, 8002176 <_vfiprintf_r+0x86>
 8002172:	2a25      	cmp	r2, #37	@ 0x25
 8002174:	d1f9      	bne.n	800216a <_vfiprintf_r+0x7a>
 8002176:	ebba 0b04 	subs.w	fp, sl, r4
 800217a:	d00b      	beq.n	8002194 <_vfiprintf_r+0xa4>
 800217c:	465b      	mov	r3, fp
 800217e:	4622      	mov	r2, r4
 8002180:	4629      	mov	r1, r5
 8002182:	4630      	mov	r0, r6
 8002184:	f7ff ffa1 	bl	80020ca <__sfputs_r>
 8002188:	3001      	adds	r0, #1
 800218a:	f000 80a7 	beq.w	80022dc <_vfiprintf_r+0x1ec>
 800218e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002190:	445a      	add	r2, fp
 8002192:	9209      	str	r2, [sp, #36]	@ 0x24
 8002194:	f89a 3000 	ldrb.w	r3, [sl]
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 809f 	beq.w	80022dc <_vfiprintf_r+0x1ec>
 800219e:	2300      	movs	r3, #0
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80021a8:	f10a 0a01 	add.w	sl, sl, #1
 80021ac:	9304      	str	r3, [sp, #16]
 80021ae:	9307      	str	r3, [sp, #28]
 80021b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80021b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80021b6:	4654      	mov	r4, sl
 80021b8:	2205      	movs	r2, #5
 80021ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80021be:	4853      	ldr	r0, [pc, #332]	@ (800230c <_vfiprintf_r+0x21c>)
 80021c0:	f7fe f806 	bl	80001d0 <memchr>
 80021c4:	9a04      	ldr	r2, [sp, #16]
 80021c6:	b9d8      	cbnz	r0, 8002200 <_vfiprintf_r+0x110>
 80021c8:	06d1      	lsls	r1, r2, #27
 80021ca:	bf44      	itt	mi
 80021cc:	2320      	movmi	r3, #32
 80021ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021d2:	0713      	lsls	r3, r2, #28
 80021d4:	bf44      	itt	mi
 80021d6:	232b      	movmi	r3, #43	@ 0x2b
 80021d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80021dc:	f89a 3000 	ldrb.w	r3, [sl]
 80021e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80021e2:	d015      	beq.n	8002210 <_vfiprintf_r+0x120>
 80021e4:	9a07      	ldr	r2, [sp, #28]
 80021e6:	4654      	mov	r4, sl
 80021e8:	2000      	movs	r0, #0
 80021ea:	f04f 0c0a 	mov.w	ip, #10
 80021ee:	4621      	mov	r1, r4
 80021f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80021f4:	3b30      	subs	r3, #48	@ 0x30
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	d94b      	bls.n	8002292 <_vfiprintf_r+0x1a2>
 80021fa:	b1b0      	cbz	r0, 800222a <_vfiprintf_r+0x13a>
 80021fc:	9207      	str	r2, [sp, #28]
 80021fe:	e014      	b.n	800222a <_vfiprintf_r+0x13a>
 8002200:	eba0 0308 	sub.w	r3, r0, r8
 8002204:	fa09 f303 	lsl.w	r3, r9, r3
 8002208:	4313      	orrs	r3, r2
 800220a:	9304      	str	r3, [sp, #16]
 800220c:	46a2      	mov	sl, r4
 800220e:	e7d2      	b.n	80021b6 <_vfiprintf_r+0xc6>
 8002210:	9b03      	ldr	r3, [sp, #12]
 8002212:	1d19      	adds	r1, r3, #4
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	9103      	str	r1, [sp, #12]
 8002218:	2b00      	cmp	r3, #0
 800221a:	bfbb      	ittet	lt
 800221c:	425b      	neglt	r3, r3
 800221e:	f042 0202 	orrlt.w	r2, r2, #2
 8002222:	9307      	strge	r3, [sp, #28]
 8002224:	9307      	strlt	r3, [sp, #28]
 8002226:	bfb8      	it	lt
 8002228:	9204      	strlt	r2, [sp, #16]
 800222a:	7823      	ldrb	r3, [r4, #0]
 800222c:	2b2e      	cmp	r3, #46	@ 0x2e
 800222e:	d10a      	bne.n	8002246 <_vfiprintf_r+0x156>
 8002230:	7863      	ldrb	r3, [r4, #1]
 8002232:	2b2a      	cmp	r3, #42	@ 0x2a
 8002234:	d132      	bne.n	800229c <_vfiprintf_r+0x1ac>
 8002236:	9b03      	ldr	r3, [sp, #12]
 8002238:	1d1a      	adds	r2, r3, #4
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	9203      	str	r2, [sp, #12]
 800223e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002242:	3402      	adds	r4, #2
 8002244:	9305      	str	r3, [sp, #20]
 8002246:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800231c <_vfiprintf_r+0x22c>
 800224a:	7821      	ldrb	r1, [r4, #0]
 800224c:	2203      	movs	r2, #3
 800224e:	4650      	mov	r0, sl
 8002250:	f7fd ffbe 	bl	80001d0 <memchr>
 8002254:	b138      	cbz	r0, 8002266 <_vfiprintf_r+0x176>
 8002256:	9b04      	ldr	r3, [sp, #16]
 8002258:	eba0 000a 	sub.w	r0, r0, sl
 800225c:	2240      	movs	r2, #64	@ 0x40
 800225e:	4082      	lsls	r2, r0
 8002260:	4313      	orrs	r3, r2
 8002262:	3401      	adds	r4, #1
 8002264:	9304      	str	r3, [sp, #16]
 8002266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800226a:	4829      	ldr	r0, [pc, #164]	@ (8002310 <_vfiprintf_r+0x220>)
 800226c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002270:	2206      	movs	r2, #6
 8002272:	f7fd ffad 	bl	80001d0 <memchr>
 8002276:	2800      	cmp	r0, #0
 8002278:	d03f      	beq.n	80022fa <_vfiprintf_r+0x20a>
 800227a:	4b26      	ldr	r3, [pc, #152]	@ (8002314 <_vfiprintf_r+0x224>)
 800227c:	bb1b      	cbnz	r3, 80022c6 <_vfiprintf_r+0x1d6>
 800227e:	9b03      	ldr	r3, [sp, #12]
 8002280:	3307      	adds	r3, #7
 8002282:	f023 0307 	bic.w	r3, r3, #7
 8002286:	3308      	adds	r3, #8
 8002288:	9303      	str	r3, [sp, #12]
 800228a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800228c:	443b      	add	r3, r7
 800228e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002290:	e76a      	b.n	8002168 <_vfiprintf_r+0x78>
 8002292:	fb0c 3202 	mla	r2, ip, r2, r3
 8002296:	460c      	mov	r4, r1
 8002298:	2001      	movs	r0, #1
 800229a:	e7a8      	b.n	80021ee <_vfiprintf_r+0xfe>
 800229c:	2300      	movs	r3, #0
 800229e:	3401      	adds	r4, #1
 80022a0:	9305      	str	r3, [sp, #20]
 80022a2:	4619      	mov	r1, r3
 80022a4:	f04f 0c0a 	mov.w	ip, #10
 80022a8:	4620      	mov	r0, r4
 80022aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80022ae:	3a30      	subs	r2, #48	@ 0x30
 80022b0:	2a09      	cmp	r2, #9
 80022b2:	d903      	bls.n	80022bc <_vfiprintf_r+0x1cc>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0c6      	beq.n	8002246 <_vfiprintf_r+0x156>
 80022b8:	9105      	str	r1, [sp, #20]
 80022ba:	e7c4      	b.n	8002246 <_vfiprintf_r+0x156>
 80022bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80022c0:	4604      	mov	r4, r0
 80022c2:	2301      	movs	r3, #1
 80022c4:	e7f0      	b.n	80022a8 <_vfiprintf_r+0x1b8>
 80022c6:	ab03      	add	r3, sp, #12
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	462a      	mov	r2, r5
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <_vfiprintf_r+0x228>)
 80022ce:	a904      	add	r1, sp, #16
 80022d0:	4630      	mov	r0, r6
 80022d2:	f3af 8000 	nop.w
 80022d6:	4607      	mov	r7, r0
 80022d8:	1c78      	adds	r0, r7, #1
 80022da:	d1d6      	bne.n	800228a <_vfiprintf_r+0x19a>
 80022dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80022de:	07d9      	lsls	r1, r3, #31
 80022e0:	d405      	bmi.n	80022ee <_vfiprintf_r+0x1fe>
 80022e2:	89ab      	ldrh	r3, [r5, #12]
 80022e4:	059a      	lsls	r2, r3, #22
 80022e6:	d402      	bmi.n	80022ee <_vfiprintf_r+0x1fe>
 80022e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80022ea:	f7ff fddd 	bl	8001ea8 <__retarget_lock_release_recursive>
 80022ee:	89ab      	ldrh	r3, [r5, #12]
 80022f0:	065b      	lsls	r3, r3, #25
 80022f2:	f53f af1f 	bmi.w	8002134 <_vfiprintf_r+0x44>
 80022f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80022f8:	e71e      	b.n	8002138 <_vfiprintf_r+0x48>
 80022fa:	ab03      	add	r3, sp, #12
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	462a      	mov	r2, r5
 8002300:	4b05      	ldr	r3, [pc, #20]	@ (8002318 <_vfiprintf_r+0x228>)
 8002302:	a904      	add	r1, sp, #16
 8002304:	4630      	mov	r0, r6
 8002306:	f000 f879 	bl	80023fc <_printf_i>
 800230a:	e7e4      	b.n	80022d6 <_vfiprintf_r+0x1e6>
 800230c:	08002a4c 	.word	0x08002a4c
 8002310:	08002a56 	.word	0x08002a56
 8002314:	00000000 	.word	0x00000000
 8002318:	080020cb 	.word	0x080020cb
 800231c:	08002a52 	.word	0x08002a52

08002320 <_printf_common>:
 8002320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002324:	4616      	mov	r6, r2
 8002326:	4698      	mov	r8, r3
 8002328:	688a      	ldr	r2, [r1, #8]
 800232a:	690b      	ldr	r3, [r1, #16]
 800232c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002330:	4293      	cmp	r3, r2
 8002332:	bfb8      	it	lt
 8002334:	4613      	movlt	r3, r2
 8002336:	6033      	str	r3, [r6, #0]
 8002338:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800233c:	4607      	mov	r7, r0
 800233e:	460c      	mov	r4, r1
 8002340:	b10a      	cbz	r2, 8002346 <_printf_common+0x26>
 8002342:	3301      	adds	r3, #1
 8002344:	6033      	str	r3, [r6, #0]
 8002346:	6823      	ldr	r3, [r4, #0]
 8002348:	0699      	lsls	r1, r3, #26
 800234a:	bf42      	ittt	mi
 800234c:	6833      	ldrmi	r3, [r6, #0]
 800234e:	3302      	addmi	r3, #2
 8002350:	6033      	strmi	r3, [r6, #0]
 8002352:	6825      	ldr	r5, [r4, #0]
 8002354:	f015 0506 	ands.w	r5, r5, #6
 8002358:	d106      	bne.n	8002368 <_printf_common+0x48>
 800235a:	f104 0a19 	add.w	sl, r4, #25
 800235e:	68e3      	ldr	r3, [r4, #12]
 8002360:	6832      	ldr	r2, [r6, #0]
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	42ab      	cmp	r3, r5
 8002366:	dc26      	bgt.n	80023b6 <_printf_common+0x96>
 8002368:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800236c:	6822      	ldr	r2, [r4, #0]
 800236e:	3b00      	subs	r3, #0
 8002370:	bf18      	it	ne
 8002372:	2301      	movne	r3, #1
 8002374:	0692      	lsls	r2, r2, #26
 8002376:	d42b      	bmi.n	80023d0 <_printf_common+0xb0>
 8002378:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800237c:	4641      	mov	r1, r8
 800237e:	4638      	mov	r0, r7
 8002380:	47c8      	blx	r9
 8002382:	3001      	adds	r0, #1
 8002384:	d01e      	beq.n	80023c4 <_printf_common+0xa4>
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	6922      	ldr	r2, [r4, #16]
 800238a:	f003 0306 	and.w	r3, r3, #6
 800238e:	2b04      	cmp	r3, #4
 8002390:	bf02      	ittt	eq
 8002392:	68e5      	ldreq	r5, [r4, #12]
 8002394:	6833      	ldreq	r3, [r6, #0]
 8002396:	1aed      	subeq	r5, r5, r3
 8002398:	68a3      	ldr	r3, [r4, #8]
 800239a:	bf0c      	ite	eq
 800239c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80023a0:	2500      	movne	r5, #0
 80023a2:	4293      	cmp	r3, r2
 80023a4:	bfc4      	itt	gt
 80023a6:	1a9b      	subgt	r3, r3, r2
 80023a8:	18ed      	addgt	r5, r5, r3
 80023aa:	2600      	movs	r6, #0
 80023ac:	341a      	adds	r4, #26
 80023ae:	42b5      	cmp	r5, r6
 80023b0:	d11a      	bne.n	80023e8 <_printf_common+0xc8>
 80023b2:	2000      	movs	r0, #0
 80023b4:	e008      	b.n	80023c8 <_printf_common+0xa8>
 80023b6:	2301      	movs	r3, #1
 80023b8:	4652      	mov	r2, sl
 80023ba:	4641      	mov	r1, r8
 80023bc:	4638      	mov	r0, r7
 80023be:	47c8      	blx	r9
 80023c0:	3001      	adds	r0, #1
 80023c2:	d103      	bne.n	80023cc <_printf_common+0xac>
 80023c4:	f04f 30ff 	mov.w	r0, #4294967295
 80023c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80023cc:	3501      	adds	r5, #1
 80023ce:	e7c6      	b.n	800235e <_printf_common+0x3e>
 80023d0:	18e1      	adds	r1, r4, r3
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	2030      	movs	r0, #48	@ 0x30
 80023d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80023da:	4422      	add	r2, r4
 80023dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80023e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80023e4:	3302      	adds	r3, #2
 80023e6:	e7c7      	b.n	8002378 <_printf_common+0x58>
 80023e8:	2301      	movs	r3, #1
 80023ea:	4622      	mov	r2, r4
 80023ec:	4641      	mov	r1, r8
 80023ee:	4638      	mov	r0, r7
 80023f0:	47c8      	blx	r9
 80023f2:	3001      	adds	r0, #1
 80023f4:	d0e6      	beq.n	80023c4 <_printf_common+0xa4>
 80023f6:	3601      	adds	r6, #1
 80023f8:	e7d9      	b.n	80023ae <_printf_common+0x8e>
	...

080023fc <_printf_i>:
 80023fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002400:	7e0f      	ldrb	r7, [r1, #24]
 8002402:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002404:	2f78      	cmp	r7, #120	@ 0x78
 8002406:	4691      	mov	r9, r2
 8002408:	4680      	mov	r8, r0
 800240a:	460c      	mov	r4, r1
 800240c:	469a      	mov	sl, r3
 800240e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002412:	d807      	bhi.n	8002424 <_printf_i+0x28>
 8002414:	2f62      	cmp	r7, #98	@ 0x62
 8002416:	d80a      	bhi.n	800242e <_printf_i+0x32>
 8002418:	2f00      	cmp	r7, #0
 800241a:	f000 80d1 	beq.w	80025c0 <_printf_i+0x1c4>
 800241e:	2f58      	cmp	r7, #88	@ 0x58
 8002420:	f000 80b8 	beq.w	8002594 <_printf_i+0x198>
 8002424:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002428:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800242c:	e03a      	b.n	80024a4 <_printf_i+0xa8>
 800242e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002432:	2b15      	cmp	r3, #21
 8002434:	d8f6      	bhi.n	8002424 <_printf_i+0x28>
 8002436:	a101      	add	r1, pc, #4	@ (adr r1, 800243c <_printf_i+0x40>)
 8002438:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800243c:	08002495 	.word	0x08002495
 8002440:	080024a9 	.word	0x080024a9
 8002444:	08002425 	.word	0x08002425
 8002448:	08002425 	.word	0x08002425
 800244c:	08002425 	.word	0x08002425
 8002450:	08002425 	.word	0x08002425
 8002454:	080024a9 	.word	0x080024a9
 8002458:	08002425 	.word	0x08002425
 800245c:	08002425 	.word	0x08002425
 8002460:	08002425 	.word	0x08002425
 8002464:	08002425 	.word	0x08002425
 8002468:	080025a7 	.word	0x080025a7
 800246c:	080024d3 	.word	0x080024d3
 8002470:	08002561 	.word	0x08002561
 8002474:	08002425 	.word	0x08002425
 8002478:	08002425 	.word	0x08002425
 800247c:	080025c9 	.word	0x080025c9
 8002480:	08002425 	.word	0x08002425
 8002484:	080024d3 	.word	0x080024d3
 8002488:	08002425 	.word	0x08002425
 800248c:	08002425 	.word	0x08002425
 8002490:	08002569 	.word	0x08002569
 8002494:	6833      	ldr	r3, [r6, #0]
 8002496:	1d1a      	adds	r2, r3, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6032      	str	r2, [r6, #0]
 800249c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80024a4:	2301      	movs	r3, #1
 80024a6:	e09c      	b.n	80025e2 <_printf_i+0x1e6>
 80024a8:	6833      	ldr	r3, [r6, #0]
 80024aa:	6820      	ldr	r0, [r4, #0]
 80024ac:	1d19      	adds	r1, r3, #4
 80024ae:	6031      	str	r1, [r6, #0]
 80024b0:	0606      	lsls	r6, r0, #24
 80024b2:	d501      	bpl.n	80024b8 <_printf_i+0xbc>
 80024b4:	681d      	ldr	r5, [r3, #0]
 80024b6:	e003      	b.n	80024c0 <_printf_i+0xc4>
 80024b8:	0645      	lsls	r5, r0, #25
 80024ba:	d5fb      	bpl.n	80024b4 <_printf_i+0xb8>
 80024bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80024c0:	2d00      	cmp	r5, #0
 80024c2:	da03      	bge.n	80024cc <_printf_i+0xd0>
 80024c4:	232d      	movs	r3, #45	@ 0x2d
 80024c6:	426d      	negs	r5, r5
 80024c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80024cc:	4858      	ldr	r0, [pc, #352]	@ (8002630 <_printf_i+0x234>)
 80024ce:	230a      	movs	r3, #10
 80024d0:	e011      	b.n	80024f6 <_printf_i+0xfa>
 80024d2:	6821      	ldr	r1, [r4, #0]
 80024d4:	6833      	ldr	r3, [r6, #0]
 80024d6:	0608      	lsls	r0, r1, #24
 80024d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80024dc:	d402      	bmi.n	80024e4 <_printf_i+0xe8>
 80024de:	0649      	lsls	r1, r1, #25
 80024e0:	bf48      	it	mi
 80024e2:	b2ad      	uxthmi	r5, r5
 80024e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80024e6:	4852      	ldr	r0, [pc, #328]	@ (8002630 <_printf_i+0x234>)
 80024e8:	6033      	str	r3, [r6, #0]
 80024ea:	bf14      	ite	ne
 80024ec:	230a      	movne	r3, #10
 80024ee:	2308      	moveq	r3, #8
 80024f0:	2100      	movs	r1, #0
 80024f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80024f6:	6866      	ldr	r6, [r4, #4]
 80024f8:	60a6      	str	r6, [r4, #8]
 80024fa:	2e00      	cmp	r6, #0
 80024fc:	db05      	blt.n	800250a <_printf_i+0x10e>
 80024fe:	6821      	ldr	r1, [r4, #0]
 8002500:	432e      	orrs	r6, r5
 8002502:	f021 0104 	bic.w	r1, r1, #4
 8002506:	6021      	str	r1, [r4, #0]
 8002508:	d04b      	beq.n	80025a2 <_printf_i+0x1a6>
 800250a:	4616      	mov	r6, r2
 800250c:	fbb5 f1f3 	udiv	r1, r5, r3
 8002510:	fb03 5711 	mls	r7, r3, r1, r5
 8002514:	5dc7      	ldrb	r7, [r0, r7]
 8002516:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800251a:	462f      	mov	r7, r5
 800251c:	42bb      	cmp	r3, r7
 800251e:	460d      	mov	r5, r1
 8002520:	d9f4      	bls.n	800250c <_printf_i+0x110>
 8002522:	2b08      	cmp	r3, #8
 8002524:	d10b      	bne.n	800253e <_printf_i+0x142>
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	07df      	lsls	r7, r3, #31
 800252a:	d508      	bpl.n	800253e <_printf_i+0x142>
 800252c:	6923      	ldr	r3, [r4, #16]
 800252e:	6861      	ldr	r1, [r4, #4]
 8002530:	4299      	cmp	r1, r3
 8002532:	bfde      	ittt	le
 8002534:	2330      	movle	r3, #48	@ 0x30
 8002536:	f806 3c01 	strble.w	r3, [r6, #-1]
 800253a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800253e:	1b92      	subs	r2, r2, r6
 8002540:	6122      	str	r2, [r4, #16]
 8002542:	f8cd a000 	str.w	sl, [sp]
 8002546:	464b      	mov	r3, r9
 8002548:	aa03      	add	r2, sp, #12
 800254a:	4621      	mov	r1, r4
 800254c:	4640      	mov	r0, r8
 800254e:	f7ff fee7 	bl	8002320 <_printf_common>
 8002552:	3001      	adds	r0, #1
 8002554:	d14a      	bne.n	80025ec <_printf_i+0x1f0>
 8002556:	f04f 30ff 	mov.w	r0, #4294967295
 800255a:	b004      	add	sp, #16
 800255c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002560:	6823      	ldr	r3, [r4, #0]
 8002562:	f043 0320 	orr.w	r3, r3, #32
 8002566:	6023      	str	r3, [r4, #0]
 8002568:	4832      	ldr	r0, [pc, #200]	@ (8002634 <_printf_i+0x238>)
 800256a:	2778      	movs	r7, #120	@ 0x78
 800256c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002570:	6823      	ldr	r3, [r4, #0]
 8002572:	6831      	ldr	r1, [r6, #0]
 8002574:	061f      	lsls	r7, r3, #24
 8002576:	f851 5b04 	ldr.w	r5, [r1], #4
 800257a:	d402      	bmi.n	8002582 <_printf_i+0x186>
 800257c:	065f      	lsls	r7, r3, #25
 800257e:	bf48      	it	mi
 8002580:	b2ad      	uxthmi	r5, r5
 8002582:	6031      	str	r1, [r6, #0]
 8002584:	07d9      	lsls	r1, r3, #31
 8002586:	bf44      	itt	mi
 8002588:	f043 0320 	orrmi.w	r3, r3, #32
 800258c:	6023      	strmi	r3, [r4, #0]
 800258e:	b11d      	cbz	r5, 8002598 <_printf_i+0x19c>
 8002590:	2310      	movs	r3, #16
 8002592:	e7ad      	b.n	80024f0 <_printf_i+0xf4>
 8002594:	4826      	ldr	r0, [pc, #152]	@ (8002630 <_printf_i+0x234>)
 8002596:	e7e9      	b.n	800256c <_printf_i+0x170>
 8002598:	6823      	ldr	r3, [r4, #0]
 800259a:	f023 0320 	bic.w	r3, r3, #32
 800259e:	6023      	str	r3, [r4, #0]
 80025a0:	e7f6      	b.n	8002590 <_printf_i+0x194>
 80025a2:	4616      	mov	r6, r2
 80025a4:	e7bd      	b.n	8002522 <_printf_i+0x126>
 80025a6:	6833      	ldr	r3, [r6, #0]
 80025a8:	6825      	ldr	r5, [r4, #0]
 80025aa:	6961      	ldr	r1, [r4, #20]
 80025ac:	1d18      	adds	r0, r3, #4
 80025ae:	6030      	str	r0, [r6, #0]
 80025b0:	062e      	lsls	r6, r5, #24
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	d501      	bpl.n	80025ba <_printf_i+0x1be>
 80025b6:	6019      	str	r1, [r3, #0]
 80025b8:	e002      	b.n	80025c0 <_printf_i+0x1c4>
 80025ba:	0668      	lsls	r0, r5, #25
 80025bc:	d5fb      	bpl.n	80025b6 <_printf_i+0x1ba>
 80025be:	8019      	strh	r1, [r3, #0]
 80025c0:	2300      	movs	r3, #0
 80025c2:	6123      	str	r3, [r4, #16]
 80025c4:	4616      	mov	r6, r2
 80025c6:	e7bc      	b.n	8002542 <_printf_i+0x146>
 80025c8:	6833      	ldr	r3, [r6, #0]
 80025ca:	1d1a      	adds	r2, r3, #4
 80025cc:	6032      	str	r2, [r6, #0]
 80025ce:	681e      	ldr	r6, [r3, #0]
 80025d0:	6862      	ldr	r2, [r4, #4]
 80025d2:	2100      	movs	r1, #0
 80025d4:	4630      	mov	r0, r6
 80025d6:	f7fd fdfb 	bl	80001d0 <memchr>
 80025da:	b108      	cbz	r0, 80025e0 <_printf_i+0x1e4>
 80025dc:	1b80      	subs	r0, r0, r6
 80025de:	6060      	str	r0, [r4, #4]
 80025e0:	6863      	ldr	r3, [r4, #4]
 80025e2:	6123      	str	r3, [r4, #16]
 80025e4:	2300      	movs	r3, #0
 80025e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80025ea:	e7aa      	b.n	8002542 <_printf_i+0x146>
 80025ec:	6923      	ldr	r3, [r4, #16]
 80025ee:	4632      	mov	r2, r6
 80025f0:	4649      	mov	r1, r9
 80025f2:	4640      	mov	r0, r8
 80025f4:	47d0      	blx	sl
 80025f6:	3001      	adds	r0, #1
 80025f8:	d0ad      	beq.n	8002556 <_printf_i+0x15a>
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	079b      	lsls	r3, r3, #30
 80025fe:	d413      	bmi.n	8002628 <_printf_i+0x22c>
 8002600:	68e0      	ldr	r0, [r4, #12]
 8002602:	9b03      	ldr	r3, [sp, #12]
 8002604:	4298      	cmp	r0, r3
 8002606:	bfb8      	it	lt
 8002608:	4618      	movlt	r0, r3
 800260a:	e7a6      	b.n	800255a <_printf_i+0x15e>
 800260c:	2301      	movs	r3, #1
 800260e:	4632      	mov	r2, r6
 8002610:	4649      	mov	r1, r9
 8002612:	4640      	mov	r0, r8
 8002614:	47d0      	blx	sl
 8002616:	3001      	adds	r0, #1
 8002618:	d09d      	beq.n	8002556 <_printf_i+0x15a>
 800261a:	3501      	adds	r5, #1
 800261c:	68e3      	ldr	r3, [r4, #12]
 800261e:	9903      	ldr	r1, [sp, #12]
 8002620:	1a5b      	subs	r3, r3, r1
 8002622:	42ab      	cmp	r3, r5
 8002624:	dcf2      	bgt.n	800260c <_printf_i+0x210>
 8002626:	e7eb      	b.n	8002600 <_printf_i+0x204>
 8002628:	2500      	movs	r5, #0
 800262a:	f104 0619 	add.w	r6, r4, #25
 800262e:	e7f5      	b.n	800261c <_printf_i+0x220>
 8002630:	08002a5d 	.word	0x08002a5d
 8002634:	08002a6e 	.word	0x08002a6e

08002638 <__sflush_r>:
 8002638:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800263c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002640:	0716      	lsls	r6, r2, #28
 8002642:	4605      	mov	r5, r0
 8002644:	460c      	mov	r4, r1
 8002646:	d454      	bmi.n	80026f2 <__sflush_r+0xba>
 8002648:	684b      	ldr	r3, [r1, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	dc02      	bgt.n	8002654 <__sflush_r+0x1c>
 800264e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	dd48      	ble.n	80026e6 <__sflush_r+0xae>
 8002654:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002656:	2e00      	cmp	r6, #0
 8002658:	d045      	beq.n	80026e6 <__sflush_r+0xae>
 800265a:	2300      	movs	r3, #0
 800265c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002660:	682f      	ldr	r7, [r5, #0]
 8002662:	6a21      	ldr	r1, [r4, #32]
 8002664:	602b      	str	r3, [r5, #0]
 8002666:	d030      	beq.n	80026ca <__sflush_r+0x92>
 8002668:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800266a:	89a3      	ldrh	r3, [r4, #12]
 800266c:	0759      	lsls	r1, r3, #29
 800266e:	d505      	bpl.n	800267c <__sflush_r+0x44>
 8002670:	6863      	ldr	r3, [r4, #4]
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002676:	b10b      	cbz	r3, 800267c <__sflush_r+0x44>
 8002678:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800267a:	1ad2      	subs	r2, r2, r3
 800267c:	2300      	movs	r3, #0
 800267e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002680:	6a21      	ldr	r1, [r4, #32]
 8002682:	4628      	mov	r0, r5
 8002684:	47b0      	blx	r6
 8002686:	1c43      	adds	r3, r0, #1
 8002688:	89a3      	ldrh	r3, [r4, #12]
 800268a:	d106      	bne.n	800269a <__sflush_r+0x62>
 800268c:	6829      	ldr	r1, [r5, #0]
 800268e:	291d      	cmp	r1, #29
 8002690:	d82b      	bhi.n	80026ea <__sflush_r+0xb2>
 8002692:	4a2a      	ldr	r2, [pc, #168]	@ (800273c <__sflush_r+0x104>)
 8002694:	40ca      	lsrs	r2, r1
 8002696:	07d6      	lsls	r6, r2, #31
 8002698:	d527      	bpl.n	80026ea <__sflush_r+0xb2>
 800269a:	2200      	movs	r2, #0
 800269c:	6062      	str	r2, [r4, #4]
 800269e:	04d9      	lsls	r1, r3, #19
 80026a0:	6922      	ldr	r2, [r4, #16]
 80026a2:	6022      	str	r2, [r4, #0]
 80026a4:	d504      	bpl.n	80026b0 <__sflush_r+0x78>
 80026a6:	1c42      	adds	r2, r0, #1
 80026a8:	d101      	bne.n	80026ae <__sflush_r+0x76>
 80026aa:	682b      	ldr	r3, [r5, #0]
 80026ac:	b903      	cbnz	r3, 80026b0 <__sflush_r+0x78>
 80026ae:	6560      	str	r0, [r4, #84]	@ 0x54
 80026b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026b2:	602f      	str	r7, [r5, #0]
 80026b4:	b1b9      	cbz	r1, 80026e6 <__sflush_r+0xae>
 80026b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80026ba:	4299      	cmp	r1, r3
 80026bc:	d002      	beq.n	80026c4 <__sflush_r+0x8c>
 80026be:	4628      	mov	r0, r5
 80026c0:	f7ff fbf4 	bl	8001eac <_free_r>
 80026c4:	2300      	movs	r3, #0
 80026c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80026c8:	e00d      	b.n	80026e6 <__sflush_r+0xae>
 80026ca:	2301      	movs	r3, #1
 80026cc:	4628      	mov	r0, r5
 80026ce:	47b0      	blx	r6
 80026d0:	4602      	mov	r2, r0
 80026d2:	1c50      	adds	r0, r2, #1
 80026d4:	d1c9      	bne.n	800266a <__sflush_r+0x32>
 80026d6:	682b      	ldr	r3, [r5, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d0c6      	beq.n	800266a <__sflush_r+0x32>
 80026dc:	2b1d      	cmp	r3, #29
 80026de:	d001      	beq.n	80026e4 <__sflush_r+0xac>
 80026e0:	2b16      	cmp	r3, #22
 80026e2:	d11e      	bne.n	8002722 <__sflush_r+0xea>
 80026e4:	602f      	str	r7, [r5, #0]
 80026e6:	2000      	movs	r0, #0
 80026e8:	e022      	b.n	8002730 <__sflush_r+0xf8>
 80026ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026ee:	b21b      	sxth	r3, r3
 80026f0:	e01b      	b.n	800272a <__sflush_r+0xf2>
 80026f2:	690f      	ldr	r7, [r1, #16]
 80026f4:	2f00      	cmp	r7, #0
 80026f6:	d0f6      	beq.n	80026e6 <__sflush_r+0xae>
 80026f8:	0793      	lsls	r3, r2, #30
 80026fa:	680e      	ldr	r6, [r1, #0]
 80026fc:	bf08      	it	eq
 80026fe:	694b      	ldreq	r3, [r1, #20]
 8002700:	600f      	str	r7, [r1, #0]
 8002702:	bf18      	it	ne
 8002704:	2300      	movne	r3, #0
 8002706:	eba6 0807 	sub.w	r8, r6, r7
 800270a:	608b      	str	r3, [r1, #8]
 800270c:	f1b8 0f00 	cmp.w	r8, #0
 8002710:	dde9      	ble.n	80026e6 <__sflush_r+0xae>
 8002712:	6a21      	ldr	r1, [r4, #32]
 8002714:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8002716:	4643      	mov	r3, r8
 8002718:	463a      	mov	r2, r7
 800271a:	4628      	mov	r0, r5
 800271c:	47b0      	blx	r6
 800271e:	2800      	cmp	r0, #0
 8002720:	dc08      	bgt.n	8002734 <__sflush_r+0xfc>
 8002722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002726:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800272a:	81a3      	strh	r3, [r4, #12]
 800272c:	f04f 30ff 	mov.w	r0, #4294967295
 8002730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002734:	4407      	add	r7, r0
 8002736:	eba8 0800 	sub.w	r8, r8, r0
 800273a:	e7e7      	b.n	800270c <__sflush_r+0xd4>
 800273c:	20400001 	.word	0x20400001

08002740 <_fflush_r>:
 8002740:	b538      	push	{r3, r4, r5, lr}
 8002742:	690b      	ldr	r3, [r1, #16]
 8002744:	4605      	mov	r5, r0
 8002746:	460c      	mov	r4, r1
 8002748:	b913      	cbnz	r3, 8002750 <_fflush_r+0x10>
 800274a:	2500      	movs	r5, #0
 800274c:	4628      	mov	r0, r5
 800274e:	bd38      	pop	{r3, r4, r5, pc}
 8002750:	b118      	cbz	r0, 800275a <_fflush_r+0x1a>
 8002752:	6a03      	ldr	r3, [r0, #32]
 8002754:	b90b      	cbnz	r3, 800275a <_fflush_r+0x1a>
 8002756:	f7ff faa1 	bl	8001c9c <__sinit>
 800275a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f3      	beq.n	800274a <_fflush_r+0xa>
 8002762:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002764:	07d0      	lsls	r0, r2, #31
 8002766:	d404      	bmi.n	8002772 <_fflush_r+0x32>
 8002768:	0599      	lsls	r1, r3, #22
 800276a:	d402      	bmi.n	8002772 <_fflush_r+0x32>
 800276c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800276e:	f7ff fb9a 	bl	8001ea6 <__retarget_lock_acquire_recursive>
 8002772:	4628      	mov	r0, r5
 8002774:	4621      	mov	r1, r4
 8002776:	f7ff ff5f 	bl	8002638 <__sflush_r>
 800277a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800277c:	07da      	lsls	r2, r3, #31
 800277e:	4605      	mov	r5, r0
 8002780:	d4e4      	bmi.n	800274c <_fflush_r+0xc>
 8002782:	89a3      	ldrh	r3, [r4, #12]
 8002784:	059b      	lsls	r3, r3, #22
 8002786:	d4e1      	bmi.n	800274c <_fflush_r+0xc>
 8002788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800278a:	f7ff fb8d 	bl	8001ea8 <__retarget_lock_release_recursive>
 800278e:	e7dd      	b.n	800274c <_fflush_r+0xc>

08002790 <__swbuf_r>:
 8002790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002792:	460e      	mov	r6, r1
 8002794:	4614      	mov	r4, r2
 8002796:	4605      	mov	r5, r0
 8002798:	b118      	cbz	r0, 80027a2 <__swbuf_r+0x12>
 800279a:	6a03      	ldr	r3, [r0, #32]
 800279c:	b90b      	cbnz	r3, 80027a2 <__swbuf_r+0x12>
 800279e:	f7ff fa7d 	bl	8001c9c <__sinit>
 80027a2:	69a3      	ldr	r3, [r4, #24]
 80027a4:	60a3      	str	r3, [r4, #8]
 80027a6:	89a3      	ldrh	r3, [r4, #12]
 80027a8:	071a      	lsls	r2, r3, #28
 80027aa:	d501      	bpl.n	80027b0 <__swbuf_r+0x20>
 80027ac:	6923      	ldr	r3, [r4, #16]
 80027ae:	b943      	cbnz	r3, 80027c2 <__swbuf_r+0x32>
 80027b0:	4621      	mov	r1, r4
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 f82a 	bl	800280c <__swsetup_r>
 80027b8:	b118      	cbz	r0, 80027c2 <__swbuf_r+0x32>
 80027ba:	f04f 37ff 	mov.w	r7, #4294967295
 80027be:	4638      	mov	r0, r7
 80027c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80027c2:	6823      	ldr	r3, [r4, #0]
 80027c4:	6922      	ldr	r2, [r4, #16]
 80027c6:	1a98      	subs	r0, r3, r2
 80027c8:	6963      	ldr	r3, [r4, #20]
 80027ca:	b2f6      	uxtb	r6, r6
 80027cc:	4283      	cmp	r3, r0
 80027ce:	4637      	mov	r7, r6
 80027d0:	dc05      	bgt.n	80027de <__swbuf_r+0x4e>
 80027d2:	4621      	mov	r1, r4
 80027d4:	4628      	mov	r0, r5
 80027d6:	f7ff ffb3 	bl	8002740 <_fflush_r>
 80027da:	2800      	cmp	r0, #0
 80027dc:	d1ed      	bne.n	80027ba <__swbuf_r+0x2a>
 80027de:	68a3      	ldr	r3, [r4, #8]
 80027e0:	3b01      	subs	r3, #1
 80027e2:	60a3      	str	r3, [r4, #8]
 80027e4:	6823      	ldr	r3, [r4, #0]
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	6022      	str	r2, [r4, #0]
 80027ea:	701e      	strb	r6, [r3, #0]
 80027ec:	6962      	ldr	r2, [r4, #20]
 80027ee:	1c43      	adds	r3, r0, #1
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d004      	beq.n	80027fe <__swbuf_r+0x6e>
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	07db      	lsls	r3, r3, #31
 80027f8:	d5e1      	bpl.n	80027be <__swbuf_r+0x2e>
 80027fa:	2e0a      	cmp	r6, #10
 80027fc:	d1df      	bne.n	80027be <__swbuf_r+0x2e>
 80027fe:	4621      	mov	r1, r4
 8002800:	4628      	mov	r0, r5
 8002802:	f7ff ff9d 	bl	8002740 <_fflush_r>
 8002806:	2800      	cmp	r0, #0
 8002808:	d0d9      	beq.n	80027be <__swbuf_r+0x2e>
 800280a:	e7d6      	b.n	80027ba <__swbuf_r+0x2a>

0800280c <__swsetup_r>:
 800280c:	b538      	push	{r3, r4, r5, lr}
 800280e:	4b29      	ldr	r3, [pc, #164]	@ (80028b4 <__swsetup_r+0xa8>)
 8002810:	4605      	mov	r5, r0
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	460c      	mov	r4, r1
 8002816:	b118      	cbz	r0, 8002820 <__swsetup_r+0x14>
 8002818:	6a03      	ldr	r3, [r0, #32]
 800281a:	b90b      	cbnz	r3, 8002820 <__swsetup_r+0x14>
 800281c:	f7ff fa3e 	bl	8001c9c <__sinit>
 8002820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002824:	0719      	lsls	r1, r3, #28
 8002826:	d422      	bmi.n	800286e <__swsetup_r+0x62>
 8002828:	06da      	lsls	r2, r3, #27
 800282a:	d407      	bmi.n	800283c <__swsetup_r+0x30>
 800282c:	2209      	movs	r2, #9
 800282e:	602a      	str	r2, [r5, #0]
 8002830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002834:	81a3      	strh	r3, [r4, #12]
 8002836:	f04f 30ff 	mov.w	r0, #4294967295
 800283a:	e033      	b.n	80028a4 <__swsetup_r+0x98>
 800283c:	0758      	lsls	r0, r3, #29
 800283e:	d512      	bpl.n	8002866 <__swsetup_r+0x5a>
 8002840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002842:	b141      	cbz	r1, 8002856 <__swsetup_r+0x4a>
 8002844:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002848:	4299      	cmp	r1, r3
 800284a:	d002      	beq.n	8002852 <__swsetup_r+0x46>
 800284c:	4628      	mov	r0, r5
 800284e:	f7ff fb2d 	bl	8001eac <_free_r>
 8002852:	2300      	movs	r3, #0
 8002854:	6363      	str	r3, [r4, #52]	@ 0x34
 8002856:	89a3      	ldrh	r3, [r4, #12]
 8002858:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800285c:	81a3      	strh	r3, [r4, #12]
 800285e:	2300      	movs	r3, #0
 8002860:	6063      	str	r3, [r4, #4]
 8002862:	6923      	ldr	r3, [r4, #16]
 8002864:	6023      	str	r3, [r4, #0]
 8002866:	89a3      	ldrh	r3, [r4, #12]
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	81a3      	strh	r3, [r4, #12]
 800286e:	6923      	ldr	r3, [r4, #16]
 8002870:	b94b      	cbnz	r3, 8002886 <__swsetup_r+0x7a>
 8002872:	89a3      	ldrh	r3, [r4, #12]
 8002874:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002878:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800287c:	d003      	beq.n	8002886 <__swsetup_r+0x7a>
 800287e:	4621      	mov	r1, r4
 8002880:	4628      	mov	r0, r5
 8002882:	f000 f84f 	bl	8002924 <__smakebuf_r>
 8002886:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800288a:	f013 0201 	ands.w	r2, r3, #1
 800288e:	d00a      	beq.n	80028a6 <__swsetup_r+0x9a>
 8002890:	2200      	movs	r2, #0
 8002892:	60a2      	str	r2, [r4, #8]
 8002894:	6962      	ldr	r2, [r4, #20]
 8002896:	4252      	negs	r2, r2
 8002898:	61a2      	str	r2, [r4, #24]
 800289a:	6922      	ldr	r2, [r4, #16]
 800289c:	b942      	cbnz	r2, 80028b0 <__swsetup_r+0xa4>
 800289e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80028a2:	d1c5      	bne.n	8002830 <__swsetup_r+0x24>
 80028a4:	bd38      	pop	{r3, r4, r5, pc}
 80028a6:	0799      	lsls	r1, r3, #30
 80028a8:	bf58      	it	pl
 80028aa:	6962      	ldrpl	r2, [r4, #20]
 80028ac:	60a2      	str	r2, [r4, #8]
 80028ae:	e7f4      	b.n	800289a <__swsetup_r+0x8e>
 80028b0:	2000      	movs	r0, #0
 80028b2:	e7f7      	b.n	80028a4 <__swsetup_r+0x98>
 80028b4:	20000018 	.word	0x20000018

080028b8 <_sbrk_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	4d06      	ldr	r5, [pc, #24]	@ (80028d4 <_sbrk_r+0x1c>)
 80028bc:	2300      	movs	r3, #0
 80028be:	4604      	mov	r4, r0
 80028c0:	4608      	mov	r0, r1
 80028c2:	602b      	str	r3, [r5, #0]
 80028c4:	f7ff f892 	bl	80019ec <_sbrk>
 80028c8:	1c43      	adds	r3, r0, #1
 80028ca:	d102      	bne.n	80028d2 <_sbrk_r+0x1a>
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	b103      	cbz	r3, 80028d2 <_sbrk_r+0x1a>
 80028d0:	6023      	str	r3, [r4, #0]
 80028d2:	bd38      	pop	{r3, r4, r5, pc}
 80028d4:	20000250 	.word	0x20000250

080028d8 <__swhatbuf_r>:
 80028d8:	b570      	push	{r4, r5, r6, lr}
 80028da:	460c      	mov	r4, r1
 80028dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80028e0:	2900      	cmp	r1, #0
 80028e2:	b096      	sub	sp, #88	@ 0x58
 80028e4:	4615      	mov	r5, r2
 80028e6:	461e      	mov	r6, r3
 80028e8:	da0d      	bge.n	8002906 <__swhatbuf_r+0x2e>
 80028ea:	89a3      	ldrh	r3, [r4, #12]
 80028ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80028f0:	f04f 0100 	mov.w	r1, #0
 80028f4:	bf14      	ite	ne
 80028f6:	2340      	movne	r3, #64	@ 0x40
 80028f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80028fc:	2000      	movs	r0, #0
 80028fe:	6031      	str	r1, [r6, #0]
 8002900:	602b      	str	r3, [r5, #0]
 8002902:	b016      	add	sp, #88	@ 0x58
 8002904:	bd70      	pop	{r4, r5, r6, pc}
 8002906:	466a      	mov	r2, sp
 8002908:	f000 f848 	bl	800299c <_fstat_r>
 800290c:	2800      	cmp	r0, #0
 800290e:	dbec      	blt.n	80028ea <__swhatbuf_r+0x12>
 8002910:	9901      	ldr	r1, [sp, #4]
 8002912:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002916:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800291a:	4259      	negs	r1, r3
 800291c:	4159      	adcs	r1, r3
 800291e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002922:	e7eb      	b.n	80028fc <__swhatbuf_r+0x24>

08002924 <__smakebuf_r>:
 8002924:	898b      	ldrh	r3, [r1, #12]
 8002926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002928:	079d      	lsls	r5, r3, #30
 800292a:	4606      	mov	r6, r0
 800292c:	460c      	mov	r4, r1
 800292e:	d507      	bpl.n	8002940 <__smakebuf_r+0x1c>
 8002930:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002934:	6023      	str	r3, [r4, #0]
 8002936:	6123      	str	r3, [r4, #16]
 8002938:	2301      	movs	r3, #1
 800293a:	6163      	str	r3, [r4, #20]
 800293c:	b003      	add	sp, #12
 800293e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002940:	ab01      	add	r3, sp, #4
 8002942:	466a      	mov	r2, sp
 8002944:	f7ff ffc8 	bl	80028d8 <__swhatbuf_r>
 8002948:	9f00      	ldr	r7, [sp, #0]
 800294a:	4605      	mov	r5, r0
 800294c:	4639      	mov	r1, r7
 800294e:	4630      	mov	r0, r6
 8002950:	f7ff fb18 	bl	8001f84 <_malloc_r>
 8002954:	b948      	cbnz	r0, 800296a <__smakebuf_r+0x46>
 8002956:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800295a:	059a      	lsls	r2, r3, #22
 800295c:	d4ee      	bmi.n	800293c <__smakebuf_r+0x18>
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	f043 0302 	orr.w	r3, r3, #2
 8002966:	81a3      	strh	r3, [r4, #12]
 8002968:	e7e2      	b.n	8002930 <__smakebuf_r+0xc>
 800296a:	89a3      	ldrh	r3, [r4, #12]
 800296c:	6020      	str	r0, [r4, #0]
 800296e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002972:	81a3      	strh	r3, [r4, #12]
 8002974:	9b01      	ldr	r3, [sp, #4]
 8002976:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800297a:	b15b      	cbz	r3, 8002994 <__smakebuf_r+0x70>
 800297c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002980:	4630      	mov	r0, r6
 8002982:	f000 f81d 	bl	80029c0 <_isatty_r>
 8002986:	b128      	cbz	r0, 8002994 <__smakebuf_r+0x70>
 8002988:	89a3      	ldrh	r3, [r4, #12]
 800298a:	f023 0303 	bic.w	r3, r3, #3
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	81a3      	strh	r3, [r4, #12]
 8002994:	89a3      	ldrh	r3, [r4, #12]
 8002996:	431d      	orrs	r5, r3
 8002998:	81a5      	strh	r5, [r4, #12]
 800299a:	e7cf      	b.n	800293c <__smakebuf_r+0x18>

0800299c <_fstat_r>:
 800299c:	b538      	push	{r3, r4, r5, lr}
 800299e:	4d07      	ldr	r5, [pc, #28]	@ (80029bc <_fstat_r+0x20>)
 80029a0:	2300      	movs	r3, #0
 80029a2:	4604      	mov	r4, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	602b      	str	r3, [r5, #0]
 80029aa:	f7fe fff6 	bl	800199a <_fstat>
 80029ae:	1c43      	adds	r3, r0, #1
 80029b0:	d102      	bne.n	80029b8 <_fstat_r+0x1c>
 80029b2:	682b      	ldr	r3, [r5, #0]
 80029b4:	b103      	cbz	r3, 80029b8 <_fstat_r+0x1c>
 80029b6:	6023      	str	r3, [r4, #0]
 80029b8:	bd38      	pop	{r3, r4, r5, pc}
 80029ba:	bf00      	nop
 80029bc:	20000250 	.word	0x20000250

080029c0 <_isatty_r>:
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4d06      	ldr	r5, [pc, #24]	@ (80029dc <_isatty_r+0x1c>)
 80029c4:	2300      	movs	r3, #0
 80029c6:	4604      	mov	r4, r0
 80029c8:	4608      	mov	r0, r1
 80029ca:	602b      	str	r3, [r5, #0]
 80029cc:	f7fe fff5 	bl	80019ba <_isatty>
 80029d0:	1c43      	adds	r3, r0, #1
 80029d2:	d102      	bne.n	80029da <_isatty_r+0x1a>
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	b103      	cbz	r3, 80029da <_isatty_r+0x1a>
 80029d8:	6023      	str	r3, [r4, #0]
 80029da:	bd38      	pop	{r3, r4, r5, pc}
 80029dc:	20000250 	.word	0x20000250

080029e0 <_init>:
 80029e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029e2:	bf00      	nop
 80029e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029e6:	bc08      	pop	{r3}
 80029e8:	469e      	mov	lr, r3
 80029ea:	4770      	bx	lr

080029ec <_fini>:
 80029ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ee:	bf00      	nop
 80029f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80029f2:	bc08      	pop	{r3}
 80029f4:	469e      	mov	lr, r3
 80029f6:	4770      	bx	lr
