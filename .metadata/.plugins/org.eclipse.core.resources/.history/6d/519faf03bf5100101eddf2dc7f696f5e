
3_UartTx_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016f0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08001880  08001880  00002880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080018d0  080018d0  00003068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080018d0  080018d0  000028d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080018d8  080018d8  00003068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080018d8  080018d8  000028d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080018dc  080018dc  000028dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080018e0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00003068  2**0
                  CONTENTS
 10 .bss          000001f8  20000068  20000068  00003068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000260  20000260  00003068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000067df  00000000  00000000  00003098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d62  00000000  00000000  00009877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005b0  00000000  00000000  0000a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000453  00000000  00000000  0000ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025d50  00000000  00000000  0000afe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00006126  00000000  00000000  00030d33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea01f  00000000  00000000  00036e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00120e78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001e68  00000000  00000000  00120ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00122d24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001868 	.word	0x08001868

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08001868 	.word	0x08001868

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800027a:	2003      	movs	r0, #3
 800027c:	f000 f94a 	bl	8000514 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000280:	200f      	movs	r0, #15
 8000282:	f000 f815 	bl	80002b0 <HAL_InitTick>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d002      	beq.n	8000292 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800028c:	2301      	movs	r3, #1
 800028e:	71fb      	strb	r3, [r7, #7]
 8000290:	e001      	b.n	8000296 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000292:	f000 f805 	bl	80002a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000296:	79fb      	ldrb	r3, [r7, #7]
}
 8000298:	4618      	mov	r0, r3
 800029a:	3708      	adds	r7, #8
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
	...

080002b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b084      	sub	sp, #16
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80002b8:	2300      	movs	r3, #0
 80002ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80002bc:	4b17      	ldr	r3, [pc, #92]	@ (800031c <HAL_InitTick+0x6c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d023      	beq.n	800030c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80002c4:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <HAL_InitTick+0x70>)
 80002c6:	681a      	ldr	r2, [r3, #0]
 80002c8:	4b14      	ldr	r3, [pc, #80]	@ (800031c <HAL_InitTick+0x6c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	4619      	mov	r1, r3
 80002ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80002d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80002d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 f941 	bl	8000562 <HAL_SYSTICK_Config>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d10f      	bne.n	8000306 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002e6:	687b      	ldr	r3, [r7, #4]
 80002e8:	2b0f      	cmp	r3, #15
 80002ea:	d809      	bhi.n	8000300 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80002ec:	2200      	movs	r2, #0
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	f04f 30ff 	mov.w	r0, #4294967295
 80002f4:	f000 f919 	bl	800052a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80002f8:	4a0a      	ldr	r2, [pc, #40]	@ (8000324 <HAL_InitTick+0x74>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	6013      	str	r3, [r2, #0]
 80002fe:	e007      	b.n	8000310 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000300:	2301      	movs	r3, #1
 8000302:	73fb      	strb	r3, [r7, #15]
 8000304:	e004      	b.n	8000310 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000306:	2301      	movs	r3, #1
 8000308:	73fb      	strb	r3, [r7, #15]
 800030a:	e001      	b.n	8000310 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800030c:	2301      	movs	r3, #1
 800030e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000310:	7bfb      	ldrb	r3, [r7, #15]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3710      	adds	r7, #16
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000004 	.word	0x20000004
 8000320:	20000008 	.word	0x20000008
 8000324:	20000000 	.word	0x20000000

08000328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000328:	b480      	push	{r7}
 800032a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800032c:	4b06      	ldr	r3, [pc, #24]	@ (8000348 <HAL_IncTick+0x20>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <HAL_IncTick+0x24>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4413      	add	r3, r2
 8000338:	4a04      	ldr	r2, [pc, #16]	@ (800034c <HAL_IncTick+0x24>)
 800033a:	6013      	str	r3, [r2, #0]
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	20000004 	.word	0x20000004
 800034c:	20000084 	.word	0x20000084

08000350 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  return uwTick;
 8000354:	4b03      	ldr	r3, [pc, #12]	@ (8000364 <HAL_GetTick+0x14>)
 8000356:	681b      	ldr	r3, [r3, #0]
}
 8000358:	4618      	mov	r0, r3
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr
 8000362:	bf00      	nop
 8000364:	20000084 	.word	0x20000084

08000368 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b084      	sub	sp, #16
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000370:	f7ff ffee 	bl	8000350 <HAL_GetTick>
 8000374:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000380:	d005      	beq.n	800038e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000382:	4b0a      	ldr	r3, [pc, #40]	@ (80003ac <HAL_Delay+0x44>)
 8000384:	781b      	ldrb	r3, [r3, #0]
 8000386:	461a      	mov	r2, r3
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	4413      	add	r3, r2
 800038c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800038e:	bf00      	nop
 8000390:	f7ff ffde 	bl	8000350 <HAL_GetTick>
 8000394:	4602      	mov	r2, r0
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	1ad3      	subs	r3, r2, r3
 800039a:	68fa      	ldr	r2, [r7, #12]
 800039c:	429a      	cmp	r2, r3
 800039e:	d8f7      	bhi.n	8000390 <HAL_Delay+0x28>
  {
  }
}
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	3710      	adds	r7, #16
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000004 	.word	0x20000004

080003b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f003 0307 	and.w	r3, r3, #7
 80003be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003c0:	4b0c      	ldr	r3, [pc, #48]	@ (80003f4 <__NVIC_SetPriorityGrouping+0x44>)
 80003c2:	68db      	ldr	r3, [r3, #12]
 80003c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003c6:	68ba      	ldr	r2, [r7, #8]
 80003c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80003cc:	4013      	ands	r3, r2
 80003ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80003d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80003dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80003e2:	4a04      	ldr	r2, [pc, #16]	@ (80003f4 <__NVIC_SetPriorityGrouping+0x44>)
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	60d3      	str	r3, [r2, #12]
}
 80003e8:	bf00      	nop
 80003ea:	3714      	adds	r7, #20
 80003ec:	46bd      	mov	sp, r7
 80003ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f2:	4770      	bx	lr
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80003fc:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <__NVIC_GetPriorityGrouping+0x18>)
 80003fe:	68db      	ldr	r3, [r3, #12]
 8000400:	0a1b      	lsrs	r3, r3, #8
 8000402:	f003 0307 	and.w	r3, r3, #7
}
 8000406:	4618      	mov	r0, r3
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	e000ed00 	.word	0xe000ed00

08000414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	6039      	str	r1, [r7, #0]
 800041e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000420:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000424:	2b00      	cmp	r3, #0
 8000426:	db0a      	blt.n	800043e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000428:	683b      	ldr	r3, [r7, #0]
 800042a:	b2da      	uxtb	r2, r3
 800042c:	490c      	ldr	r1, [pc, #48]	@ (8000460 <__NVIC_SetPriority+0x4c>)
 800042e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000432:	0112      	lsls	r2, r2, #4
 8000434:	b2d2      	uxtb	r2, r2
 8000436:	440b      	add	r3, r1
 8000438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800043c:	e00a      	b.n	8000454 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	b2da      	uxtb	r2, r3
 8000442:	4908      	ldr	r1, [pc, #32]	@ (8000464 <__NVIC_SetPriority+0x50>)
 8000444:	79fb      	ldrb	r3, [r7, #7]
 8000446:	f003 030f 	and.w	r3, r3, #15
 800044a:	3b04      	subs	r3, #4
 800044c:	0112      	lsls	r2, r2, #4
 800044e:	b2d2      	uxtb	r2, r2
 8000450:	440b      	add	r3, r1
 8000452:	761a      	strb	r2, [r3, #24]
}
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr
 8000460:	e000e100 	.word	0xe000e100
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000468:	b480      	push	{r7}
 800046a:	b089      	sub	sp, #36	@ 0x24
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f003 0307 	and.w	r3, r3, #7
 800047a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800047c:	69fb      	ldr	r3, [r7, #28]
 800047e:	f1c3 0307 	rsb	r3, r3, #7
 8000482:	2b04      	cmp	r3, #4
 8000484:	bf28      	it	cs
 8000486:	2304      	movcs	r3, #4
 8000488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800048a:	69fb      	ldr	r3, [r7, #28]
 800048c:	3304      	adds	r3, #4
 800048e:	2b06      	cmp	r3, #6
 8000490:	d902      	bls.n	8000498 <NVIC_EncodePriority+0x30>
 8000492:	69fb      	ldr	r3, [r7, #28]
 8000494:	3b03      	subs	r3, #3
 8000496:	e000      	b.n	800049a <NVIC_EncodePriority+0x32>
 8000498:	2300      	movs	r3, #0
 800049a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800049c:	f04f 32ff 	mov.w	r2, #4294967295
 80004a0:	69bb      	ldr	r3, [r7, #24]
 80004a2:	fa02 f303 	lsl.w	r3, r2, r3
 80004a6:	43da      	mvns	r2, r3
 80004a8:	68bb      	ldr	r3, [r7, #8]
 80004aa:	401a      	ands	r2, r3
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004b0:	f04f 31ff 	mov.w	r1, #4294967295
 80004b4:	697b      	ldr	r3, [r7, #20]
 80004b6:	fa01 f303 	lsl.w	r3, r1, r3
 80004ba:	43d9      	mvns	r1, r3
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004c0:	4313      	orrs	r3, r2
         );
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	3724      	adds	r7, #36	@ 0x24
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr
	...

080004d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	3b01      	subs	r3, #1
 80004dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80004e0:	d301      	bcc.n	80004e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004e2:	2301      	movs	r3, #1
 80004e4:	e00f      	b.n	8000506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004e6:	4a0a      	ldr	r2, [pc, #40]	@ (8000510 <SysTick_Config+0x40>)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3b01      	subs	r3, #1
 80004ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004ee:	210f      	movs	r1, #15
 80004f0:	f04f 30ff 	mov.w	r0, #4294967295
 80004f4:	f7ff ff8e 	bl	8000414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004f8:	4b05      	ldr	r3, [pc, #20]	@ (8000510 <SysTick_Config+0x40>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004fe:	4b04      	ldr	r3, [pc, #16]	@ (8000510 <SysTick_Config+0x40>)
 8000500:	2207      	movs	r2, #7
 8000502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000504:	2300      	movs	r3, #0
}
 8000506:	4618      	mov	r0, r3
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	e000e010 	.word	0xe000e010

08000514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ff47 	bl	80003b0 <__NVIC_SetPriorityGrouping>
}
 8000522:	bf00      	nop
 8000524:	3708      	adds	r7, #8
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}

0800052a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b086      	sub	sp, #24
 800052e:	af00      	add	r7, sp, #0
 8000530:	4603      	mov	r3, r0
 8000532:	60b9      	str	r1, [r7, #8]
 8000534:	607a      	str	r2, [r7, #4]
 8000536:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800053c:	f7ff ff5c 	bl	80003f8 <__NVIC_GetPriorityGrouping>
 8000540:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000542:	687a      	ldr	r2, [r7, #4]
 8000544:	68b9      	ldr	r1, [r7, #8]
 8000546:	6978      	ldr	r0, [r7, #20]
 8000548:	f7ff ff8e 	bl	8000468 <NVIC_EncodePriority>
 800054c:	4602      	mov	r2, r0
 800054e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000552:	4611      	mov	r1, r2
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ff5d 	bl	8000414 <__NVIC_SetPriority>
}
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}

08000562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f7ff ffb0 	bl	80004d0 <SysTick_Config>
 8000570:	4603      	mov	r3, r0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3708      	adds	r7, #8
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800057a:	b580      	push	{r7, lr}
 800057c:	b08a      	sub	sp, #40	@ 0x28
 800057e:	af02      	add	r7, sp, #8
 8000580:	60f8      	str	r0, [r7, #12]
 8000582:	60b9      	str	r1, [r7, #8]
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	4613      	mov	r3, r2
 8000588:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800058e:	2b20      	cmp	r3, #32
 8000590:	d177      	bne.n	8000682 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8000592:	68bb      	ldr	r3, [r7, #8]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d002      	beq.n	800059e <HAL_UART_Transmit+0x24>
 8000598:	88fb      	ldrh	r3, [r7, #6]
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800059e:	2301      	movs	r3, #1
 80005a0:	e070      	b.n	8000684 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	2200      	movs	r2, #0
 80005a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2221      	movs	r2, #33	@ 0x21
 80005ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80005b0:	f7ff fece 	bl	8000350 <HAL_GetTick>
 80005b4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	88fa      	ldrh	r2, [r7, #6]
 80005ba:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	88fa      	ldrh	r2, [r7, #6]
 80005c2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80005ce:	d108      	bne.n	80005e2 <HAL_UART_Transmit+0x68>
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	691b      	ldr	r3, [r3, #16]
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d104      	bne.n	80005e2 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80005d8:	2300      	movs	r3, #0
 80005da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	61bb      	str	r3, [r7, #24]
 80005e0:	e003      	b.n	80005ea <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80005ea:	e02f      	b.n	800064c <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	9300      	str	r3, [sp, #0]
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	2200      	movs	r2, #0
 80005f4:	2180      	movs	r1, #128	@ 0x80
 80005f6:	68f8      	ldr	r0, [r7, #12]
 80005f8:	f000 f848 	bl	800068c <UART_WaitOnFlagUntilTimeout>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d004      	beq.n	800060c <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2220      	movs	r2, #32
 8000606:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8000608:	2303      	movs	r3, #3
 800060a:	e03b      	b.n	8000684 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10b      	bne.n	800062a <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000612:	69bb      	ldr	r3, [r7, #24]
 8000614:	881a      	ldrh	r2, [r3, #0]
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800061e:	b292      	uxth	r2, r2
 8000620:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8000622:	69bb      	ldr	r3, [r7, #24]
 8000624:	3302      	adds	r3, #2
 8000626:	61bb      	str	r3, [r7, #24]
 8000628:	e007      	b.n	800063a <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800062a:	69fb      	ldr	r3, [r7, #28]
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3301      	adds	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000640:	b29b      	uxth	r3, r3
 8000642:	3b01      	subs	r3, #1
 8000644:	b29a      	uxth	r2, r3
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8000652:	b29b      	uxth	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1c9      	bne.n	80005ec <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2200      	movs	r2, #0
 8000660:	2140      	movs	r1, #64	@ 0x40
 8000662:	68f8      	ldr	r0, [r7, #12]
 8000664:	f000 f812 	bl	800068c <UART_WaitOnFlagUntilTimeout>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d004      	beq.n	8000678 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2220      	movs	r2, #32
 8000672:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8000674:	2303      	movs	r3, #3
 8000676:	e005      	b.n	8000684 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2220      	movs	r2, #32
 800067c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800067e:	2300      	movs	r3, #0
 8000680:	e000      	b.n	8000684 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8000682:	2302      	movs	r3, #2
  }
}
 8000684:	4618      	mov	r0, r3
 8000686:	3720      	adds	r7, #32
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4613      	mov	r3, r2
 800069a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800069c:	e049      	b.n	8000732 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800069e:	69bb      	ldr	r3, [r7, #24]
 80006a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006a4:	d045      	beq.n	8000732 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80006a6:	f7ff fe53 	bl	8000350 <HAL_GetTick>
 80006aa:	4602      	mov	r2, r0
 80006ac:	683b      	ldr	r3, [r7, #0]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	69ba      	ldr	r2, [r7, #24]
 80006b2:	429a      	cmp	r2, r3
 80006b4:	d302      	bcc.n	80006bc <UART_WaitOnFlagUntilTimeout+0x30>
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d101      	bne.n	80006c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80006bc:	2303      	movs	r3, #3
 80006be:	e048      	b.n	8000752 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d031      	beq.n	8000732 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	69db      	ldr	r3, [r3, #28]
 80006d4:	f003 0308 	and.w	r3, r3, #8
 80006d8:	2b08      	cmp	r3, #8
 80006da:	d110      	bne.n	80006fe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	2208      	movs	r2, #8
 80006e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80006e4:	68f8      	ldr	r0, [r7, #12]
 80006e6:	f000 f838 	bl	800075a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	2208      	movs	r2, #8
 80006ee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	2200      	movs	r2, #0
 80006f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e029      	b.n	8000752 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	69db      	ldr	r3, [r3, #28]
 8000704:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800070c:	d111      	bne.n	8000732 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000716:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f000 f81e 	bl	800075a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	2220      	movs	r2, #32
 8000722:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800072e:	2303      	movs	r3, #3
 8000730:	e00f      	b.n	8000752 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	69da      	ldr	r2, [r3, #28]
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	4013      	ands	r3, r2
 800073c:	68ba      	ldr	r2, [r7, #8]
 800073e:	429a      	cmp	r2, r3
 8000740:	bf0c      	ite	eq
 8000742:	2301      	moveq	r3, #1
 8000744:	2300      	movne	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	461a      	mov	r2, r3
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	429a      	cmp	r2, r3
 800074e:	d0a6      	beq.n	800069e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8000750:	2300      	movs	r3, #0
}
 8000752:	4618      	mov	r0, r3
 8000754:	3710      	adds	r7, #16
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800075a:	b480      	push	{r7}
 800075c:	b095      	sub	sp, #84	@ 0x54
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800076a:	e853 3f00 	ldrex	r3, [r3]
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8000770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000772:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8000776:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	461a      	mov	r2, r3
 800077e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000780:	643b      	str	r3, [r7, #64]	@ 0x40
 8000782:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000784:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8000786:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000788:	e841 2300 	strex	r3, r2, [r1]
 800078c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800078e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000790:	2b00      	cmp	r3, #0
 8000792:	d1e6      	bne.n	8000762 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	3308      	adds	r3, #8
 800079a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800079c:	6a3b      	ldr	r3, [r7, #32]
 800079e:	e853 3f00 	ldrex	r3, [r3]
 80007a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80007a4:	69fb      	ldr	r3, [r7, #28]
 80007a6:	f023 0301 	bic.w	r3, r3, #1
 80007aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	3308      	adds	r3, #8
 80007b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80007b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80007b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80007ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80007bc:	e841 2300 	strex	r3, r2, [r1]
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80007c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d1e5      	bne.n	8000794 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d118      	bne.n	8000802 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	e853 3f00 	ldrex	r3, [r3]
 80007dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	f023 0310 	bic.w	r3, r3, #16
 80007e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	461a      	mov	r2, r3
 80007ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80007ee:	61bb      	str	r3, [r7, #24]
 80007f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80007f2:	6979      	ldr	r1, [r7, #20]
 80007f4:	69ba      	ldr	r2, [r7, #24]
 80007f6:	e841 2300 	strex	r3, r2, [r1]
 80007fa:	613b      	str	r3, [r7, #16]
   return(result);
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d1e6      	bne.n	80007d0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2220      	movs	r2, #32
 8000806:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8000816:	bf00      	nop
 8000818:	3754      	adds	r7, #84	@ 0x54
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
	...

08000824 <__io_putchar>:
uint8_t bStatus;

char message[20] = "Hello from STM32\r\n";
//system call
int __io_putchar(int ch)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,10);
 800082c:	1d39      	adds	r1, r7, #4
 800082e:	230a      	movs	r3, #10
 8000830:	2201      	movs	r2, #1
 8000832:	4804      	ldr	r0, [pc, #16]	@ (8000844 <__io_putchar+0x20>)
 8000834:	f7ff fea1 	bl	800057a <HAL_UART_Transmit>
	return ch;
 8000838:	687b      	ldr	r3, [r7, #4]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3708      	adds	r7, #8
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000088 	.word	0x20000088

08000848 <main>:

int main()
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	HAL_Init();
 800084c:	f7ff fd10 	bl	8000270 <HAL_Init>



	while(1)
	{
		printf("Printf is being used ! \n\r");
 8000850:	4803      	ldr	r0, [pc, #12]	@ (8000860 <main+0x18>)
 8000852:	f000 f99d 	bl	8000b90 <iprintf>
		HAL_Delay(10);
 8000856:	200a      	movs	r0, #10
 8000858:	f7ff fd86 	bl	8000368 <HAL_Delay>
		printf("Printf is being used ! \n\r");
 800085c:	bf00      	nop
 800085e:	e7f7      	b.n	8000850 <main+0x8>
 8000860:	08001880 	.word	0x08001880

08000864 <SysTick_Handler>:


}

void SysTick_Handler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
	HAL_IncTick();
 8000868:	f7ff fd5e 	bl	8000328 <HAL_IncTick>
}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}

08000870 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	60f8      	str	r0, [r7, #12]
 8000878:	60b9      	str	r1, [r7, #8]
 800087a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	e00a      	b.n	8000898 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000882:	f3af 8000 	nop.w
 8000886:	4601      	mov	r1, r0
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	1c5a      	adds	r2, r3, #1
 800088c:	60ba      	str	r2, [r7, #8]
 800088e:	b2ca      	uxtb	r2, r1
 8000890:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	3301      	adds	r3, #1
 8000896:	617b      	str	r3, [r7, #20]
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	429a      	cmp	r2, r3
 800089e:	dbf0      	blt.n	8000882 <_read+0x12>
  }

  return len;
 80008a0:	687b      	ldr	r3, [r7, #4]
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
 80008ba:	e009      	b.n	80008d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	60ba      	str	r2, [r7, #8]
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ffad 	bl	8000824 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	3301      	adds	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	697a      	ldr	r2, [r7, #20]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	429a      	cmp	r2, r3
 80008d6:	dbf1      	blt.n	80008bc <_write+0x12>
  }
  return len;
 80008d8:	687b      	ldr	r3, [r7, #4]
}
 80008da:	4618      	mov	r0, r3
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <_close>:

int _close(int file)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008fa:	b480      	push	{r7}
 80008fc:	b083      	sub	sp, #12
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800090a:	605a      	str	r2, [r3, #4]
  return 0;
 800090c:	2300      	movs	r3, #0
}
 800090e:	4618      	mov	r0, r3
 8000910:	370c      	adds	r7, #12
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <_isatty>:

int _isatty(int file)
{
 800091a:	b480      	push	{r7}
 800091c:	b083      	sub	sp, #12
 800091e:	af00      	add	r7, sp, #0
 8000920:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	370c      	adds	r7, #12
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	3714      	adds	r7, #20
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
	...

0800094c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000954:	4a14      	ldr	r2, [pc, #80]	@ (80009a8 <_sbrk+0x5c>)
 8000956:	4b15      	ldr	r3, [pc, #84]	@ (80009ac <_sbrk+0x60>)
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800095c:	697b      	ldr	r3, [r7, #20]
 800095e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000960:	4b13      	ldr	r3, [pc, #76]	@ (80009b0 <_sbrk+0x64>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d102      	bne.n	800096e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000968:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <_sbrk+0x64>)
 800096a:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <_sbrk+0x68>)
 800096c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4b10      	ldr	r3, [pc, #64]	@ (80009b0 <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	693a      	ldr	r2, [r7, #16]
 8000978:	429a      	cmp	r2, r3
 800097a:	d207      	bcs.n	800098c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800097c:	f000 f9ac 	bl	8000cd8 <__errno>
 8000980:	4603      	mov	r3, r0
 8000982:	220c      	movs	r2, #12
 8000984:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000986:	f04f 33ff 	mov.w	r3, #4294967295
 800098a:	e009      	b.n	80009a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <_sbrk+0x64>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000992:	4b07      	ldr	r3, [pc, #28]	@ (80009b0 <_sbrk+0x64>)
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	4413      	add	r3, r2
 800099a:	4a05      	ldr	r2, [pc, #20]	@ (80009b0 <_sbrk+0x64>)
 800099c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3718      	adds	r7, #24
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20018000 	.word	0x20018000
 80009ac:	00000400 	.word	0x00000400
 80009b0:	20000110 	.word	0x20000110
 80009b4:	20000260 	.word	0x20000260

080009b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009b8:	480d      	ldr	r0, [pc, #52]	@ (80009f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009c0:	480c      	ldr	r0, [pc, #48]	@ (80009f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80009c2:	490d      	ldr	r1, [pc, #52]	@ (80009f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009c4:	4a0d      	ldr	r2, [pc, #52]	@ (80009fc <LoopForever+0xe>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a00 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009d8:	4c0a      	ldr	r4, [pc, #40]	@ (8000a04 <LoopForever+0x16>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009e6:	f000 f97d 	bl	8000ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ea:	f7ff ff2d 	bl	8000848 <main>

080009ee <LoopForever>:

LoopForever:
  b LoopForever
 80009ee:	e7fe      	b.n	80009ee <LoopForever>
  ldr   r0, =_estack
 80009f0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80009fc:	080018e0 	.word	0x080018e0
  ldr r2, =_sbss
 8000a00:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a04:	20000260 	.word	0x20000260

08000a08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC1_2_IRQHandler>
	...

08000a0c <std>:
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	b510      	push	{r4, lr}
 8000a10:	4604      	mov	r4, r0
 8000a12:	e9c0 3300 	strd	r3, r3, [r0]
 8000a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a1a:	6083      	str	r3, [r0, #8]
 8000a1c:	8181      	strh	r1, [r0, #12]
 8000a1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000a20:	81c2      	strh	r2, [r0, #14]
 8000a22:	6183      	str	r3, [r0, #24]
 8000a24:	4619      	mov	r1, r3
 8000a26:	2208      	movs	r2, #8
 8000a28:	305c      	adds	r0, #92	@ 0x5c
 8000a2a:	f000 f906 	bl	8000c3a <memset>
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a64 <std+0x58>)
 8000a30:	6263      	str	r3, [r4, #36]	@ 0x24
 8000a32:	4b0d      	ldr	r3, [pc, #52]	@ (8000a68 <std+0x5c>)
 8000a34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <std+0x60>)
 8000a38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <std+0x64>)
 8000a3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <std+0x68>)
 8000a40:	6224      	str	r4, [r4, #32]
 8000a42:	429c      	cmp	r4, r3
 8000a44:	d006      	beq.n	8000a54 <std+0x48>
 8000a46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000a4a:	4294      	cmp	r4, r2
 8000a4c:	d002      	beq.n	8000a54 <std+0x48>
 8000a4e:	33d0      	adds	r3, #208	@ 0xd0
 8000a50:	429c      	cmp	r4, r3
 8000a52:	d105      	bne.n	8000a60 <std+0x54>
 8000a54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000a5c:	f000 b966 	b.w	8000d2c <__retarget_lock_init_recursive>
 8000a60:	bd10      	pop	{r4, pc}
 8000a62:	bf00      	nop
 8000a64:	08000bb5 	.word	0x08000bb5
 8000a68:	08000bd7 	.word	0x08000bd7
 8000a6c:	08000c0f 	.word	0x08000c0f
 8000a70:	08000c33 	.word	0x08000c33
 8000a74:	20000114 	.word	0x20000114

08000a78 <stdio_exit_handler>:
 8000a78:	4a02      	ldr	r2, [pc, #8]	@ (8000a84 <stdio_exit_handler+0xc>)
 8000a7a:	4903      	ldr	r1, [pc, #12]	@ (8000a88 <stdio_exit_handler+0x10>)
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <stdio_exit_handler+0x14>)
 8000a7e:	f000 b869 	b.w	8000b54 <_fwalk_sglue>
 8000a82:	bf00      	nop
 8000a84:	2000000c 	.word	0x2000000c
 8000a88:	080015c9 	.word	0x080015c9
 8000a8c:	2000001c 	.word	0x2000001c

08000a90 <cleanup_stdio>:
 8000a90:	6841      	ldr	r1, [r0, #4]
 8000a92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac4 <cleanup_stdio+0x34>)
 8000a94:	4299      	cmp	r1, r3
 8000a96:	b510      	push	{r4, lr}
 8000a98:	4604      	mov	r4, r0
 8000a9a:	d001      	beq.n	8000aa0 <cleanup_stdio+0x10>
 8000a9c:	f000 fd94 	bl	80015c8 <_fflush_r>
 8000aa0:	68a1      	ldr	r1, [r4, #8]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <cleanup_stdio+0x38>)
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d002      	beq.n	8000aae <cleanup_stdio+0x1e>
 8000aa8:	4620      	mov	r0, r4
 8000aaa:	f000 fd8d 	bl	80015c8 <_fflush_r>
 8000aae:	68e1      	ldr	r1, [r4, #12]
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <cleanup_stdio+0x3c>)
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	d004      	beq.n	8000ac0 <cleanup_stdio+0x30>
 8000ab6:	4620      	mov	r0, r4
 8000ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000abc:	f000 bd84 	b.w	80015c8 <_fflush_r>
 8000ac0:	bd10      	pop	{r4, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000114 	.word	0x20000114
 8000ac8:	2000017c 	.word	0x2000017c
 8000acc:	200001e4 	.word	0x200001e4

08000ad0 <global_stdio_init.part.0>:
 8000ad0:	b510      	push	{r4, lr}
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <global_stdio_init.part.0+0x30>)
 8000ad4:	4c0b      	ldr	r4, [pc, #44]	@ (8000b04 <global_stdio_init.part.0+0x34>)
 8000ad6:	4a0c      	ldr	r2, [pc, #48]	@ (8000b08 <global_stdio_init.part.0+0x38>)
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	4620      	mov	r0, r4
 8000adc:	2200      	movs	r2, #0
 8000ade:	2104      	movs	r1, #4
 8000ae0:	f7ff ff94 	bl	8000a0c <std>
 8000ae4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000ae8:	2201      	movs	r2, #1
 8000aea:	2109      	movs	r1, #9
 8000aec:	f7ff ff8e 	bl	8000a0c <std>
 8000af0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000af4:	2202      	movs	r2, #2
 8000af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000afa:	2112      	movs	r1, #18
 8000afc:	f7ff bf86 	b.w	8000a0c <std>
 8000b00:	2000024c 	.word	0x2000024c
 8000b04:	20000114 	.word	0x20000114
 8000b08:	08000a79 	.word	0x08000a79

08000b0c <__sfp_lock_acquire>:
 8000b0c:	4801      	ldr	r0, [pc, #4]	@ (8000b14 <__sfp_lock_acquire+0x8>)
 8000b0e:	f000 b90e 	b.w	8000d2e <__retarget_lock_acquire_recursive>
 8000b12:	bf00      	nop
 8000b14:	20000255 	.word	0x20000255

08000b18 <__sfp_lock_release>:
 8000b18:	4801      	ldr	r0, [pc, #4]	@ (8000b20 <__sfp_lock_release+0x8>)
 8000b1a:	f000 b909 	b.w	8000d30 <__retarget_lock_release_recursive>
 8000b1e:	bf00      	nop
 8000b20:	20000255 	.word	0x20000255

08000b24 <__sinit>:
 8000b24:	b510      	push	{r4, lr}
 8000b26:	4604      	mov	r4, r0
 8000b28:	f7ff fff0 	bl	8000b0c <__sfp_lock_acquire>
 8000b2c:	6a23      	ldr	r3, [r4, #32]
 8000b2e:	b11b      	cbz	r3, 8000b38 <__sinit+0x14>
 8000b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b34:	f7ff bff0 	b.w	8000b18 <__sfp_lock_release>
 8000b38:	4b04      	ldr	r3, [pc, #16]	@ (8000b4c <__sinit+0x28>)
 8000b3a:	6223      	str	r3, [r4, #32]
 8000b3c:	4b04      	ldr	r3, [pc, #16]	@ (8000b50 <__sinit+0x2c>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d1f5      	bne.n	8000b30 <__sinit+0xc>
 8000b44:	f7ff ffc4 	bl	8000ad0 <global_stdio_init.part.0>
 8000b48:	e7f2      	b.n	8000b30 <__sinit+0xc>
 8000b4a:	bf00      	nop
 8000b4c:	08000a91 	.word	0x08000a91
 8000b50:	2000024c 	.word	0x2000024c

08000b54 <_fwalk_sglue>:
 8000b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b58:	4607      	mov	r7, r0
 8000b5a:	4688      	mov	r8, r1
 8000b5c:	4614      	mov	r4, r2
 8000b5e:	2600      	movs	r6, #0
 8000b60:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000b64:	f1b9 0901 	subs.w	r9, r9, #1
 8000b68:	d505      	bpl.n	8000b76 <_fwalk_sglue+0x22>
 8000b6a:	6824      	ldr	r4, [r4, #0]
 8000b6c:	2c00      	cmp	r4, #0
 8000b6e:	d1f7      	bne.n	8000b60 <_fwalk_sglue+0xc>
 8000b70:	4630      	mov	r0, r6
 8000b72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b76:	89ab      	ldrh	r3, [r5, #12]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d907      	bls.n	8000b8c <_fwalk_sglue+0x38>
 8000b7c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000b80:	3301      	adds	r3, #1
 8000b82:	d003      	beq.n	8000b8c <_fwalk_sglue+0x38>
 8000b84:	4629      	mov	r1, r5
 8000b86:	4638      	mov	r0, r7
 8000b88:	47c0      	blx	r8
 8000b8a:	4306      	orrs	r6, r0
 8000b8c:	3568      	adds	r5, #104	@ 0x68
 8000b8e:	e7e9      	b.n	8000b64 <_fwalk_sglue+0x10>

08000b90 <iprintf>:
 8000b90:	b40f      	push	{r0, r1, r2, r3}
 8000b92:	b507      	push	{r0, r1, r2, lr}
 8000b94:	4906      	ldr	r1, [pc, #24]	@ (8000bb0 <iprintf+0x20>)
 8000b96:	ab04      	add	r3, sp, #16
 8000b98:	6808      	ldr	r0, [r1, #0]
 8000b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8000b9e:	6881      	ldr	r1, [r0, #8]
 8000ba0:	9301      	str	r3, [sp, #4]
 8000ba2:	f000 f9e9 	bl	8000f78 <_vfiprintf_r>
 8000ba6:	b003      	add	sp, #12
 8000ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000bac:	b004      	add	sp, #16
 8000bae:	4770      	bx	lr
 8000bb0:	20000018 	.word	0x20000018

08000bb4 <__sread>:
 8000bb4:	b510      	push	{r4, lr}
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bbc:	f000 f868 	bl	8000c90 <_read_r>
 8000bc0:	2800      	cmp	r0, #0
 8000bc2:	bfab      	itete	ge
 8000bc4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8000bc8:	181b      	addge	r3, r3, r0
 8000bca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000bce:	bfac      	ite	ge
 8000bd0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000bd2:	81a3      	strhlt	r3, [r4, #12]
 8000bd4:	bd10      	pop	{r4, pc}

08000bd6 <__swrite>:
 8000bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bda:	461f      	mov	r7, r3
 8000bdc:	898b      	ldrh	r3, [r1, #12]
 8000bde:	05db      	lsls	r3, r3, #23
 8000be0:	4605      	mov	r5, r0
 8000be2:	460c      	mov	r4, r1
 8000be4:	4616      	mov	r6, r2
 8000be6:	d505      	bpl.n	8000bf4 <__swrite+0x1e>
 8000be8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000bec:	2302      	movs	r3, #2
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f000 f83c 	bl	8000c6c <_lseek_r>
 8000bf4:	89a3      	ldrh	r3, [r4, #12]
 8000bf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000bfa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bfe:	81a3      	strh	r3, [r4, #12]
 8000c00:	4632      	mov	r2, r6
 8000c02:	463b      	mov	r3, r7
 8000c04:	4628      	mov	r0, r5
 8000c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c0a:	f000 b853 	b.w	8000cb4 <_write_r>

08000c0e <__sseek>:
 8000c0e:	b510      	push	{r4, lr}
 8000c10:	460c      	mov	r4, r1
 8000c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c16:	f000 f829 	bl	8000c6c <_lseek_r>
 8000c1a:	1c43      	adds	r3, r0, #1
 8000c1c:	89a3      	ldrh	r3, [r4, #12]
 8000c1e:	bf15      	itete	ne
 8000c20:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000c22:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000c26:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000c2a:	81a3      	strheq	r3, [r4, #12]
 8000c2c:	bf18      	it	ne
 8000c2e:	81a3      	strhne	r3, [r4, #12]
 8000c30:	bd10      	pop	{r4, pc}

08000c32 <__sclose>:
 8000c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c36:	f000 b809 	b.w	8000c4c <_close_r>

08000c3a <memset>:
 8000c3a:	4402      	add	r2, r0
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d100      	bne.n	8000c44 <memset+0xa>
 8000c42:	4770      	bx	lr
 8000c44:	f803 1b01 	strb.w	r1, [r3], #1
 8000c48:	e7f9      	b.n	8000c3e <memset+0x4>
	...

08000c4c <_close_r>:
 8000c4c:	b538      	push	{r3, r4, r5, lr}
 8000c4e:	4d06      	ldr	r5, [pc, #24]	@ (8000c68 <_close_r+0x1c>)
 8000c50:	2300      	movs	r3, #0
 8000c52:	4604      	mov	r4, r0
 8000c54:	4608      	mov	r0, r1
 8000c56:	602b      	str	r3, [r5, #0]
 8000c58:	f7ff fe43 	bl	80008e2 <_close>
 8000c5c:	1c43      	adds	r3, r0, #1
 8000c5e:	d102      	bne.n	8000c66 <_close_r+0x1a>
 8000c60:	682b      	ldr	r3, [r5, #0]
 8000c62:	b103      	cbz	r3, 8000c66 <_close_r+0x1a>
 8000c64:	6023      	str	r3, [r4, #0]
 8000c66:	bd38      	pop	{r3, r4, r5, pc}
 8000c68:	20000250 	.word	0x20000250

08000c6c <_lseek_r>:
 8000c6c:	b538      	push	{r3, r4, r5, lr}
 8000c6e:	4d07      	ldr	r5, [pc, #28]	@ (8000c8c <_lseek_r+0x20>)
 8000c70:	4604      	mov	r4, r0
 8000c72:	4608      	mov	r0, r1
 8000c74:	4611      	mov	r1, r2
 8000c76:	2200      	movs	r2, #0
 8000c78:	602a      	str	r2, [r5, #0]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f7ff fe58 	bl	8000930 <_lseek>
 8000c80:	1c43      	adds	r3, r0, #1
 8000c82:	d102      	bne.n	8000c8a <_lseek_r+0x1e>
 8000c84:	682b      	ldr	r3, [r5, #0]
 8000c86:	b103      	cbz	r3, 8000c8a <_lseek_r+0x1e>
 8000c88:	6023      	str	r3, [r4, #0]
 8000c8a:	bd38      	pop	{r3, r4, r5, pc}
 8000c8c:	20000250 	.word	0x20000250

08000c90 <_read_r>:
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	4d07      	ldr	r5, [pc, #28]	@ (8000cb0 <_read_r+0x20>)
 8000c94:	4604      	mov	r4, r0
 8000c96:	4608      	mov	r0, r1
 8000c98:	4611      	mov	r1, r2
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	602a      	str	r2, [r5, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	f7ff fde6 	bl	8000870 <_read>
 8000ca4:	1c43      	adds	r3, r0, #1
 8000ca6:	d102      	bne.n	8000cae <_read_r+0x1e>
 8000ca8:	682b      	ldr	r3, [r5, #0]
 8000caa:	b103      	cbz	r3, 8000cae <_read_r+0x1e>
 8000cac:	6023      	str	r3, [r4, #0]
 8000cae:	bd38      	pop	{r3, r4, r5, pc}
 8000cb0:	20000250 	.word	0x20000250

08000cb4 <_write_r>:
 8000cb4:	b538      	push	{r3, r4, r5, lr}
 8000cb6:	4d07      	ldr	r5, [pc, #28]	@ (8000cd4 <_write_r+0x20>)
 8000cb8:	4604      	mov	r4, r0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	4611      	mov	r1, r2
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	602a      	str	r2, [r5, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	f7ff fdf1 	bl	80008aa <_write>
 8000cc8:	1c43      	adds	r3, r0, #1
 8000cca:	d102      	bne.n	8000cd2 <_write_r+0x1e>
 8000ccc:	682b      	ldr	r3, [r5, #0]
 8000cce:	b103      	cbz	r3, 8000cd2 <_write_r+0x1e>
 8000cd0:	6023      	str	r3, [r4, #0]
 8000cd2:	bd38      	pop	{r3, r4, r5, pc}
 8000cd4:	20000250 	.word	0x20000250

08000cd8 <__errno>:
 8000cd8:	4b01      	ldr	r3, [pc, #4]	@ (8000ce0 <__errno+0x8>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000018 	.word	0x20000018

08000ce4 <__libc_init_array>:
 8000ce4:	b570      	push	{r4, r5, r6, lr}
 8000ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8000d1c <__libc_init_array+0x38>)
 8000ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8000d20 <__libc_init_array+0x3c>)
 8000cea:	1b64      	subs	r4, r4, r5
 8000cec:	10a4      	asrs	r4, r4, #2
 8000cee:	2600      	movs	r6, #0
 8000cf0:	42a6      	cmp	r6, r4
 8000cf2:	d109      	bne.n	8000d08 <__libc_init_array+0x24>
 8000cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8000d24 <__libc_init_array+0x40>)
 8000cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8000d28 <__libc_init_array+0x44>)
 8000cf8:	f000 fdb6 	bl	8001868 <_init>
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	10a4      	asrs	r4, r4, #2
 8000d00:	2600      	movs	r6, #0
 8000d02:	42a6      	cmp	r6, r4
 8000d04:	d105      	bne.n	8000d12 <__libc_init_array+0x2e>
 8000d06:	bd70      	pop	{r4, r5, r6, pc}
 8000d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d0c:	4798      	blx	r3
 8000d0e:	3601      	adds	r6, #1
 8000d10:	e7ee      	b.n	8000cf0 <__libc_init_array+0xc>
 8000d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d16:	4798      	blx	r3
 8000d18:	3601      	adds	r6, #1
 8000d1a:	e7f2      	b.n	8000d02 <__libc_init_array+0x1e>
 8000d1c:	080018d8 	.word	0x080018d8
 8000d20:	080018d8 	.word	0x080018d8
 8000d24:	080018d8 	.word	0x080018d8
 8000d28:	080018dc 	.word	0x080018dc

08000d2c <__retarget_lock_init_recursive>:
 8000d2c:	4770      	bx	lr

08000d2e <__retarget_lock_acquire_recursive>:
 8000d2e:	4770      	bx	lr

08000d30 <__retarget_lock_release_recursive>:
 8000d30:	4770      	bx	lr
	...

08000d34 <_free_r>:
 8000d34:	b538      	push	{r3, r4, r5, lr}
 8000d36:	4605      	mov	r5, r0
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d041      	beq.n	8000dc0 <_free_r+0x8c>
 8000d3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d40:	1f0c      	subs	r4, r1, #4
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	bfb8      	it	lt
 8000d46:	18e4      	addlt	r4, r4, r3
 8000d48:	f000 f8e0 	bl	8000f0c <__malloc_lock>
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc4 <_free_r+0x90>)
 8000d4e:	6813      	ldr	r3, [r2, #0]
 8000d50:	b933      	cbnz	r3, 8000d60 <_free_r+0x2c>
 8000d52:	6063      	str	r3, [r4, #4]
 8000d54:	6014      	str	r4, [r2, #0]
 8000d56:	4628      	mov	r0, r5
 8000d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d5c:	f000 b8dc 	b.w	8000f18 <__malloc_unlock>
 8000d60:	42a3      	cmp	r3, r4
 8000d62:	d908      	bls.n	8000d76 <_free_r+0x42>
 8000d64:	6820      	ldr	r0, [r4, #0]
 8000d66:	1821      	adds	r1, r4, r0
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	bf01      	itttt	eq
 8000d6c:	6819      	ldreq	r1, [r3, #0]
 8000d6e:	685b      	ldreq	r3, [r3, #4]
 8000d70:	1809      	addeq	r1, r1, r0
 8000d72:	6021      	streq	r1, [r4, #0]
 8000d74:	e7ed      	b.n	8000d52 <_free_r+0x1e>
 8000d76:	461a      	mov	r2, r3
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	b10b      	cbz	r3, 8000d80 <_free_r+0x4c>
 8000d7c:	42a3      	cmp	r3, r4
 8000d7e:	d9fa      	bls.n	8000d76 <_free_r+0x42>
 8000d80:	6811      	ldr	r1, [r2, #0]
 8000d82:	1850      	adds	r0, r2, r1
 8000d84:	42a0      	cmp	r0, r4
 8000d86:	d10b      	bne.n	8000da0 <_free_r+0x6c>
 8000d88:	6820      	ldr	r0, [r4, #0]
 8000d8a:	4401      	add	r1, r0
 8000d8c:	1850      	adds	r0, r2, r1
 8000d8e:	4283      	cmp	r3, r0
 8000d90:	6011      	str	r1, [r2, #0]
 8000d92:	d1e0      	bne.n	8000d56 <_free_r+0x22>
 8000d94:	6818      	ldr	r0, [r3, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	6053      	str	r3, [r2, #4]
 8000d9a:	4408      	add	r0, r1
 8000d9c:	6010      	str	r0, [r2, #0]
 8000d9e:	e7da      	b.n	8000d56 <_free_r+0x22>
 8000da0:	d902      	bls.n	8000da8 <_free_r+0x74>
 8000da2:	230c      	movs	r3, #12
 8000da4:	602b      	str	r3, [r5, #0]
 8000da6:	e7d6      	b.n	8000d56 <_free_r+0x22>
 8000da8:	6820      	ldr	r0, [r4, #0]
 8000daa:	1821      	adds	r1, r4, r0
 8000dac:	428b      	cmp	r3, r1
 8000dae:	bf04      	itt	eq
 8000db0:	6819      	ldreq	r1, [r3, #0]
 8000db2:	685b      	ldreq	r3, [r3, #4]
 8000db4:	6063      	str	r3, [r4, #4]
 8000db6:	bf04      	itt	eq
 8000db8:	1809      	addeq	r1, r1, r0
 8000dba:	6021      	streq	r1, [r4, #0]
 8000dbc:	6054      	str	r4, [r2, #4]
 8000dbe:	e7ca      	b.n	8000d56 <_free_r+0x22>
 8000dc0:	bd38      	pop	{r3, r4, r5, pc}
 8000dc2:	bf00      	nop
 8000dc4:	2000025c 	.word	0x2000025c

08000dc8 <sbrk_aligned>:
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	4e0f      	ldr	r6, [pc, #60]	@ (8000e08 <sbrk_aligned+0x40>)
 8000dcc:	460c      	mov	r4, r1
 8000dce:	6831      	ldr	r1, [r6, #0]
 8000dd0:	4605      	mov	r5, r0
 8000dd2:	b911      	cbnz	r1, 8000dda <sbrk_aligned+0x12>
 8000dd4:	f000 fcb4 	bl	8001740 <_sbrk_r>
 8000dd8:	6030      	str	r0, [r6, #0]
 8000dda:	4621      	mov	r1, r4
 8000ddc:	4628      	mov	r0, r5
 8000dde:	f000 fcaf 	bl	8001740 <_sbrk_r>
 8000de2:	1c43      	adds	r3, r0, #1
 8000de4:	d103      	bne.n	8000dee <sbrk_aligned+0x26>
 8000de6:	f04f 34ff 	mov.w	r4, #4294967295
 8000dea:	4620      	mov	r0, r4
 8000dec:	bd70      	pop	{r4, r5, r6, pc}
 8000dee:	1cc4      	adds	r4, r0, #3
 8000df0:	f024 0403 	bic.w	r4, r4, #3
 8000df4:	42a0      	cmp	r0, r4
 8000df6:	d0f8      	beq.n	8000dea <sbrk_aligned+0x22>
 8000df8:	1a21      	subs	r1, r4, r0
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f000 fca0 	bl	8001740 <_sbrk_r>
 8000e00:	3001      	adds	r0, #1
 8000e02:	d1f2      	bne.n	8000dea <sbrk_aligned+0x22>
 8000e04:	e7ef      	b.n	8000de6 <sbrk_aligned+0x1e>
 8000e06:	bf00      	nop
 8000e08:	20000258 	.word	0x20000258

08000e0c <_malloc_r>:
 8000e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e10:	1ccd      	adds	r5, r1, #3
 8000e12:	f025 0503 	bic.w	r5, r5, #3
 8000e16:	3508      	adds	r5, #8
 8000e18:	2d0c      	cmp	r5, #12
 8000e1a:	bf38      	it	cc
 8000e1c:	250c      	movcc	r5, #12
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	4606      	mov	r6, r0
 8000e22:	db01      	blt.n	8000e28 <_malloc_r+0x1c>
 8000e24:	42a9      	cmp	r1, r5
 8000e26:	d904      	bls.n	8000e32 <_malloc_r+0x26>
 8000e28:	230c      	movs	r3, #12
 8000e2a:	6033      	str	r3, [r6, #0]
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e32:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000f08 <_malloc_r+0xfc>
 8000e36:	f000 f869 	bl	8000f0c <__malloc_lock>
 8000e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8000e3e:	461c      	mov	r4, r3
 8000e40:	bb44      	cbnz	r4, 8000e94 <_malloc_r+0x88>
 8000e42:	4629      	mov	r1, r5
 8000e44:	4630      	mov	r0, r6
 8000e46:	f7ff ffbf 	bl	8000dc8 <sbrk_aligned>
 8000e4a:	1c43      	adds	r3, r0, #1
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	d158      	bne.n	8000f02 <_malloc_r+0xf6>
 8000e50:	f8d8 4000 	ldr.w	r4, [r8]
 8000e54:	4627      	mov	r7, r4
 8000e56:	2f00      	cmp	r7, #0
 8000e58:	d143      	bne.n	8000ee2 <_malloc_r+0xd6>
 8000e5a:	2c00      	cmp	r4, #0
 8000e5c:	d04b      	beq.n	8000ef6 <_malloc_r+0xea>
 8000e5e:	6823      	ldr	r3, [r4, #0]
 8000e60:	4639      	mov	r1, r7
 8000e62:	4630      	mov	r0, r6
 8000e64:	eb04 0903 	add.w	r9, r4, r3
 8000e68:	f000 fc6a 	bl	8001740 <_sbrk_r>
 8000e6c:	4581      	cmp	r9, r0
 8000e6e:	d142      	bne.n	8000ef6 <_malloc_r+0xea>
 8000e70:	6821      	ldr	r1, [r4, #0]
 8000e72:	1a6d      	subs	r5, r5, r1
 8000e74:	4629      	mov	r1, r5
 8000e76:	4630      	mov	r0, r6
 8000e78:	f7ff ffa6 	bl	8000dc8 <sbrk_aligned>
 8000e7c:	3001      	adds	r0, #1
 8000e7e:	d03a      	beq.n	8000ef6 <_malloc_r+0xea>
 8000e80:	6823      	ldr	r3, [r4, #0]
 8000e82:	442b      	add	r3, r5
 8000e84:	6023      	str	r3, [r4, #0]
 8000e86:	f8d8 3000 	ldr.w	r3, [r8]
 8000e8a:	685a      	ldr	r2, [r3, #4]
 8000e8c:	bb62      	cbnz	r2, 8000ee8 <_malloc_r+0xdc>
 8000e8e:	f8c8 7000 	str.w	r7, [r8]
 8000e92:	e00f      	b.n	8000eb4 <_malloc_r+0xa8>
 8000e94:	6822      	ldr	r2, [r4, #0]
 8000e96:	1b52      	subs	r2, r2, r5
 8000e98:	d420      	bmi.n	8000edc <_malloc_r+0xd0>
 8000e9a:	2a0b      	cmp	r2, #11
 8000e9c:	d917      	bls.n	8000ece <_malloc_r+0xc2>
 8000e9e:	1961      	adds	r1, r4, r5
 8000ea0:	42a3      	cmp	r3, r4
 8000ea2:	6025      	str	r5, [r4, #0]
 8000ea4:	bf18      	it	ne
 8000ea6:	6059      	strne	r1, [r3, #4]
 8000ea8:	6863      	ldr	r3, [r4, #4]
 8000eaa:	bf08      	it	eq
 8000eac:	f8c8 1000 	streq.w	r1, [r8]
 8000eb0:	5162      	str	r2, [r4, r5]
 8000eb2:	604b      	str	r3, [r1, #4]
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	f000 f82f 	bl	8000f18 <__malloc_unlock>
 8000eba:	f104 000b 	add.w	r0, r4, #11
 8000ebe:	1d23      	adds	r3, r4, #4
 8000ec0:	f020 0007 	bic.w	r0, r0, #7
 8000ec4:	1ac2      	subs	r2, r0, r3
 8000ec6:	bf1c      	itt	ne
 8000ec8:	1a1b      	subne	r3, r3, r0
 8000eca:	50a3      	strne	r3, [r4, r2]
 8000ecc:	e7af      	b.n	8000e2e <_malloc_r+0x22>
 8000ece:	6862      	ldr	r2, [r4, #4]
 8000ed0:	42a3      	cmp	r3, r4
 8000ed2:	bf0c      	ite	eq
 8000ed4:	f8c8 2000 	streq.w	r2, [r8]
 8000ed8:	605a      	strne	r2, [r3, #4]
 8000eda:	e7eb      	b.n	8000eb4 <_malloc_r+0xa8>
 8000edc:	4623      	mov	r3, r4
 8000ede:	6864      	ldr	r4, [r4, #4]
 8000ee0:	e7ae      	b.n	8000e40 <_malloc_r+0x34>
 8000ee2:	463c      	mov	r4, r7
 8000ee4:	687f      	ldr	r7, [r7, #4]
 8000ee6:	e7b6      	b.n	8000e56 <_malloc_r+0x4a>
 8000ee8:	461a      	mov	r2, r3
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	42a3      	cmp	r3, r4
 8000eee:	d1fb      	bne.n	8000ee8 <_malloc_r+0xdc>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	6053      	str	r3, [r2, #4]
 8000ef4:	e7de      	b.n	8000eb4 <_malloc_r+0xa8>
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	6033      	str	r3, [r6, #0]
 8000efa:	4630      	mov	r0, r6
 8000efc:	f000 f80c 	bl	8000f18 <__malloc_unlock>
 8000f00:	e794      	b.n	8000e2c <_malloc_r+0x20>
 8000f02:	6005      	str	r5, [r0, #0]
 8000f04:	e7d6      	b.n	8000eb4 <_malloc_r+0xa8>
 8000f06:	bf00      	nop
 8000f08:	2000025c 	.word	0x2000025c

08000f0c <__malloc_lock>:
 8000f0c:	4801      	ldr	r0, [pc, #4]	@ (8000f14 <__malloc_lock+0x8>)
 8000f0e:	f7ff bf0e 	b.w	8000d2e <__retarget_lock_acquire_recursive>
 8000f12:	bf00      	nop
 8000f14:	20000254 	.word	0x20000254

08000f18 <__malloc_unlock>:
 8000f18:	4801      	ldr	r0, [pc, #4]	@ (8000f20 <__malloc_unlock+0x8>)
 8000f1a:	f7ff bf09 	b.w	8000d30 <__retarget_lock_release_recursive>
 8000f1e:	bf00      	nop
 8000f20:	20000254 	.word	0x20000254

08000f24 <__sfputc_r>:
 8000f24:	6893      	ldr	r3, [r2, #8]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	b410      	push	{r4}
 8000f2c:	6093      	str	r3, [r2, #8]
 8000f2e:	da08      	bge.n	8000f42 <__sfputc_r+0x1e>
 8000f30:	6994      	ldr	r4, [r2, #24]
 8000f32:	42a3      	cmp	r3, r4
 8000f34:	db01      	blt.n	8000f3a <__sfputc_r+0x16>
 8000f36:	290a      	cmp	r1, #10
 8000f38:	d103      	bne.n	8000f42 <__sfputc_r+0x1e>
 8000f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f3e:	f000 bb6b 	b.w	8001618 <__swbuf_r>
 8000f42:	6813      	ldr	r3, [r2, #0]
 8000f44:	1c58      	adds	r0, r3, #1
 8000f46:	6010      	str	r0, [r2, #0]
 8000f48:	7019      	strb	r1, [r3, #0]
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <__sfputs_r>:
 8000f52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f54:	4606      	mov	r6, r0
 8000f56:	460f      	mov	r7, r1
 8000f58:	4614      	mov	r4, r2
 8000f5a:	18d5      	adds	r5, r2, r3
 8000f5c:	42ac      	cmp	r4, r5
 8000f5e:	d101      	bne.n	8000f64 <__sfputs_r+0x12>
 8000f60:	2000      	movs	r0, #0
 8000f62:	e007      	b.n	8000f74 <__sfputs_r+0x22>
 8000f64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f68:	463a      	mov	r2, r7
 8000f6a:	4630      	mov	r0, r6
 8000f6c:	f7ff ffda 	bl	8000f24 <__sfputc_r>
 8000f70:	1c43      	adds	r3, r0, #1
 8000f72:	d1f3      	bne.n	8000f5c <__sfputs_r+0xa>
 8000f74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f78 <_vfiprintf_r>:
 8000f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f7c:	460d      	mov	r5, r1
 8000f7e:	b09d      	sub	sp, #116	@ 0x74
 8000f80:	4614      	mov	r4, r2
 8000f82:	4698      	mov	r8, r3
 8000f84:	4606      	mov	r6, r0
 8000f86:	b118      	cbz	r0, 8000f90 <_vfiprintf_r+0x18>
 8000f88:	6a03      	ldr	r3, [r0, #32]
 8000f8a:	b90b      	cbnz	r3, 8000f90 <_vfiprintf_r+0x18>
 8000f8c:	f7ff fdca 	bl	8000b24 <__sinit>
 8000f90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000f92:	07d9      	lsls	r1, r3, #31
 8000f94:	d405      	bmi.n	8000fa2 <_vfiprintf_r+0x2a>
 8000f96:	89ab      	ldrh	r3, [r5, #12]
 8000f98:	059a      	lsls	r2, r3, #22
 8000f9a:	d402      	bmi.n	8000fa2 <_vfiprintf_r+0x2a>
 8000f9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000f9e:	f7ff fec6 	bl	8000d2e <__retarget_lock_acquire_recursive>
 8000fa2:	89ab      	ldrh	r3, [r5, #12]
 8000fa4:	071b      	lsls	r3, r3, #28
 8000fa6:	d501      	bpl.n	8000fac <_vfiprintf_r+0x34>
 8000fa8:	692b      	ldr	r3, [r5, #16]
 8000faa:	b99b      	cbnz	r3, 8000fd4 <_vfiprintf_r+0x5c>
 8000fac:	4629      	mov	r1, r5
 8000fae:	4630      	mov	r0, r6
 8000fb0:	f000 fb70 	bl	8001694 <__swsetup_r>
 8000fb4:	b170      	cbz	r0, 8000fd4 <_vfiprintf_r+0x5c>
 8000fb6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000fb8:	07dc      	lsls	r4, r3, #31
 8000fba:	d504      	bpl.n	8000fc6 <_vfiprintf_r+0x4e>
 8000fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc0:	b01d      	add	sp, #116	@ 0x74
 8000fc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000fc6:	89ab      	ldrh	r3, [r5, #12]
 8000fc8:	0598      	lsls	r0, r3, #22
 8000fca:	d4f7      	bmi.n	8000fbc <_vfiprintf_r+0x44>
 8000fcc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fce:	f7ff feaf 	bl	8000d30 <__retarget_lock_release_recursive>
 8000fd2:	e7f3      	b.n	8000fbc <_vfiprintf_r+0x44>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000fd8:	2320      	movs	r3, #32
 8000fda:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000fde:	f8cd 800c 	str.w	r8, [sp, #12]
 8000fe2:	2330      	movs	r3, #48	@ 0x30
 8000fe4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001194 <_vfiprintf_r+0x21c>
 8000fe8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000fec:	f04f 0901 	mov.w	r9, #1
 8000ff0:	4623      	mov	r3, r4
 8000ff2:	469a      	mov	sl, r3
 8000ff4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ff8:	b10a      	cbz	r2, 8000ffe <_vfiprintf_r+0x86>
 8000ffa:	2a25      	cmp	r2, #37	@ 0x25
 8000ffc:	d1f9      	bne.n	8000ff2 <_vfiprintf_r+0x7a>
 8000ffe:	ebba 0b04 	subs.w	fp, sl, r4
 8001002:	d00b      	beq.n	800101c <_vfiprintf_r+0xa4>
 8001004:	465b      	mov	r3, fp
 8001006:	4622      	mov	r2, r4
 8001008:	4629      	mov	r1, r5
 800100a:	4630      	mov	r0, r6
 800100c:	f7ff ffa1 	bl	8000f52 <__sfputs_r>
 8001010:	3001      	adds	r0, #1
 8001012:	f000 80a7 	beq.w	8001164 <_vfiprintf_r+0x1ec>
 8001016:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001018:	445a      	add	r2, fp
 800101a:	9209      	str	r2, [sp, #36]	@ 0x24
 800101c:	f89a 3000 	ldrb.w	r3, [sl]
 8001020:	2b00      	cmp	r3, #0
 8001022:	f000 809f 	beq.w	8001164 <_vfiprintf_r+0x1ec>
 8001026:	2300      	movs	r3, #0
 8001028:	f04f 32ff 	mov.w	r2, #4294967295
 800102c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001030:	f10a 0a01 	add.w	sl, sl, #1
 8001034:	9304      	str	r3, [sp, #16]
 8001036:	9307      	str	r3, [sp, #28]
 8001038:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800103c:	931a      	str	r3, [sp, #104]	@ 0x68
 800103e:	4654      	mov	r4, sl
 8001040:	2205      	movs	r2, #5
 8001042:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001046:	4853      	ldr	r0, [pc, #332]	@ (8001194 <_vfiprintf_r+0x21c>)
 8001048:	f7ff f8c2 	bl	80001d0 <memchr>
 800104c:	9a04      	ldr	r2, [sp, #16]
 800104e:	b9d8      	cbnz	r0, 8001088 <_vfiprintf_r+0x110>
 8001050:	06d1      	lsls	r1, r2, #27
 8001052:	bf44      	itt	mi
 8001054:	2320      	movmi	r3, #32
 8001056:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800105a:	0713      	lsls	r3, r2, #28
 800105c:	bf44      	itt	mi
 800105e:	232b      	movmi	r3, #43	@ 0x2b
 8001060:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001064:	f89a 3000 	ldrb.w	r3, [sl]
 8001068:	2b2a      	cmp	r3, #42	@ 0x2a
 800106a:	d015      	beq.n	8001098 <_vfiprintf_r+0x120>
 800106c:	9a07      	ldr	r2, [sp, #28]
 800106e:	4654      	mov	r4, sl
 8001070:	2000      	movs	r0, #0
 8001072:	f04f 0c0a 	mov.w	ip, #10
 8001076:	4621      	mov	r1, r4
 8001078:	f811 3b01 	ldrb.w	r3, [r1], #1
 800107c:	3b30      	subs	r3, #48	@ 0x30
 800107e:	2b09      	cmp	r3, #9
 8001080:	d94b      	bls.n	800111a <_vfiprintf_r+0x1a2>
 8001082:	b1b0      	cbz	r0, 80010b2 <_vfiprintf_r+0x13a>
 8001084:	9207      	str	r2, [sp, #28]
 8001086:	e014      	b.n	80010b2 <_vfiprintf_r+0x13a>
 8001088:	eba0 0308 	sub.w	r3, r0, r8
 800108c:	fa09 f303 	lsl.w	r3, r9, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	9304      	str	r3, [sp, #16]
 8001094:	46a2      	mov	sl, r4
 8001096:	e7d2      	b.n	800103e <_vfiprintf_r+0xc6>
 8001098:	9b03      	ldr	r3, [sp, #12]
 800109a:	1d19      	adds	r1, r3, #4
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	9103      	str	r1, [sp, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bfbb      	ittet	lt
 80010a4:	425b      	neglt	r3, r3
 80010a6:	f042 0202 	orrlt.w	r2, r2, #2
 80010aa:	9307      	strge	r3, [sp, #28]
 80010ac:	9307      	strlt	r3, [sp, #28]
 80010ae:	bfb8      	it	lt
 80010b0:	9204      	strlt	r2, [sp, #16]
 80010b2:	7823      	ldrb	r3, [r4, #0]
 80010b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80010b6:	d10a      	bne.n	80010ce <_vfiprintf_r+0x156>
 80010b8:	7863      	ldrb	r3, [r4, #1]
 80010ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80010bc:	d132      	bne.n	8001124 <_vfiprintf_r+0x1ac>
 80010be:	9b03      	ldr	r3, [sp, #12]
 80010c0:	1d1a      	adds	r2, r3, #4
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	9203      	str	r2, [sp, #12]
 80010c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80010ca:	3402      	adds	r4, #2
 80010cc:	9305      	str	r3, [sp, #20]
 80010ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80011a4 <_vfiprintf_r+0x22c>
 80010d2:	7821      	ldrb	r1, [r4, #0]
 80010d4:	2203      	movs	r2, #3
 80010d6:	4650      	mov	r0, sl
 80010d8:	f7ff f87a 	bl	80001d0 <memchr>
 80010dc:	b138      	cbz	r0, 80010ee <_vfiprintf_r+0x176>
 80010de:	9b04      	ldr	r3, [sp, #16]
 80010e0:	eba0 000a 	sub.w	r0, r0, sl
 80010e4:	2240      	movs	r2, #64	@ 0x40
 80010e6:	4082      	lsls	r2, r0
 80010e8:	4313      	orrs	r3, r2
 80010ea:	3401      	adds	r4, #1
 80010ec:	9304      	str	r3, [sp, #16]
 80010ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010f2:	4829      	ldr	r0, [pc, #164]	@ (8001198 <_vfiprintf_r+0x220>)
 80010f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80010f8:	2206      	movs	r2, #6
 80010fa:	f7ff f869 	bl	80001d0 <memchr>
 80010fe:	2800      	cmp	r0, #0
 8001100:	d03f      	beq.n	8001182 <_vfiprintf_r+0x20a>
 8001102:	4b26      	ldr	r3, [pc, #152]	@ (800119c <_vfiprintf_r+0x224>)
 8001104:	bb1b      	cbnz	r3, 800114e <_vfiprintf_r+0x1d6>
 8001106:	9b03      	ldr	r3, [sp, #12]
 8001108:	3307      	adds	r3, #7
 800110a:	f023 0307 	bic.w	r3, r3, #7
 800110e:	3308      	adds	r3, #8
 8001110:	9303      	str	r3, [sp, #12]
 8001112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001114:	443b      	add	r3, r7
 8001116:	9309      	str	r3, [sp, #36]	@ 0x24
 8001118:	e76a      	b.n	8000ff0 <_vfiprintf_r+0x78>
 800111a:	fb0c 3202 	mla	r2, ip, r2, r3
 800111e:	460c      	mov	r4, r1
 8001120:	2001      	movs	r0, #1
 8001122:	e7a8      	b.n	8001076 <_vfiprintf_r+0xfe>
 8001124:	2300      	movs	r3, #0
 8001126:	3401      	adds	r4, #1
 8001128:	9305      	str	r3, [sp, #20]
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 0c0a 	mov.w	ip, #10
 8001130:	4620      	mov	r0, r4
 8001132:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001136:	3a30      	subs	r2, #48	@ 0x30
 8001138:	2a09      	cmp	r2, #9
 800113a:	d903      	bls.n	8001144 <_vfiprintf_r+0x1cc>
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0c6      	beq.n	80010ce <_vfiprintf_r+0x156>
 8001140:	9105      	str	r1, [sp, #20]
 8001142:	e7c4      	b.n	80010ce <_vfiprintf_r+0x156>
 8001144:	fb0c 2101 	mla	r1, ip, r1, r2
 8001148:	4604      	mov	r4, r0
 800114a:	2301      	movs	r3, #1
 800114c:	e7f0      	b.n	8001130 <_vfiprintf_r+0x1b8>
 800114e:	ab03      	add	r3, sp, #12
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	462a      	mov	r2, r5
 8001154:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <_vfiprintf_r+0x228>)
 8001156:	a904      	add	r1, sp, #16
 8001158:	4630      	mov	r0, r6
 800115a:	f3af 8000 	nop.w
 800115e:	4607      	mov	r7, r0
 8001160:	1c78      	adds	r0, r7, #1
 8001162:	d1d6      	bne.n	8001112 <_vfiprintf_r+0x19a>
 8001164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001166:	07d9      	lsls	r1, r3, #31
 8001168:	d405      	bmi.n	8001176 <_vfiprintf_r+0x1fe>
 800116a:	89ab      	ldrh	r3, [r5, #12]
 800116c:	059a      	lsls	r2, r3, #22
 800116e:	d402      	bmi.n	8001176 <_vfiprintf_r+0x1fe>
 8001170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001172:	f7ff fddd 	bl	8000d30 <__retarget_lock_release_recursive>
 8001176:	89ab      	ldrh	r3, [r5, #12]
 8001178:	065b      	lsls	r3, r3, #25
 800117a:	f53f af1f 	bmi.w	8000fbc <_vfiprintf_r+0x44>
 800117e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001180:	e71e      	b.n	8000fc0 <_vfiprintf_r+0x48>
 8001182:	ab03      	add	r3, sp, #12
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	462a      	mov	r2, r5
 8001188:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <_vfiprintf_r+0x228>)
 800118a:	a904      	add	r1, sp, #16
 800118c:	4630      	mov	r0, r6
 800118e:	f000 f879 	bl	8001284 <_printf_i>
 8001192:	e7e4      	b.n	800115e <_vfiprintf_r+0x1e6>
 8001194:	0800189a 	.word	0x0800189a
 8001198:	080018a4 	.word	0x080018a4
 800119c:	00000000 	.word	0x00000000
 80011a0:	08000f53 	.word	0x08000f53
 80011a4:	080018a0 	.word	0x080018a0

080011a8 <_printf_common>:
 80011a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011ac:	4616      	mov	r6, r2
 80011ae:	4698      	mov	r8, r3
 80011b0:	688a      	ldr	r2, [r1, #8]
 80011b2:	690b      	ldr	r3, [r1, #16]
 80011b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80011b8:	4293      	cmp	r3, r2
 80011ba:	bfb8      	it	lt
 80011bc:	4613      	movlt	r3, r2
 80011be:	6033      	str	r3, [r6, #0]
 80011c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80011c4:	4607      	mov	r7, r0
 80011c6:	460c      	mov	r4, r1
 80011c8:	b10a      	cbz	r2, 80011ce <_printf_common+0x26>
 80011ca:	3301      	adds	r3, #1
 80011cc:	6033      	str	r3, [r6, #0]
 80011ce:	6823      	ldr	r3, [r4, #0]
 80011d0:	0699      	lsls	r1, r3, #26
 80011d2:	bf42      	ittt	mi
 80011d4:	6833      	ldrmi	r3, [r6, #0]
 80011d6:	3302      	addmi	r3, #2
 80011d8:	6033      	strmi	r3, [r6, #0]
 80011da:	6825      	ldr	r5, [r4, #0]
 80011dc:	f015 0506 	ands.w	r5, r5, #6
 80011e0:	d106      	bne.n	80011f0 <_printf_common+0x48>
 80011e2:	f104 0a19 	add.w	sl, r4, #25
 80011e6:	68e3      	ldr	r3, [r4, #12]
 80011e8:	6832      	ldr	r2, [r6, #0]
 80011ea:	1a9b      	subs	r3, r3, r2
 80011ec:	42ab      	cmp	r3, r5
 80011ee:	dc26      	bgt.n	800123e <_printf_common+0x96>
 80011f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80011f4:	6822      	ldr	r2, [r4, #0]
 80011f6:	3b00      	subs	r3, #0
 80011f8:	bf18      	it	ne
 80011fa:	2301      	movne	r3, #1
 80011fc:	0692      	lsls	r2, r2, #26
 80011fe:	d42b      	bmi.n	8001258 <_printf_common+0xb0>
 8001200:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001204:	4641      	mov	r1, r8
 8001206:	4638      	mov	r0, r7
 8001208:	47c8      	blx	r9
 800120a:	3001      	adds	r0, #1
 800120c:	d01e      	beq.n	800124c <_printf_common+0xa4>
 800120e:	6823      	ldr	r3, [r4, #0]
 8001210:	6922      	ldr	r2, [r4, #16]
 8001212:	f003 0306 	and.w	r3, r3, #6
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf02      	ittt	eq
 800121a:	68e5      	ldreq	r5, [r4, #12]
 800121c:	6833      	ldreq	r3, [r6, #0]
 800121e:	1aed      	subeq	r5, r5, r3
 8001220:	68a3      	ldr	r3, [r4, #8]
 8001222:	bf0c      	ite	eq
 8001224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001228:	2500      	movne	r5, #0
 800122a:	4293      	cmp	r3, r2
 800122c:	bfc4      	itt	gt
 800122e:	1a9b      	subgt	r3, r3, r2
 8001230:	18ed      	addgt	r5, r5, r3
 8001232:	2600      	movs	r6, #0
 8001234:	341a      	adds	r4, #26
 8001236:	42b5      	cmp	r5, r6
 8001238:	d11a      	bne.n	8001270 <_printf_common+0xc8>
 800123a:	2000      	movs	r0, #0
 800123c:	e008      	b.n	8001250 <_printf_common+0xa8>
 800123e:	2301      	movs	r3, #1
 8001240:	4652      	mov	r2, sl
 8001242:	4641      	mov	r1, r8
 8001244:	4638      	mov	r0, r7
 8001246:	47c8      	blx	r9
 8001248:	3001      	adds	r0, #1
 800124a:	d103      	bne.n	8001254 <_printf_common+0xac>
 800124c:	f04f 30ff 	mov.w	r0, #4294967295
 8001250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001254:	3501      	adds	r5, #1
 8001256:	e7c6      	b.n	80011e6 <_printf_common+0x3e>
 8001258:	18e1      	adds	r1, r4, r3
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	2030      	movs	r0, #48	@ 0x30
 800125e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001262:	4422      	add	r2, r4
 8001264:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001268:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800126c:	3302      	adds	r3, #2
 800126e:	e7c7      	b.n	8001200 <_printf_common+0x58>
 8001270:	2301      	movs	r3, #1
 8001272:	4622      	mov	r2, r4
 8001274:	4641      	mov	r1, r8
 8001276:	4638      	mov	r0, r7
 8001278:	47c8      	blx	r9
 800127a:	3001      	adds	r0, #1
 800127c:	d0e6      	beq.n	800124c <_printf_common+0xa4>
 800127e:	3601      	adds	r6, #1
 8001280:	e7d9      	b.n	8001236 <_printf_common+0x8e>
	...

08001284 <_printf_i>:
 8001284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001288:	7e0f      	ldrb	r7, [r1, #24]
 800128a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800128c:	2f78      	cmp	r7, #120	@ 0x78
 800128e:	4691      	mov	r9, r2
 8001290:	4680      	mov	r8, r0
 8001292:	460c      	mov	r4, r1
 8001294:	469a      	mov	sl, r3
 8001296:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800129a:	d807      	bhi.n	80012ac <_printf_i+0x28>
 800129c:	2f62      	cmp	r7, #98	@ 0x62
 800129e:	d80a      	bhi.n	80012b6 <_printf_i+0x32>
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	f000 80d1 	beq.w	8001448 <_printf_i+0x1c4>
 80012a6:	2f58      	cmp	r7, #88	@ 0x58
 80012a8:	f000 80b8 	beq.w	800141c <_printf_i+0x198>
 80012ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80012b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80012b4:	e03a      	b.n	800132c <_printf_i+0xa8>
 80012b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80012ba:	2b15      	cmp	r3, #21
 80012bc:	d8f6      	bhi.n	80012ac <_printf_i+0x28>
 80012be:	a101      	add	r1, pc, #4	@ (adr r1, 80012c4 <_printf_i+0x40>)
 80012c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80012c4:	0800131d 	.word	0x0800131d
 80012c8:	08001331 	.word	0x08001331
 80012cc:	080012ad 	.word	0x080012ad
 80012d0:	080012ad 	.word	0x080012ad
 80012d4:	080012ad 	.word	0x080012ad
 80012d8:	080012ad 	.word	0x080012ad
 80012dc:	08001331 	.word	0x08001331
 80012e0:	080012ad 	.word	0x080012ad
 80012e4:	080012ad 	.word	0x080012ad
 80012e8:	080012ad 	.word	0x080012ad
 80012ec:	080012ad 	.word	0x080012ad
 80012f0:	0800142f 	.word	0x0800142f
 80012f4:	0800135b 	.word	0x0800135b
 80012f8:	080013e9 	.word	0x080013e9
 80012fc:	080012ad 	.word	0x080012ad
 8001300:	080012ad 	.word	0x080012ad
 8001304:	08001451 	.word	0x08001451
 8001308:	080012ad 	.word	0x080012ad
 800130c:	0800135b 	.word	0x0800135b
 8001310:	080012ad 	.word	0x080012ad
 8001314:	080012ad 	.word	0x080012ad
 8001318:	080013f1 	.word	0x080013f1
 800131c:	6833      	ldr	r3, [r6, #0]
 800131e:	1d1a      	adds	r2, r3, #4
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6032      	str	r2, [r6, #0]
 8001324:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800132c:	2301      	movs	r3, #1
 800132e:	e09c      	b.n	800146a <_printf_i+0x1e6>
 8001330:	6833      	ldr	r3, [r6, #0]
 8001332:	6820      	ldr	r0, [r4, #0]
 8001334:	1d19      	adds	r1, r3, #4
 8001336:	6031      	str	r1, [r6, #0]
 8001338:	0606      	lsls	r6, r0, #24
 800133a:	d501      	bpl.n	8001340 <_printf_i+0xbc>
 800133c:	681d      	ldr	r5, [r3, #0]
 800133e:	e003      	b.n	8001348 <_printf_i+0xc4>
 8001340:	0645      	lsls	r5, r0, #25
 8001342:	d5fb      	bpl.n	800133c <_printf_i+0xb8>
 8001344:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001348:	2d00      	cmp	r5, #0
 800134a:	da03      	bge.n	8001354 <_printf_i+0xd0>
 800134c:	232d      	movs	r3, #45	@ 0x2d
 800134e:	426d      	negs	r5, r5
 8001350:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001354:	4858      	ldr	r0, [pc, #352]	@ (80014b8 <_printf_i+0x234>)
 8001356:	230a      	movs	r3, #10
 8001358:	e011      	b.n	800137e <_printf_i+0xfa>
 800135a:	6821      	ldr	r1, [r4, #0]
 800135c:	6833      	ldr	r3, [r6, #0]
 800135e:	0608      	lsls	r0, r1, #24
 8001360:	f853 5b04 	ldr.w	r5, [r3], #4
 8001364:	d402      	bmi.n	800136c <_printf_i+0xe8>
 8001366:	0649      	lsls	r1, r1, #25
 8001368:	bf48      	it	mi
 800136a:	b2ad      	uxthmi	r5, r5
 800136c:	2f6f      	cmp	r7, #111	@ 0x6f
 800136e:	4852      	ldr	r0, [pc, #328]	@ (80014b8 <_printf_i+0x234>)
 8001370:	6033      	str	r3, [r6, #0]
 8001372:	bf14      	ite	ne
 8001374:	230a      	movne	r3, #10
 8001376:	2308      	moveq	r3, #8
 8001378:	2100      	movs	r1, #0
 800137a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800137e:	6866      	ldr	r6, [r4, #4]
 8001380:	60a6      	str	r6, [r4, #8]
 8001382:	2e00      	cmp	r6, #0
 8001384:	db05      	blt.n	8001392 <_printf_i+0x10e>
 8001386:	6821      	ldr	r1, [r4, #0]
 8001388:	432e      	orrs	r6, r5
 800138a:	f021 0104 	bic.w	r1, r1, #4
 800138e:	6021      	str	r1, [r4, #0]
 8001390:	d04b      	beq.n	800142a <_printf_i+0x1a6>
 8001392:	4616      	mov	r6, r2
 8001394:	fbb5 f1f3 	udiv	r1, r5, r3
 8001398:	fb03 5711 	mls	r7, r3, r1, r5
 800139c:	5dc7      	ldrb	r7, [r0, r7]
 800139e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80013a2:	462f      	mov	r7, r5
 80013a4:	42bb      	cmp	r3, r7
 80013a6:	460d      	mov	r5, r1
 80013a8:	d9f4      	bls.n	8001394 <_printf_i+0x110>
 80013aa:	2b08      	cmp	r3, #8
 80013ac:	d10b      	bne.n	80013c6 <_printf_i+0x142>
 80013ae:	6823      	ldr	r3, [r4, #0]
 80013b0:	07df      	lsls	r7, r3, #31
 80013b2:	d508      	bpl.n	80013c6 <_printf_i+0x142>
 80013b4:	6923      	ldr	r3, [r4, #16]
 80013b6:	6861      	ldr	r1, [r4, #4]
 80013b8:	4299      	cmp	r1, r3
 80013ba:	bfde      	ittt	le
 80013bc:	2330      	movle	r3, #48	@ 0x30
 80013be:	f806 3c01 	strble.w	r3, [r6, #-1]
 80013c2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80013c6:	1b92      	subs	r2, r2, r6
 80013c8:	6122      	str	r2, [r4, #16]
 80013ca:	f8cd a000 	str.w	sl, [sp]
 80013ce:	464b      	mov	r3, r9
 80013d0:	aa03      	add	r2, sp, #12
 80013d2:	4621      	mov	r1, r4
 80013d4:	4640      	mov	r0, r8
 80013d6:	f7ff fee7 	bl	80011a8 <_printf_common>
 80013da:	3001      	adds	r0, #1
 80013dc:	d14a      	bne.n	8001474 <_printf_i+0x1f0>
 80013de:	f04f 30ff 	mov.w	r0, #4294967295
 80013e2:	b004      	add	sp, #16
 80013e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013e8:	6823      	ldr	r3, [r4, #0]
 80013ea:	f043 0320 	orr.w	r3, r3, #32
 80013ee:	6023      	str	r3, [r4, #0]
 80013f0:	4832      	ldr	r0, [pc, #200]	@ (80014bc <_printf_i+0x238>)
 80013f2:	2778      	movs	r7, #120	@ 0x78
 80013f4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80013f8:	6823      	ldr	r3, [r4, #0]
 80013fa:	6831      	ldr	r1, [r6, #0]
 80013fc:	061f      	lsls	r7, r3, #24
 80013fe:	f851 5b04 	ldr.w	r5, [r1], #4
 8001402:	d402      	bmi.n	800140a <_printf_i+0x186>
 8001404:	065f      	lsls	r7, r3, #25
 8001406:	bf48      	it	mi
 8001408:	b2ad      	uxthmi	r5, r5
 800140a:	6031      	str	r1, [r6, #0]
 800140c:	07d9      	lsls	r1, r3, #31
 800140e:	bf44      	itt	mi
 8001410:	f043 0320 	orrmi.w	r3, r3, #32
 8001414:	6023      	strmi	r3, [r4, #0]
 8001416:	b11d      	cbz	r5, 8001420 <_printf_i+0x19c>
 8001418:	2310      	movs	r3, #16
 800141a:	e7ad      	b.n	8001378 <_printf_i+0xf4>
 800141c:	4826      	ldr	r0, [pc, #152]	@ (80014b8 <_printf_i+0x234>)
 800141e:	e7e9      	b.n	80013f4 <_printf_i+0x170>
 8001420:	6823      	ldr	r3, [r4, #0]
 8001422:	f023 0320 	bic.w	r3, r3, #32
 8001426:	6023      	str	r3, [r4, #0]
 8001428:	e7f6      	b.n	8001418 <_printf_i+0x194>
 800142a:	4616      	mov	r6, r2
 800142c:	e7bd      	b.n	80013aa <_printf_i+0x126>
 800142e:	6833      	ldr	r3, [r6, #0]
 8001430:	6825      	ldr	r5, [r4, #0]
 8001432:	6961      	ldr	r1, [r4, #20]
 8001434:	1d18      	adds	r0, r3, #4
 8001436:	6030      	str	r0, [r6, #0]
 8001438:	062e      	lsls	r6, r5, #24
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	d501      	bpl.n	8001442 <_printf_i+0x1be>
 800143e:	6019      	str	r1, [r3, #0]
 8001440:	e002      	b.n	8001448 <_printf_i+0x1c4>
 8001442:	0668      	lsls	r0, r5, #25
 8001444:	d5fb      	bpl.n	800143e <_printf_i+0x1ba>
 8001446:	8019      	strh	r1, [r3, #0]
 8001448:	2300      	movs	r3, #0
 800144a:	6123      	str	r3, [r4, #16]
 800144c:	4616      	mov	r6, r2
 800144e:	e7bc      	b.n	80013ca <_printf_i+0x146>
 8001450:	6833      	ldr	r3, [r6, #0]
 8001452:	1d1a      	adds	r2, r3, #4
 8001454:	6032      	str	r2, [r6, #0]
 8001456:	681e      	ldr	r6, [r3, #0]
 8001458:	6862      	ldr	r2, [r4, #4]
 800145a:	2100      	movs	r1, #0
 800145c:	4630      	mov	r0, r6
 800145e:	f7fe feb7 	bl	80001d0 <memchr>
 8001462:	b108      	cbz	r0, 8001468 <_printf_i+0x1e4>
 8001464:	1b80      	subs	r0, r0, r6
 8001466:	6060      	str	r0, [r4, #4]
 8001468:	6863      	ldr	r3, [r4, #4]
 800146a:	6123      	str	r3, [r4, #16]
 800146c:	2300      	movs	r3, #0
 800146e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001472:	e7aa      	b.n	80013ca <_printf_i+0x146>
 8001474:	6923      	ldr	r3, [r4, #16]
 8001476:	4632      	mov	r2, r6
 8001478:	4649      	mov	r1, r9
 800147a:	4640      	mov	r0, r8
 800147c:	47d0      	blx	sl
 800147e:	3001      	adds	r0, #1
 8001480:	d0ad      	beq.n	80013de <_printf_i+0x15a>
 8001482:	6823      	ldr	r3, [r4, #0]
 8001484:	079b      	lsls	r3, r3, #30
 8001486:	d413      	bmi.n	80014b0 <_printf_i+0x22c>
 8001488:	68e0      	ldr	r0, [r4, #12]
 800148a:	9b03      	ldr	r3, [sp, #12]
 800148c:	4298      	cmp	r0, r3
 800148e:	bfb8      	it	lt
 8001490:	4618      	movlt	r0, r3
 8001492:	e7a6      	b.n	80013e2 <_printf_i+0x15e>
 8001494:	2301      	movs	r3, #1
 8001496:	4632      	mov	r2, r6
 8001498:	4649      	mov	r1, r9
 800149a:	4640      	mov	r0, r8
 800149c:	47d0      	blx	sl
 800149e:	3001      	adds	r0, #1
 80014a0:	d09d      	beq.n	80013de <_printf_i+0x15a>
 80014a2:	3501      	adds	r5, #1
 80014a4:	68e3      	ldr	r3, [r4, #12]
 80014a6:	9903      	ldr	r1, [sp, #12]
 80014a8:	1a5b      	subs	r3, r3, r1
 80014aa:	42ab      	cmp	r3, r5
 80014ac:	dcf2      	bgt.n	8001494 <_printf_i+0x210>
 80014ae:	e7eb      	b.n	8001488 <_printf_i+0x204>
 80014b0:	2500      	movs	r5, #0
 80014b2:	f104 0619 	add.w	r6, r4, #25
 80014b6:	e7f5      	b.n	80014a4 <_printf_i+0x220>
 80014b8:	080018ab 	.word	0x080018ab
 80014bc:	080018bc 	.word	0x080018bc

080014c0 <__sflush_r>:
 80014c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80014c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014c8:	0716      	lsls	r6, r2, #28
 80014ca:	4605      	mov	r5, r0
 80014cc:	460c      	mov	r4, r1
 80014ce:	d454      	bmi.n	800157a <__sflush_r+0xba>
 80014d0:	684b      	ldr	r3, [r1, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	dc02      	bgt.n	80014dc <__sflush_r+0x1c>
 80014d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80014d8:	2b00      	cmp	r3, #0
 80014da:	dd48      	ble.n	800156e <__sflush_r+0xae>
 80014dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80014de:	2e00      	cmp	r6, #0
 80014e0:	d045      	beq.n	800156e <__sflush_r+0xae>
 80014e2:	2300      	movs	r3, #0
 80014e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80014e8:	682f      	ldr	r7, [r5, #0]
 80014ea:	6a21      	ldr	r1, [r4, #32]
 80014ec:	602b      	str	r3, [r5, #0]
 80014ee:	d030      	beq.n	8001552 <__sflush_r+0x92>
 80014f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80014f2:	89a3      	ldrh	r3, [r4, #12]
 80014f4:	0759      	lsls	r1, r3, #29
 80014f6:	d505      	bpl.n	8001504 <__sflush_r+0x44>
 80014f8:	6863      	ldr	r3, [r4, #4]
 80014fa:	1ad2      	subs	r2, r2, r3
 80014fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80014fe:	b10b      	cbz	r3, 8001504 <__sflush_r+0x44>
 8001500:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001502:	1ad2      	subs	r2, r2, r3
 8001504:	2300      	movs	r3, #0
 8001506:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001508:	6a21      	ldr	r1, [r4, #32]
 800150a:	4628      	mov	r0, r5
 800150c:	47b0      	blx	r6
 800150e:	1c43      	adds	r3, r0, #1
 8001510:	89a3      	ldrh	r3, [r4, #12]
 8001512:	d106      	bne.n	8001522 <__sflush_r+0x62>
 8001514:	6829      	ldr	r1, [r5, #0]
 8001516:	291d      	cmp	r1, #29
 8001518:	d82b      	bhi.n	8001572 <__sflush_r+0xb2>
 800151a:	4a2a      	ldr	r2, [pc, #168]	@ (80015c4 <__sflush_r+0x104>)
 800151c:	40ca      	lsrs	r2, r1
 800151e:	07d6      	lsls	r6, r2, #31
 8001520:	d527      	bpl.n	8001572 <__sflush_r+0xb2>
 8001522:	2200      	movs	r2, #0
 8001524:	6062      	str	r2, [r4, #4]
 8001526:	04d9      	lsls	r1, r3, #19
 8001528:	6922      	ldr	r2, [r4, #16]
 800152a:	6022      	str	r2, [r4, #0]
 800152c:	d504      	bpl.n	8001538 <__sflush_r+0x78>
 800152e:	1c42      	adds	r2, r0, #1
 8001530:	d101      	bne.n	8001536 <__sflush_r+0x76>
 8001532:	682b      	ldr	r3, [r5, #0]
 8001534:	b903      	cbnz	r3, 8001538 <__sflush_r+0x78>
 8001536:	6560      	str	r0, [r4, #84]	@ 0x54
 8001538:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800153a:	602f      	str	r7, [r5, #0]
 800153c:	b1b9      	cbz	r1, 800156e <__sflush_r+0xae>
 800153e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001542:	4299      	cmp	r1, r3
 8001544:	d002      	beq.n	800154c <__sflush_r+0x8c>
 8001546:	4628      	mov	r0, r5
 8001548:	f7ff fbf4 	bl	8000d34 <_free_r>
 800154c:	2300      	movs	r3, #0
 800154e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001550:	e00d      	b.n	800156e <__sflush_r+0xae>
 8001552:	2301      	movs	r3, #1
 8001554:	4628      	mov	r0, r5
 8001556:	47b0      	blx	r6
 8001558:	4602      	mov	r2, r0
 800155a:	1c50      	adds	r0, r2, #1
 800155c:	d1c9      	bne.n	80014f2 <__sflush_r+0x32>
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d0c6      	beq.n	80014f2 <__sflush_r+0x32>
 8001564:	2b1d      	cmp	r3, #29
 8001566:	d001      	beq.n	800156c <__sflush_r+0xac>
 8001568:	2b16      	cmp	r3, #22
 800156a:	d11e      	bne.n	80015aa <__sflush_r+0xea>
 800156c:	602f      	str	r7, [r5, #0]
 800156e:	2000      	movs	r0, #0
 8001570:	e022      	b.n	80015b8 <__sflush_r+0xf8>
 8001572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001576:	b21b      	sxth	r3, r3
 8001578:	e01b      	b.n	80015b2 <__sflush_r+0xf2>
 800157a:	690f      	ldr	r7, [r1, #16]
 800157c:	2f00      	cmp	r7, #0
 800157e:	d0f6      	beq.n	800156e <__sflush_r+0xae>
 8001580:	0793      	lsls	r3, r2, #30
 8001582:	680e      	ldr	r6, [r1, #0]
 8001584:	bf08      	it	eq
 8001586:	694b      	ldreq	r3, [r1, #20]
 8001588:	600f      	str	r7, [r1, #0]
 800158a:	bf18      	it	ne
 800158c:	2300      	movne	r3, #0
 800158e:	eba6 0807 	sub.w	r8, r6, r7
 8001592:	608b      	str	r3, [r1, #8]
 8001594:	f1b8 0f00 	cmp.w	r8, #0
 8001598:	dde9      	ble.n	800156e <__sflush_r+0xae>
 800159a:	6a21      	ldr	r1, [r4, #32]
 800159c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800159e:	4643      	mov	r3, r8
 80015a0:	463a      	mov	r2, r7
 80015a2:	4628      	mov	r0, r5
 80015a4:	47b0      	blx	r6
 80015a6:	2800      	cmp	r0, #0
 80015a8:	dc08      	bgt.n	80015bc <__sflush_r+0xfc>
 80015aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80015b2:	81a3      	strh	r3, [r4, #12]
 80015b4:	f04f 30ff 	mov.w	r0, #4294967295
 80015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015bc:	4407      	add	r7, r0
 80015be:	eba8 0800 	sub.w	r8, r8, r0
 80015c2:	e7e7      	b.n	8001594 <__sflush_r+0xd4>
 80015c4:	20400001 	.word	0x20400001

080015c8 <_fflush_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	690b      	ldr	r3, [r1, #16]
 80015cc:	4605      	mov	r5, r0
 80015ce:	460c      	mov	r4, r1
 80015d0:	b913      	cbnz	r3, 80015d8 <_fflush_r+0x10>
 80015d2:	2500      	movs	r5, #0
 80015d4:	4628      	mov	r0, r5
 80015d6:	bd38      	pop	{r3, r4, r5, pc}
 80015d8:	b118      	cbz	r0, 80015e2 <_fflush_r+0x1a>
 80015da:	6a03      	ldr	r3, [r0, #32]
 80015dc:	b90b      	cbnz	r3, 80015e2 <_fflush_r+0x1a>
 80015de:	f7ff faa1 	bl	8000b24 <__sinit>
 80015e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d0f3      	beq.n	80015d2 <_fflush_r+0xa>
 80015ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80015ec:	07d0      	lsls	r0, r2, #31
 80015ee:	d404      	bmi.n	80015fa <_fflush_r+0x32>
 80015f0:	0599      	lsls	r1, r3, #22
 80015f2:	d402      	bmi.n	80015fa <_fflush_r+0x32>
 80015f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80015f6:	f7ff fb9a 	bl	8000d2e <__retarget_lock_acquire_recursive>
 80015fa:	4628      	mov	r0, r5
 80015fc:	4621      	mov	r1, r4
 80015fe:	f7ff ff5f 	bl	80014c0 <__sflush_r>
 8001602:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001604:	07da      	lsls	r2, r3, #31
 8001606:	4605      	mov	r5, r0
 8001608:	d4e4      	bmi.n	80015d4 <_fflush_r+0xc>
 800160a:	89a3      	ldrh	r3, [r4, #12]
 800160c:	059b      	lsls	r3, r3, #22
 800160e:	d4e1      	bmi.n	80015d4 <_fflush_r+0xc>
 8001610:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001612:	f7ff fb8d 	bl	8000d30 <__retarget_lock_release_recursive>
 8001616:	e7dd      	b.n	80015d4 <_fflush_r+0xc>

08001618 <__swbuf_r>:
 8001618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800161a:	460e      	mov	r6, r1
 800161c:	4614      	mov	r4, r2
 800161e:	4605      	mov	r5, r0
 8001620:	b118      	cbz	r0, 800162a <__swbuf_r+0x12>
 8001622:	6a03      	ldr	r3, [r0, #32]
 8001624:	b90b      	cbnz	r3, 800162a <__swbuf_r+0x12>
 8001626:	f7ff fa7d 	bl	8000b24 <__sinit>
 800162a:	69a3      	ldr	r3, [r4, #24]
 800162c:	60a3      	str	r3, [r4, #8]
 800162e:	89a3      	ldrh	r3, [r4, #12]
 8001630:	071a      	lsls	r2, r3, #28
 8001632:	d501      	bpl.n	8001638 <__swbuf_r+0x20>
 8001634:	6923      	ldr	r3, [r4, #16]
 8001636:	b943      	cbnz	r3, 800164a <__swbuf_r+0x32>
 8001638:	4621      	mov	r1, r4
 800163a:	4628      	mov	r0, r5
 800163c:	f000 f82a 	bl	8001694 <__swsetup_r>
 8001640:	b118      	cbz	r0, 800164a <__swbuf_r+0x32>
 8001642:	f04f 37ff 	mov.w	r7, #4294967295
 8001646:	4638      	mov	r0, r7
 8001648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	6922      	ldr	r2, [r4, #16]
 800164e:	1a98      	subs	r0, r3, r2
 8001650:	6963      	ldr	r3, [r4, #20]
 8001652:	b2f6      	uxtb	r6, r6
 8001654:	4283      	cmp	r3, r0
 8001656:	4637      	mov	r7, r6
 8001658:	dc05      	bgt.n	8001666 <__swbuf_r+0x4e>
 800165a:	4621      	mov	r1, r4
 800165c:	4628      	mov	r0, r5
 800165e:	f7ff ffb3 	bl	80015c8 <_fflush_r>
 8001662:	2800      	cmp	r0, #0
 8001664:	d1ed      	bne.n	8001642 <__swbuf_r+0x2a>
 8001666:	68a3      	ldr	r3, [r4, #8]
 8001668:	3b01      	subs	r3, #1
 800166a:	60a3      	str	r3, [r4, #8]
 800166c:	6823      	ldr	r3, [r4, #0]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	6022      	str	r2, [r4, #0]
 8001672:	701e      	strb	r6, [r3, #0]
 8001674:	6962      	ldr	r2, [r4, #20]
 8001676:	1c43      	adds	r3, r0, #1
 8001678:	429a      	cmp	r2, r3
 800167a:	d004      	beq.n	8001686 <__swbuf_r+0x6e>
 800167c:	89a3      	ldrh	r3, [r4, #12]
 800167e:	07db      	lsls	r3, r3, #31
 8001680:	d5e1      	bpl.n	8001646 <__swbuf_r+0x2e>
 8001682:	2e0a      	cmp	r6, #10
 8001684:	d1df      	bne.n	8001646 <__swbuf_r+0x2e>
 8001686:	4621      	mov	r1, r4
 8001688:	4628      	mov	r0, r5
 800168a:	f7ff ff9d 	bl	80015c8 <_fflush_r>
 800168e:	2800      	cmp	r0, #0
 8001690:	d0d9      	beq.n	8001646 <__swbuf_r+0x2e>
 8001692:	e7d6      	b.n	8001642 <__swbuf_r+0x2a>

08001694 <__swsetup_r>:
 8001694:	b538      	push	{r3, r4, r5, lr}
 8001696:	4b29      	ldr	r3, [pc, #164]	@ (800173c <__swsetup_r+0xa8>)
 8001698:	4605      	mov	r5, r0
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	460c      	mov	r4, r1
 800169e:	b118      	cbz	r0, 80016a8 <__swsetup_r+0x14>
 80016a0:	6a03      	ldr	r3, [r0, #32]
 80016a2:	b90b      	cbnz	r3, 80016a8 <__swsetup_r+0x14>
 80016a4:	f7ff fa3e 	bl	8000b24 <__sinit>
 80016a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016ac:	0719      	lsls	r1, r3, #28
 80016ae:	d422      	bmi.n	80016f6 <__swsetup_r+0x62>
 80016b0:	06da      	lsls	r2, r3, #27
 80016b2:	d407      	bmi.n	80016c4 <__swsetup_r+0x30>
 80016b4:	2209      	movs	r2, #9
 80016b6:	602a      	str	r2, [r5, #0]
 80016b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016bc:	81a3      	strh	r3, [r4, #12]
 80016be:	f04f 30ff 	mov.w	r0, #4294967295
 80016c2:	e033      	b.n	800172c <__swsetup_r+0x98>
 80016c4:	0758      	lsls	r0, r3, #29
 80016c6:	d512      	bpl.n	80016ee <__swsetup_r+0x5a>
 80016c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80016ca:	b141      	cbz	r1, 80016de <__swsetup_r+0x4a>
 80016cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80016d0:	4299      	cmp	r1, r3
 80016d2:	d002      	beq.n	80016da <__swsetup_r+0x46>
 80016d4:	4628      	mov	r0, r5
 80016d6:	f7ff fb2d 	bl	8000d34 <_free_r>
 80016da:	2300      	movs	r3, #0
 80016dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80016de:	89a3      	ldrh	r3, [r4, #12]
 80016e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80016e4:	81a3      	strh	r3, [r4, #12]
 80016e6:	2300      	movs	r3, #0
 80016e8:	6063      	str	r3, [r4, #4]
 80016ea:	6923      	ldr	r3, [r4, #16]
 80016ec:	6023      	str	r3, [r4, #0]
 80016ee:	89a3      	ldrh	r3, [r4, #12]
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	81a3      	strh	r3, [r4, #12]
 80016f6:	6923      	ldr	r3, [r4, #16]
 80016f8:	b94b      	cbnz	r3, 800170e <__swsetup_r+0x7a>
 80016fa:	89a3      	ldrh	r3, [r4, #12]
 80016fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001700:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001704:	d003      	beq.n	800170e <__swsetup_r+0x7a>
 8001706:	4621      	mov	r1, r4
 8001708:	4628      	mov	r0, r5
 800170a:	f000 f84f 	bl	80017ac <__smakebuf_r>
 800170e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001712:	f013 0201 	ands.w	r2, r3, #1
 8001716:	d00a      	beq.n	800172e <__swsetup_r+0x9a>
 8001718:	2200      	movs	r2, #0
 800171a:	60a2      	str	r2, [r4, #8]
 800171c:	6962      	ldr	r2, [r4, #20]
 800171e:	4252      	negs	r2, r2
 8001720:	61a2      	str	r2, [r4, #24]
 8001722:	6922      	ldr	r2, [r4, #16]
 8001724:	b942      	cbnz	r2, 8001738 <__swsetup_r+0xa4>
 8001726:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800172a:	d1c5      	bne.n	80016b8 <__swsetup_r+0x24>
 800172c:	bd38      	pop	{r3, r4, r5, pc}
 800172e:	0799      	lsls	r1, r3, #30
 8001730:	bf58      	it	pl
 8001732:	6962      	ldrpl	r2, [r4, #20]
 8001734:	60a2      	str	r2, [r4, #8]
 8001736:	e7f4      	b.n	8001722 <__swsetup_r+0x8e>
 8001738:	2000      	movs	r0, #0
 800173a:	e7f7      	b.n	800172c <__swsetup_r+0x98>
 800173c:	20000018 	.word	0x20000018

08001740 <_sbrk_r>:
 8001740:	b538      	push	{r3, r4, r5, lr}
 8001742:	4d06      	ldr	r5, [pc, #24]	@ (800175c <_sbrk_r+0x1c>)
 8001744:	2300      	movs	r3, #0
 8001746:	4604      	mov	r4, r0
 8001748:	4608      	mov	r0, r1
 800174a:	602b      	str	r3, [r5, #0]
 800174c:	f7ff f8fe 	bl	800094c <_sbrk>
 8001750:	1c43      	adds	r3, r0, #1
 8001752:	d102      	bne.n	800175a <_sbrk_r+0x1a>
 8001754:	682b      	ldr	r3, [r5, #0]
 8001756:	b103      	cbz	r3, 800175a <_sbrk_r+0x1a>
 8001758:	6023      	str	r3, [r4, #0]
 800175a:	bd38      	pop	{r3, r4, r5, pc}
 800175c:	20000250 	.word	0x20000250

08001760 <__swhatbuf_r>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	460c      	mov	r4, r1
 8001764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001768:	2900      	cmp	r1, #0
 800176a:	b096      	sub	sp, #88	@ 0x58
 800176c:	4615      	mov	r5, r2
 800176e:	461e      	mov	r6, r3
 8001770:	da0d      	bge.n	800178e <__swhatbuf_r+0x2e>
 8001772:	89a3      	ldrh	r3, [r4, #12]
 8001774:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	bf14      	ite	ne
 800177e:	2340      	movne	r3, #64	@ 0x40
 8001780:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001784:	2000      	movs	r0, #0
 8001786:	6031      	str	r1, [r6, #0]
 8001788:	602b      	str	r3, [r5, #0]
 800178a:	b016      	add	sp, #88	@ 0x58
 800178c:	bd70      	pop	{r4, r5, r6, pc}
 800178e:	466a      	mov	r2, sp
 8001790:	f000 f848 	bl	8001824 <_fstat_r>
 8001794:	2800      	cmp	r0, #0
 8001796:	dbec      	blt.n	8001772 <__swhatbuf_r+0x12>
 8001798:	9901      	ldr	r1, [sp, #4]
 800179a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800179e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80017a2:	4259      	negs	r1, r3
 80017a4:	4159      	adcs	r1, r3
 80017a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017aa:	e7eb      	b.n	8001784 <__swhatbuf_r+0x24>

080017ac <__smakebuf_r>:
 80017ac:	898b      	ldrh	r3, [r1, #12]
 80017ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017b0:	079d      	lsls	r5, r3, #30
 80017b2:	4606      	mov	r6, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	d507      	bpl.n	80017c8 <__smakebuf_r+0x1c>
 80017b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80017bc:	6023      	str	r3, [r4, #0]
 80017be:	6123      	str	r3, [r4, #16]
 80017c0:	2301      	movs	r3, #1
 80017c2:	6163      	str	r3, [r4, #20]
 80017c4:	b003      	add	sp, #12
 80017c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017c8:	ab01      	add	r3, sp, #4
 80017ca:	466a      	mov	r2, sp
 80017cc:	f7ff ffc8 	bl	8001760 <__swhatbuf_r>
 80017d0:	9f00      	ldr	r7, [sp, #0]
 80017d2:	4605      	mov	r5, r0
 80017d4:	4639      	mov	r1, r7
 80017d6:	4630      	mov	r0, r6
 80017d8:	f7ff fb18 	bl	8000e0c <_malloc_r>
 80017dc:	b948      	cbnz	r0, 80017f2 <__smakebuf_r+0x46>
 80017de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80017e2:	059a      	lsls	r2, r3, #22
 80017e4:	d4ee      	bmi.n	80017c4 <__smakebuf_r+0x18>
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	f043 0302 	orr.w	r3, r3, #2
 80017ee:	81a3      	strh	r3, [r4, #12]
 80017f0:	e7e2      	b.n	80017b8 <__smakebuf_r+0xc>
 80017f2:	89a3      	ldrh	r3, [r4, #12]
 80017f4:	6020      	str	r0, [r4, #0]
 80017f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017fa:	81a3      	strh	r3, [r4, #12]
 80017fc:	9b01      	ldr	r3, [sp, #4]
 80017fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001802:	b15b      	cbz	r3, 800181c <__smakebuf_r+0x70>
 8001804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001808:	4630      	mov	r0, r6
 800180a:	f000 f81d 	bl	8001848 <_isatty_r>
 800180e:	b128      	cbz	r0, 800181c <__smakebuf_r+0x70>
 8001810:	89a3      	ldrh	r3, [r4, #12]
 8001812:	f023 0303 	bic.w	r3, r3, #3
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	81a3      	strh	r3, [r4, #12]
 800181c:	89a3      	ldrh	r3, [r4, #12]
 800181e:	431d      	orrs	r5, r3
 8001820:	81a5      	strh	r5, [r4, #12]
 8001822:	e7cf      	b.n	80017c4 <__smakebuf_r+0x18>

08001824 <_fstat_r>:
 8001824:	b538      	push	{r3, r4, r5, lr}
 8001826:	4d07      	ldr	r5, [pc, #28]	@ (8001844 <_fstat_r+0x20>)
 8001828:	2300      	movs	r3, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	602b      	str	r3, [r5, #0]
 8001832:	f7ff f862 	bl	80008fa <_fstat>
 8001836:	1c43      	adds	r3, r0, #1
 8001838:	d102      	bne.n	8001840 <_fstat_r+0x1c>
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	b103      	cbz	r3, 8001840 <_fstat_r+0x1c>
 800183e:	6023      	str	r3, [r4, #0]
 8001840:	bd38      	pop	{r3, r4, r5, pc}
 8001842:	bf00      	nop
 8001844:	20000250 	.word	0x20000250

08001848 <_isatty_r>:
 8001848:	b538      	push	{r3, r4, r5, lr}
 800184a:	4d06      	ldr	r5, [pc, #24]	@ (8001864 <_isatty_r+0x1c>)
 800184c:	2300      	movs	r3, #0
 800184e:	4604      	mov	r4, r0
 8001850:	4608      	mov	r0, r1
 8001852:	602b      	str	r3, [r5, #0]
 8001854:	f7ff f861 	bl	800091a <_isatty>
 8001858:	1c43      	adds	r3, r0, #1
 800185a:	d102      	bne.n	8001862 <_isatty_r+0x1a>
 800185c:	682b      	ldr	r3, [r5, #0]
 800185e:	b103      	cbz	r3, 8001862 <_isatty_r+0x1a>
 8001860:	6023      	str	r3, [r4, #0]
 8001862:	bd38      	pop	{r3, r4, r5, pc}
 8001864:	20000250 	.word	0x20000250

08001868 <_init>:
 8001868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800186a:	bf00      	nop
 800186c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800186e:	bc08      	pop	{r3}
 8001870:	469e      	mov	lr, r3
 8001872:	4770      	bx	lr

08001874 <_fini>:
 8001874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001876:	bf00      	nop
 8001878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800187a:	bc08      	pop	{r3}
 800187c:	469e      	mov	lr, r3
 800187e:	4770      	bx	lr
