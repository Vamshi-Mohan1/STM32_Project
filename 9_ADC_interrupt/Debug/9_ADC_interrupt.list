
9_ADC_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a28  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003bb8  08003bb8  00004bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c38  08003c38  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c40  08003c40  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c40  08003c40  00004c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c44  08003c44  00004c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          00000260  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002c8  200002c8  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b3b8  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000018e6  00000000  00000000  00010450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000930  00000000  00000000  00011d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000704  00000000  00000000  00012668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002827e  00000000  00000000  00012d6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b520  00000000  00000000  0003afea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fd4f1  00000000  00000000  0004650a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001439fb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d90  00000000  00000000  00143a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  001467d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003ba0 	.word	0x08003ba0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003ba0 	.word	0x08003ba0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005a2:	2300      	movs	r3, #0
 80005a4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f001 f960 	bl	800186c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ac:	200f      	movs	r0, #15
 80005ae:	f000 f815 	bl	80005dc <HAL_InitTick>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d002      	beq.n	80005be <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005b8:	2301      	movs	r3, #1
 80005ba:	71fb      	strb	r3, [r7, #7]
 80005bc:	e001      	b.n	80005c2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005be:	f000 f805 	bl	80005cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005c2:	79fb      	ldrb	r3, [r7, #7]
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80005cc:	b480      	push	{r7}
 80005ce:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005d0:	bf00      	nop
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr
	...

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005e4:	2300      	movs	r3, #0
 80005e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005e8:	4b17      	ldr	r3, [pc, #92]	@ (8000648 <HAL_InitTick+0x6c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d023      	beq.n	8000638 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f0:	4b16      	ldr	r3, [pc, #88]	@ (800064c <HAL_InitTick+0x70>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b14      	ldr	r3, [pc, #80]	@ (8000648 <HAL_InitTick+0x6c>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	4619      	mov	r1, r3
 80005fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80005fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000602:	fbb2 f3f3 	udiv	r3, r2, r3
 8000606:	4618      	mov	r0, r3
 8000608:	f001 f957 	bl	80018ba <HAL_SYSTICK_Config>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d10f      	bne.n	8000632 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	2b0f      	cmp	r3, #15
 8000616:	d809      	bhi.n	800062c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000618:	2200      	movs	r2, #0
 800061a:	6879      	ldr	r1, [r7, #4]
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f001 f92f 	bl	8001882 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000624:	4a0a      	ldr	r2, [pc, #40]	@ (8000650 <HAL_InitTick+0x74>)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e007      	b.n	800063c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800062c:	2301      	movs	r3, #1
 800062e:	73fb      	strb	r3, [r7, #15]
 8000630:	e004      	b.n	800063c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e001      	b.n	800063c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000638:	2301      	movs	r3, #1
 800063a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800063c:	7bfb      	ldrb	r3, [r7, #15]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000004 	.word	0x20000004
 800064c:	20000008 	.word	0x20000008
 8000650:	20000000 	.word	0x20000000

08000654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  return uwTick;
 8000658:	4b03      	ldr	r3, [pc, #12]	@ (8000668 <HAL_GetTick+0x14>)
 800065a:	681b      	ldr	r3, [r3, #0]
}
 800065c:	4618      	mov	r0, r3
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	20000084 	.word	0x20000084

0800066c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	431a      	orrs	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	609a      	str	r2, [r3, #8]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	689b      	ldr	r3, [r3, #8]
 80006a0:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	431a      	orrs	r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	609a      	str	r2, [r3, #8]
}
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	689b      	ldr	r3, [r3, #8]
 80006c4:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	370c      	adds	r7, #12
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr

080006d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b087      	sub	sp, #28
 80006d8:	af00      	add	r7, sp, #0
 80006da:	60f8      	str	r0, [r7, #12]
 80006dc:	60b9      	str	r1, [r7, #8]
 80006de:	607a      	str	r2, [r7, #4]
 80006e0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	3360      	adds	r3, #96	@ 0x60
 80006e6:	461a      	mov	r2, r3
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	681a      	ldr	r2, [r3, #0]
 80006f4:	4b08      	ldr	r3, [pc, #32]	@ (8000718 <LL_ADC_SetOffset+0x44>)
 80006f6:	4013      	ands	r3, r2
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80006fe:	683a      	ldr	r2, [r7, #0]
 8000700:	430a      	orrs	r2, r1
 8000702:	4313      	orrs	r3, r2
 8000704:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8000708:	697b      	ldr	r3, [r7, #20]
 800070a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800070c:	bf00      	nop
 800070e:	371c      	adds	r7, #28
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	03fff000 	.word	0x03fff000

0800071c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800071c:	b480      	push	{r7}
 800071e:	b085      	sub	sp, #20
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3360      	adds	r3, #96	@ 0x60
 800072a:	461a      	mov	r2, r3
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	4413      	add	r3, r2
 8000732:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 800073c:	4618      	mov	r0, r3
 800073e:	3714      	adds	r7, #20
 8000740:	46bd      	mov	sp, r7
 8000742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000746:	4770      	bx	lr

08000748 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000748:	b480      	push	{r7}
 800074a:	b087      	sub	sp, #28
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	3360      	adds	r3, #96	@ 0x60
 8000758:	461a      	mov	r2, r3
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000762:	697b      	ldr	r3, [r7, #20]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	431a      	orrs	r2, r3
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000772:	bf00      	nop
 8000774:	371c      	adds	r7, #28
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr

0800077e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800077e:	b480      	push	{r7}
 8000780:	b087      	sub	sp, #28
 8000782:	af00      	add	r7, sp, #0
 8000784:	60f8      	str	r0, [r7, #12]
 8000786:	60b9      	str	r1, [r7, #8]
 8000788:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	3330      	adds	r3, #48	@ 0x30
 800078e:	461a      	mov	r2, r3
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	0a1b      	lsrs	r3, r3, #8
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	f003 030c 	and.w	r3, r3, #12
 800079a:	4413      	add	r3, r2
 800079c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	211f      	movs	r1, #31
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43db      	mvns	r3, r3
 80007b0:	401a      	ands	r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	0e9b      	lsrs	r3, r3, #26
 80007b6:	f003 011f 	and.w	r1, r3, #31
 80007ba:	68bb      	ldr	r3, [r7, #8]
 80007bc:	f003 031f 	and.w	r3, r3, #31
 80007c0:	fa01 f303 	lsl.w	r3, r1, r3
 80007c4:	431a      	orrs	r2, r3
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80007ca:	bf00      	nop
 80007cc:	371c      	adds	r7, #28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr

080007d6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80007d6:	b480      	push	{r7}
 80007d8:	b087      	sub	sp, #28
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	3314      	adds	r3, #20
 80007e6:	461a      	mov	r2, r3
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	0e5b      	lsrs	r3, r3, #25
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	4413      	add	r3, r2
 80007f4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	0d1b      	lsrs	r3, r3, #20
 80007fe:	f003 031f 	and.w	r3, r3, #31
 8000802:	2107      	movs	r1, #7
 8000804:	fa01 f303 	lsl.w	r3, r1, r3
 8000808:	43db      	mvns	r3, r3
 800080a:	401a      	ands	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	0d1b      	lsrs	r3, r3, #20
 8000810:	f003 031f 	and.w	r3, r3, #31
 8000814:	6879      	ldr	r1, [r7, #4]
 8000816:	fa01 f303 	lsl.w	r3, r1, r3
 800081a:	431a      	orrs	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000820:	bf00      	nop
 8000822:	371c      	adds	r7, #28
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr

0800082c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000844:	43db      	mvns	r3, r3
 8000846:	401a      	ands	r2, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	f003 0318 	and.w	r3, r3, #24
 800084e:	4908      	ldr	r1, [pc, #32]	@ (8000870 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000850:	40d9      	lsrs	r1, r3
 8000852:	68bb      	ldr	r3, [r7, #8]
 8000854:	400b      	ands	r3, r1
 8000856:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800085a:	431a      	orrs	r2, r3
 800085c:	68fb      	ldr	r3, [r7, #12]
 800085e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000862:	bf00      	nop
 8000864:	3714      	adds	r7, #20
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	0007ffff 	.word	0x0007ffff

08000874 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	f003 031f 	and.w	r3, r3, #31
}
 8000884:	4618      	mov	r0, r3
 8000886:	370c      	adds	r7, #12
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80008a0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	6093      	str	r3, [r2, #8]
}
 80008a8:	bf00      	nop
 80008aa:	370c      	adds	r7, #12
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	689b      	ldr	r3, [r3, #8]
 80008c0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80008c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80008c8:	d101      	bne.n	80008ce <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80008ca:	2301      	movs	r3, #1
 80008cc:	e000      	b.n	80008d0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80008ce:	2300      	movs	r3, #0
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80008ec:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80008f0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000918:	d101      	bne.n	800091e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800091a:	2301      	movs	r3, #1
 800091c:	e000      	b.n	8000920 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800091e:	2300      	movs	r3, #0
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	689b      	ldr	r3, [r3, #8]
 8000938:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800093c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000940:	f043 0201 	orr.w	r2, r3, #1
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr

08000954 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f003 0301 	and.w	r3, r3, #1
 8000964:	2b01      	cmp	r3, #1
 8000966:	d101      	bne.n	800096c <LL_ADC_IsEnabled+0x18>
 8000968:	2301      	movs	r3, #1
 800096a:	e000      	b.n	800096e <LL_ADC_IsEnabled+0x1a>
 800096c:	2300      	movs	r3, #0
}
 800096e:	4618      	mov	r0, r3
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800097a:	b480      	push	{r7}
 800097c:	b083      	sub	sp, #12
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800098a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800098e:	f043 0204 	orr.w	r2, r3, #4
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80009a2:	b480      	push	{r7}
 80009a4:	b083      	sub	sp, #12
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0304 	and.w	r3, r3, #4
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d101      	bne.n	80009ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f003 0308 	and.w	r3, r3, #8
 80009d8:	2b08      	cmp	r3, #8
 80009da:	d101      	bne.n	80009e0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
	...

080009f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80009f0:	b590      	push	{r4, r7, lr}
 80009f2:	b089      	sub	sp, #36	@ 0x24
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f8:	2300      	movs	r3, #0
 80009fa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d101      	bne.n	8000a0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000a06:	2301      	movs	r3, #1
 8000a08:	e130      	b.n	8000c6c <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	691b      	ldr	r3, [r3, #16]
 8000a0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d109      	bne.n	8000a2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f000 f939 	bl	8000c90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2200      	movs	r2, #0
 8000a22:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2200      	movs	r2, #0
 8000a28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff3f 	bl	80008b4 <LL_ADC_IsDeepPowerDownEnabled>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4618      	mov	r0, r3
 8000a42:	f7ff ff25 	bl	8000890 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff ff5a 	bl	8000904 <LL_ADC_IsInternalRegulatorEnabled>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d115      	bne.n	8000a82 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff3e 	bl	80008dc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000a60:	4b84      	ldr	r3, [pc, #528]	@ (8000c74 <HAL_ADC_Init+0x284>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	099b      	lsrs	r3, r3, #6
 8000a66:	4a84      	ldr	r2, [pc, #528]	@ (8000c78 <HAL_ADC_Init+0x288>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	099b      	lsrs	r3, r3, #6
 8000a6e:	3301      	adds	r3, #1
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000a74:	e002      	b.n	8000a7c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3b01      	subs	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d1f9      	bne.n	8000a76 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff3c 	bl	8000904 <LL_ADC_IsInternalRegulatorEnabled>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10d      	bne.n	8000aae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000a96:	f043 0210 	orr.w	r2, r3, #16
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000aa2:	f043 0201 	orr.w	r2, r3, #1
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f7ff ff75 	bl	80009a2 <LL_ADC_REG_IsConversionOngoing>
 8000ab8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000abe:	f003 0310 	and.w	r3, r3, #16
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	f040 80c9 	bne.w	8000c5a <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f040 80c5 	bne.w	8000c5a <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ad4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ad8:	f043 0202 	orr.w	r2, r3, #2
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff35 	bl	8000954 <LL_ADC_IsEnabled>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d115      	bne.n	8000b1c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000af0:	4862      	ldr	r0, [pc, #392]	@ (8000c7c <HAL_ADC_Init+0x28c>)
 8000af2:	f7ff ff2f 	bl	8000954 <LL_ADC_IsEnabled>
 8000af6:	4604      	mov	r4, r0
 8000af8:	4861      	ldr	r0, [pc, #388]	@ (8000c80 <HAL_ADC_Init+0x290>)
 8000afa:	f7ff ff2b 	bl	8000954 <LL_ADC_IsEnabled>
 8000afe:	4603      	mov	r3, r0
 8000b00:	431c      	orrs	r4, r3
 8000b02:	4860      	ldr	r0, [pc, #384]	@ (8000c84 <HAL_ADC_Init+0x294>)
 8000b04:	f7ff ff26 	bl	8000954 <LL_ADC_IsEnabled>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	4323      	orrs	r3, r4
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d105      	bne.n	8000b1c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	4619      	mov	r1, r3
 8000b16:	485c      	ldr	r0, [pc, #368]	@ (8000c88 <HAL_ADC_Init+0x298>)
 8000b18:	f7ff fda8 	bl	800066c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	7e5b      	ldrb	r3, [r3, #25]
 8000b20:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b26:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000b2c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000b32:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b3a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d106      	bne.n	8000b58 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b4e:	3b01      	subs	r3, #1
 8000b50:	045b      	lsls	r3, r3, #17
 8000b52:	69ba      	ldr	r2, [r7, #24]
 8000b54:	4313      	orrs	r3, r2
 8000b56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d009      	beq.n	8000b74 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b64:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b6c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000b6e:	69ba      	ldr	r2, [r7, #24]
 8000b70:	4313      	orrs	r3, r2
 8000b72:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	68da      	ldr	r2, [r3, #12]
 8000b7a:	4b44      	ldr	r3, [pc, #272]	@ (8000c8c <HAL_ADC_Init+0x29c>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	687a      	ldr	r2, [r7, #4]
 8000b80:	6812      	ldr	r2, [r2, #0]
 8000b82:	69b9      	ldr	r1, [r7, #24]
 8000b84:	430b      	orrs	r3, r1
 8000b86:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff ff1b 	bl	80009c8 <LL_ADC_INJ_IsConversionOngoing>
 8000b92:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d13d      	bne.n	8000c16 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000b9a:	693b      	ldr	r3, [r7, #16]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d13a      	bne.n	8000c16 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000ba4:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000bac:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000bae:	4313      	orrs	r3, r2
 8000bb0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000bbc:	f023 0302 	bic.w	r3, r3, #2
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	6812      	ldr	r2, [r2, #0]
 8000bc4:	69b9      	ldr	r1, [r7, #24]
 8000bc6:	430b      	orrs	r3, r1
 8000bc8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d118      	bne.n	8000c06 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	691b      	ldr	r3, [r3, #16]
 8000bda:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000bde:	f023 0304 	bic.w	r3, r3, #4
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000bea:	4311      	orrs	r1, r2
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000bf0:	4311      	orrs	r1, r2
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f042 0201 	orr.w	r2, r2, #1
 8000c02:	611a      	str	r2, [r3, #16]
 8000c04:	e007      	b.n	8000c16 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	691a      	ldr	r2, [r3, #16]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f022 0201 	bic.w	r2, r2, #1
 8000c14:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	691b      	ldr	r3, [r3, #16]
 8000c1a:	2b01      	cmp	r3, #1
 8000c1c:	d10c      	bne.n	8000c38 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c24:	f023 010f 	bic.w	r1, r3, #15
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	1e5a      	subs	r2, r3, #1
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	430a      	orrs	r2, r1
 8000c34:	631a      	str	r2, [r3, #48]	@ 0x30
 8000c36:	e007      	b.n	8000c48 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 020f 	bic.w	r2, r2, #15
 8000c46:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c4c:	f023 0303 	bic.w	r3, r3, #3
 8000c50:	f043 0201 	orr.w	r2, r3, #1
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	655a      	str	r2, [r3, #84]	@ 0x54
 8000c58:	e007      	b.n	8000c6a <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c5e:	f043 0210 	orr.w	r2, r3, #16
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	3724      	adds	r7, #36	@ 0x24
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd90      	pop	{r4, r7, pc}
 8000c74:	20000008 	.word	0x20000008
 8000c78:	053e2d63 	.word	0x053e2d63
 8000c7c:	50040000 	.word	0x50040000
 8000c80:	50040100 	.word	0x50040100
 8000c84:	50040200 	.word	0x50040200
 8000c88:	50040300 	.word	0x50040300
 8000c8c:	fff0c007 	.word	0xfff0c007

08000c90 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b086      	sub	sp, #24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8000cac:	4857      	ldr	r0, [pc, #348]	@ (8000e0c <HAL_ADC_Start+0x168>)
 8000cae:	f7ff fde1 	bl	8000874 <LL_ADC_GetMultimode>
 8000cb2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fe72 	bl	80009a2 <LL_ADC_REG_IsConversionOngoing>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 809c 	bne.w	8000dfe <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000ccc:	2b01      	cmp	r3, #1
 8000cce:	d101      	bne.n	8000cd4 <HAL_ADC_Start+0x30>
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	e097      	b.n	8000e04 <HAL_ADC_Start+0x160>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f000 fc8d 	bl	80015fc <ADC_Enable>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000ce6:	7dfb      	ldrb	r3, [r7, #23]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	f040 8083 	bne.w	8000df4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cf2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000cf6:	f023 0301 	bic.w	r3, r3, #1
 8000cfa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a42      	ldr	r2, [pc, #264]	@ (8000e10 <HAL_ADC_Start+0x16c>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d002      	beq.n	8000d12 <HAL_ADC_Start+0x6e>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	e000      	b.n	8000d14 <HAL_ADC_Start+0x70>
 8000d12:	4b40      	ldr	r3, [pc, #256]	@ (8000e14 <HAL_ADC_Start+0x170>)
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	6812      	ldr	r2, [r2, #0]
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d002      	beq.n	8000d22 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d105      	bne.n	8000d2e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d26:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000d3a:	d106      	bne.n	8000d4a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d40:	f023 0206 	bic.w	r2, r3, #6
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d48:	e002      	b.n	8000d50 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	221c      	movs	r2, #28
 8000d56:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a2a      	ldr	r2, [pc, #168]	@ (8000e10 <HAL_ADC_Start+0x16c>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d002      	beq.n	8000d70 <HAL_ADC_Start+0xcc>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	e000      	b.n	8000d72 <HAL_ADC_Start+0xce>
 8000d70:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <HAL_ADC_Start+0x170>)
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	6812      	ldr	r2, [r2, #0]
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d008      	beq.n	8000d8c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d005      	beq.n	8000d8c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2b05      	cmp	r3, #5
 8000d84:	d002      	beq.n	8000d8c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2b09      	cmp	r3, #9
 8000d8a:	d114      	bne.n	8000db6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000da2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fde3 	bl	800097a <LL_ADC_REG_StartConversion>
 8000db4:	e025      	b.n	8000e02 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <HAL_ADC_Start+0x16c>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d002      	beq.n	8000dd2 <HAL_ADC_Start+0x12e>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	e000      	b.n	8000dd4 <HAL_ADC_Start+0x130>
 8000dd2:	4b10      	ldr	r3, [pc, #64]	@ (8000e14 <HAL_ADC_Start+0x170>)
 8000dd4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d00f      	beq.n	8000e02 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000df2:	e006      	b.n	8000e02 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8000dfc:	e001      	b.n	8000e02 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8000e02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e04:	4618      	mov	r0, r3
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	50040300 	.word	0x50040300
 8000e10:	50040100 	.word	0x50040100
 8000e14:	50040000 	.word	0x50040000

08000e18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0b6      	sub	sp, #216	@ 0xd8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d101      	bne.n	8000e3a <HAL_ADC_ConfigChannel+0x22>
 8000e36:	2302      	movs	r3, #2
 8000e38:	e3c9      	b.n	80015ce <HAL_ADC_ConfigChannel+0x7b6>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fdab 	bl	80009a2 <LL_ADC_REG_IsConversionOngoing>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 83aa 	bne.w	80015a8 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	2b05      	cmp	r3, #5
 8000e62:	d824      	bhi.n	8000eae <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	3b02      	subs	r3, #2
 8000e6a:	2b03      	cmp	r3, #3
 8000e6c:	d81b      	bhi.n	8000ea6 <HAL_ADC_ConfigChannel+0x8e>
 8000e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e74 <HAL_ADC_ConfigChannel+0x5c>)
 8000e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e74:	08000e85 	.word	0x08000e85
 8000e78:	08000e8d 	.word	0x08000e8d
 8000e7c:	08000e95 	.word	0x08000e95
 8000e80:	08000e9d 	.word	0x08000e9d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8000e84:	230c      	movs	r3, #12
 8000e86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000e8a:	e010      	b.n	8000eae <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8000e8c:	2312      	movs	r3, #18
 8000e8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000e92:	e00c      	b.n	8000eae <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8000e94:	2318      	movs	r3, #24
 8000e96:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000e9a:	e008      	b.n	8000eae <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8000e9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000ea4:	e003      	b.n	8000eae <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000eac:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	6818      	ldr	r0, [r3, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8000ebc:	f7ff fc5f 	bl	800077e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fd6c 	bl	80009a2 <LL_ADC_REG_IsConversionOngoing>
 8000eca:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fd78 	bl	80009c8 <LL_ADC_INJ_IsConversionOngoing>
 8000ed8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000edc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	f040 81a4 	bne.w	800122e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ee6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	f040 819f 	bne.w	800122e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6818      	ldr	r0, [r3, #0]
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	6819      	ldr	r1, [r3, #0]
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	461a      	mov	r2, r3
 8000efe:	f7ff fc6a 	bl	80007d6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	695a      	ldr	r2, [r3, #20]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d00a      	beq.n	8000f3a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6818      	ldr	r0, [r3, #0]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	6919      	ldr	r1, [r3, #16]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000f34:	f7ff fbce 	bl	80006d4 <LL_ADC_SetOffset>
 8000f38:	e179      	b.n	800122e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2100      	movs	r1, #0
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff fbeb 	bl	800071c <LL_ADC_GetOffsetChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10a      	bne.n	8000f66 <HAL_ADC_ConfigChannel+0x14e>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f7ff fbe0 	bl	800071c <LL_ADC_GetOffsetChannel>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	0e9b      	lsrs	r3, r3, #26
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	e01e      	b.n	8000fa4 <HAL_ADC_ConfigChannel+0x18c>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fbd5 	bl	800071c <LL_ADC_GetOffsetChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000f7c:	fa93 f3a3 	rbit	r3, r3
 8000f80:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000f88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000f8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d101      	bne.n	8000f98 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8000f94:	2320      	movs	r3, #32
 8000f96:	e004      	b.n	8000fa2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8000f98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000f9c:	fab3 f383 	clz	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d105      	bne.n	8000fbc <HAL_ADC_ConfigChannel+0x1a4>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0e9b      	lsrs	r3, r3, #26
 8000fb6:	f003 031f 	and.w	r3, r3, #31
 8000fba:	e018      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1d6>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fc8:	fa93 f3a3 	rbit	r3, r3
 8000fcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8000fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8000fd8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d101      	bne.n	8000fe4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	e004      	b.n	8000fee <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8000fe4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8000fe8:	fab3 f383 	clz	r3, r3
 8000fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d106      	bne.n	8001000 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fba4 	bl	8000748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	2101      	movs	r1, #1
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fb88 	bl	800071c <LL_ADC_GetOffsetChannel>
 800100c:	4603      	mov	r3, r0
 800100e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001012:	2b00      	cmp	r3, #0
 8001014:	d10a      	bne.n	800102c <HAL_ADC_ConfigChannel+0x214>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	2101      	movs	r1, #1
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fb7d 	bl	800071c <LL_ADC_GetOffsetChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	0e9b      	lsrs	r3, r3, #26
 8001026:	f003 021f 	and.w	r2, r3, #31
 800102a:	e01e      	b.n	800106a <HAL_ADC_ConfigChannel+0x252>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2101      	movs	r1, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fb72 	bl	800071c <LL_ADC_GetOffsetChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800103e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001042:	fa93 f3a3 	rbit	r3, r3
 8001046:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 800104a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800104e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001052:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 800105a:	2320      	movs	r3, #32
 800105c:	e004      	b.n	8001068 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800105e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001062:	fab3 f383 	clz	r3, r3
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001072:	2b00      	cmp	r3, #0
 8001074:	d105      	bne.n	8001082 <HAL_ADC_ConfigChannel+0x26a>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	0e9b      	lsrs	r3, r3, #26
 800107c:	f003 031f 	and.w	r3, r3, #31
 8001080:	e018      	b.n	80010b4 <HAL_ADC_ConfigChannel+0x29c>
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800108a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800108e:	fa93 f3a3 	rbit	r3, r3
 8001092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8001096:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800109a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 800109e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d101      	bne.n	80010aa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80010a6:	2320      	movs	r3, #32
 80010a8:	e004      	b.n	80010b4 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80010aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010ae:	fab3 f383 	clz	r3, r3
 80010b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d106      	bne.n	80010c6 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2200      	movs	r2, #0
 80010be:	2101      	movs	r1, #1
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fb41 	bl	8000748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2102      	movs	r1, #2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fb25 	bl	800071c <LL_ADC_GetOffsetChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10a      	bne.n	80010f2 <HAL_ADC_ConfigChannel+0x2da>
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2102      	movs	r1, #2
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fb1a 	bl	800071c <LL_ADC_GetOffsetChannel>
 80010e8:	4603      	mov	r3, r0
 80010ea:	0e9b      	lsrs	r3, r3, #26
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	e01e      	b.n	8001130 <HAL_ADC_ConfigChannel+0x318>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2102      	movs	r1, #2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fb0f 	bl	800071c <LL_ADC_GetOffsetChannel>
 80010fe:	4603      	mov	r3, r0
 8001100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001108:	fa93 f3a3 	rbit	r3, r3
 800110c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001110:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001114:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8001118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001120:	2320      	movs	r3, #32
 8001122:	e004      	b.n	800112e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001124:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001128:	fab3 f383 	clz	r3, r3
 800112c:	b2db      	uxtb	r3, r3
 800112e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001138:	2b00      	cmp	r3, #0
 800113a:	d105      	bne.n	8001148 <HAL_ADC_ConfigChannel+0x330>
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	0e9b      	lsrs	r3, r3, #26
 8001142:	f003 031f 	and.w	r3, r3, #31
 8001146:	e014      	b.n	8001172 <HAL_ADC_ConfigChannel+0x35a>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800114e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001150:	fa93 f3a3 	rbit	r3, r3
 8001154:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8001156:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 800115c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001164:	2320      	movs	r3, #32
 8001166:	e004      	b.n	8001172 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001168:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800116c:	fab3 f383 	clz	r3, r3
 8001170:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001172:	429a      	cmp	r2, r3
 8001174:	d106      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2200      	movs	r2, #0
 800117c:	2102      	movs	r1, #2
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff fae2 	bl	8000748 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2103      	movs	r1, #3
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fac6 	bl	800071c <LL_ADC_GetOffsetChannel>
 8001190:	4603      	mov	r3, r0
 8001192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001196:	2b00      	cmp	r3, #0
 8001198:	d10a      	bne.n	80011b0 <HAL_ADC_ConfigChannel+0x398>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2103      	movs	r1, #3
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fabb 	bl	800071c <LL_ADC_GetOffsetChannel>
 80011a6:	4603      	mov	r3, r0
 80011a8:	0e9b      	lsrs	r3, r3, #26
 80011aa:	f003 021f 	and.w	r2, r3, #31
 80011ae:	e017      	b.n	80011e0 <HAL_ADC_ConfigChannel+0x3c8>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2103      	movs	r1, #3
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff fab0 	bl	800071c <LL_ADC_GetOffsetChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011c2:	fa93 f3a3 	rbit	r3, r3
 80011c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80011c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011ca:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80011cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80011d2:	2320      	movs	r3, #32
 80011d4:	e003      	b.n	80011de <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80011d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011d8:	fab3 f383 	clz	r3, r3
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <HAL_ADC_ConfigChannel+0x3e0>
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	0e9b      	lsrs	r3, r3, #26
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	e011      	b.n	800121c <HAL_ADC_ConfigChannel+0x404>
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001200:	fa93 f3a3 	rbit	r3, r3
 8001204:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8001206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001208:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 800120a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001210:	2320      	movs	r3, #32
 8001212:	e003      	b.n	800121c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001214:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800121c:	429a      	cmp	r2, r3
 800121e:	d106      	bne.n	800122e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	2103      	movs	r1, #3
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff fa8d 	bl	8000748 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff fb8e 	bl	8000954 <LL_ADC_IsEnabled>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	f040 8140 	bne.w	80014c0 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6818      	ldr	r0, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6819      	ldr	r1, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	461a      	mov	r2, r3
 800124e:	f7ff faed 	bl	800082c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	4a8f      	ldr	r2, [pc, #572]	@ (8001494 <HAL_ADC_ConfigChannel+0x67c>)
 8001258:	4293      	cmp	r3, r2
 800125a:	f040 8131 	bne.w	80014c0 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800126a:	2b00      	cmp	r3, #0
 800126c:	d10b      	bne.n	8001286 <HAL_ADC_ConfigChannel+0x46e>
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	0e9b      	lsrs	r3, r3, #26
 8001274:	3301      	adds	r3, #1
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2b09      	cmp	r3, #9
 800127c:	bf94      	ite	ls
 800127e:	2301      	movls	r3, #1
 8001280:	2300      	movhi	r3, #0
 8001282:	b2db      	uxtb	r3, r3
 8001284:	e019      	b.n	80012ba <HAL_ADC_ConfigChannel+0x4a2>
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001296:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001298:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800129a:	2b00      	cmp	r3, #0
 800129c:	d101      	bne.n	80012a2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800129e:	2320      	movs	r3, #32
 80012a0:	e003      	b.n	80012aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 80012a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	f003 031f 	and.w	r3, r3, #31
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	bf94      	ite	ls
 80012b4:	2301      	movls	r3, #1
 80012b6:	2300      	movhi	r3, #0
 80012b8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d079      	beq.n	80013b2 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d107      	bne.n	80012da <HAL_ADC_ConfigChannel+0x4c2>
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	0e9b      	lsrs	r3, r3, #26
 80012d0:	3301      	adds	r3, #1
 80012d2:	069b      	lsls	r3, r3, #26
 80012d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012d8:	e015      	b.n	8001306 <HAL_ADC_ConfigChannel+0x4ee>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80012e2:	fa93 f3a3 	rbit	r3, r3
 80012e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80012e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80012ea:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80012ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80012f2:	2320      	movs	r3, #32
 80012f4:	e003      	b.n	80012fe <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80012f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80012f8:	fab3 f383 	clz	r3, r3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3301      	adds	r3, #1
 8001300:	069b      	lsls	r3, r3, #26
 8001302:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_ADC_ConfigChannel+0x50e>
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	0e9b      	lsrs	r3, r3, #26
 8001318:	3301      	adds	r3, #1
 800131a:	f003 031f 	and.w	r3, r3, #31
 800131e:	2101      	movs	r1, #1
 8001320:	fa01 f303 	lsl.w	r3, r1, r3
 8001324:	e017      	b.n	8001356 <HAL_ADC_ConfigChannel+0x53e>
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800132e:	fa93 f3a3 	rbit	r3, r3
 8001332:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001336:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800133e:	2320      	movs	r3, #32
 8001340:	e003      	b.n	800134a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001344:	fab3 f383 	clz	r3, r3
 8001348:	b2db      	uxtb	r3, r3
 800134a:	3301      	adds	r3, #1
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	ea42 0103 	orr.w	r1, r2, r3
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10a      	bne.n	800137c <HAL_ADC_ConfigChannel+0x564>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	0e9b      	lsrs	r3, r3, #26
 800136c:	3301      	adds	r3, #1
 800136e:	f003 021f 	and.w	r2, r3, #31
 8001372:	4613      	mov	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	4413      	add	r3, r2
 8001378:	051b      	lsls	r3, r3, #20
 800137a:	e018      	b.n	80013ae <HAL_ADC_ConfigChannel+0x596>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800138a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800138c:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800138e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001394:	2320      	movs	r3, #32
 8001396:	e003      	b.n	80013a0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001398:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	3301      	adds	r3, #1
 80013a2:	f003 021f 	and.w	r2, r3, #31
 80013a6:	4613      	mov	r3, r2
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	4413      	add	r3, r2
 80013ac:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013ae:	430b      	orrs	r3, r1
 80013b0:	e081      	b.n	80014b6 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d107      	bne.n	80013ce <HAL_ADC_ConfigChannel+0x5b6>
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	0e9b      	lsrs	r3, r3, #26
 80013c4:	3301      	adds	r3, #1
 80013c6:	069b      	lsls	r3, r3, #26
 80013c8:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013cc:	e015      	b.n	80013fa <HAL_ADC_ConfigChannel+0x5e2>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d6:	fa93 f3a3 	rbit	r3, r3
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80013dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80013e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80013e6:	2320      	movs	r3, #32
 80013e8:	e003      	b.n	80013f2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80013ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013ec:	fab3 f383 	clz	r3, r3
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	3301      	adds	r3, #1
 80013f4:	069b      	lsls	r3, r3, #26
 80013f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001402:	2b00      	cmp	r3, #0
 8001404:	d109      	bne.n	800141a <HAL_ADC_ConfigChannel+0x602>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	0e9b      	lsrs	r3, r3, #26
 800140c:	3301      	adds	r3, #1
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	2101      	movs	r1, #1
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	e017      	b.n	800144a <HAL_ADC_ConfigChannel+0x632>
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	fa93 f3a3 	rbit	r3, r3
 8001426:	61bb      	str	r3, [r7, #24]
  return result;
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001432:	2320      	movs	r3, #32
 8001434:	e003      	b.n	800143e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001436:	6a3b      	ldr	r3, [r7, #32]
 8001438:	fab3 f383 	clz	r3, r3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	3301      	adds	r3, #1
 8001440:	f003 031f 	and.w	r3, r3, #31
 8001444:	2101      	movs	r1, #1
 8001446:	fa01 f303 	lsl.w	r3, r1, r3
 800144a:	ea42 0103 	orr.w	r1, r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001456:	2b00      	cmp	r3, #0
 8001458:	d10d      	bne.n	8001476 <HAL_ADC_ConfigChannel+0x65e>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	0e9b      	lsrs	r3, r3, #26
 8001460:	3301      	adds	r3, #1
 8001462:	f003 021f 	and.w	r2, r3, #31
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	3b1e      	subs	r3, #30
 800146e:	051b      	lsls	r3, r3, #20
 8001470:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001474:	e01e      	b.n	80014b4 <HAL_ADC_ConfigChannel+0x69c>
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	fa93 f3a3 	rbit	r3, r3
 8001482:	60fb      	str	r3, [r7, #12]
  return result;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d104      	bne.n	8001498 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800148e:	2320      	movs	r3, #32
 8001490:	e006      	b.n	80014a0 <HAL_ADC_ConfigChannel+0x688>
 8001492:	bf00      	nop
 8001494:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fab3 f383 	clz	r3, r3
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	f003 021f 	and.w	r2, r3, #31
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	3b1e      	subs	r3, #30
 80014ae:	051b      	lsls	r3, r3, #20
 80014b0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014b4:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff f98b 	bl	80007d6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4b44      	ldr	r3, [pc, #272]	@ (80015d8 <HAL_ADC_ConfigChannel+0x7c0>)
 80014c6:	4013      	ands	r3, r2
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d07a      	beq.n	80015c2 <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014cc:	4843      	ldr	r0, [pc, #268]	@ (80015dc <HAL_ADC_ConfigChannel+0x7c4>)
 80014ce:	f7ff f8f3 	bl	80006b8 <LL_ADC_GetCommonPathInternalCh>
 80014d2:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a41      	ldr	r2, [pc, #260]	@ (80015e0 <HAL_ADC_ConfigChannel+0x7c8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d12c      	bne.n	800153a <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80014e4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d126      	bne.n	800153a <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a3c      	ldr	r2, [pc, #240]	@ (80015e4 <HAL_ADC_ConfigChannel+0x7cc>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d004      	beq.n	8001500 <HAL_ADC_ConfigChannel+0x6e8>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a3b      	ldr	r2, [pc, #236]	@ (80015e8 <HAL_ADC_ConfigChannel+0x7d0>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d15d      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001500:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001504:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001508:	4619      	mov	r1, r3
 800150a:	4834      	ldr	r0, [pc, #208]	@ (80015dc <HAL_ADC_ConfigChannel+0x7c4>)
 800150c:	f7ff f8c1 	bl	8000692 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001510:	4b36      	ldr	r3, [pc, #216]	@ (80015ec <HAL_ADC_ConfigChannel+0x7d4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	099b      	lsrs	r3, r3, #6
 8001516:	4a36      	ldr	r2, [pc, #216]	@ (80015f0 <HAL_ADC_ConfigChannel+0x7d8>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	1c5a      	adds	r2, r3, #1
 8001520:	4613      	mov	r3, r2
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	4413      	add	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800152a:	e002      	b.n	8001532 <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	3b01      	subs	r3, #1
 8001530:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f9      	bne.n	800152c <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001538:	e040      	b.n	80015bc <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a2d      	ldr	r2, [pc, #180]	@ (80015f4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d118      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001544:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001548:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d112      	bne.n	8001576 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a23      	ldr	r2, [pc, #140]	@ (80015e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d004      	beq.n	8001564 <HAL_ADC_ConfigChannel+0x74c>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <HAL_ADC_ConfigChannel+0x7d0>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d12d      	bne.n	80015c0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001564:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001568:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800156c:	4619      	mov	r1, r3
 800156e:	481b      	ldr	r0, [pc, #108]	@ (80015dc <HAL_ADC_ConfigChannel+0x7c4>)
 8001570:	f7ff f88f 	bl	8000692 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001574:	e024      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1f      	ldr	r2, [pc, #124]	@ (80015f8 <HAL_ADC_ConfigChannel+0x7e0>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d120      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001580:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001584:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d11a      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <HAL_ADC_ConfigChannel+0x7cc>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d115      	bne.n	80015c2 <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001596:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800159a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800159e:	4619      	mov	r1, r3
 80015a0:	480e      	ldr	r0, [pc, #56]	@ (80015dc <HAL_ADC_ConfigChannel+0x7c4>)
 80015a2:	f7ff f876 	bl	8000692 <LL_ADC_SetCommonPathInternalCh>
 80015a6:	e00c      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015ac:	f043 0220 	orr.w	r2, r3, #32
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80015ba:	e002      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80015c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80015ca:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	37d8      	adds	r7, #216	@ 0xd8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	80080000 	.word	0x80080000
 80015dc:	50040300 	.word	0x50040300
 80015e0:	c7520000 	.word	0xc7520000
 80015e4:	50040000 	.word	0x50040000
 80015e8:	50040200 	.word	0x50040200
 80015ec:	20000008 	.word	0x20000008
 80015f0:	053e2d63 	.word	0x053e2d63
 80015f4:	cb840000 	.word	0xcb840000
 80015f8:	80000001 	.word	0x80000001

080015fc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff f9a1 	bl	8000954 <LL_ADC_IsEnabled>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d169      	bne.n	80016ec <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	689a      	ldr	r2, [r3, #8]
 800161e:	4b36      	ldr	r3, [pc, #216]	@ (80016f8 <ADC_Enable+0xfc>)
 8001620:	4013      	ands	r3, r2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d00d      	beq.n	8001642 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800162a:	f043 0210 	orr.w	r2, r3, #16
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001636:	f043 0201 	orr.w	r2, r3, #1
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e055      	b.n	80016ee <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff f970 	bl	800092c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800164c:	482b      	ldr	r0, [pc, #172]	@ (80016fc <ADC_Enable+0x100>)
 800164e:	f7ff f833 	bl	80006b8 <LL_ADC_GetCommonPathInternalCh>
 8001652:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001654:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8001658:	2b00      	cmp	r3, #0
 800165a:	d013      	beq.n	8001684 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800165c:	4b28      	ldr	r3, [pc, #160]	@ (8001700 <ADC_Enable+0x104>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	099b      	lsrs	r3, r3, #6
 8001662:	4a28      	ldr	r2, [pc, #160]	@ (8001704 <ADC_Enable+0x108>)
 8001664:	fba2 2303 	umull	r2, r3, r2, r3
 8001668:	099b      	lsrs	r3, r3, #6
 800166a:	1c5a      	adds	r2, r3, #1
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001676:	e002      	b.n	800167e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	3b01      	subs	r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800167e:	68bb      	ldr	r3, [r7, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d1f9      	bne.n	8001678 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8001684:	f7fe ffe6 	bl	8000654 <HAL_GetTick>
 8001688:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800168a:	e028      	b.n	80016de <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff f95f 	bl	8000954 <LL_ADC_IsEnabled>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d104      	bne.n	80016a6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff f943 	bl	800092c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016a6:	f7fe ffd5 	bl	8000654 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d914      	bls.n	80016de <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d00d      	beq.n	80016de <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016c6:	f043 0210 	orr.w	r2, r3, #16
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e007      	b.n	80016ee <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d1cf      	bne.n	800168c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	8000003f 	.word	0x8000003f
 80016fc:	50040300 	.word	0x50040300
 8001700:	20000008 	.word	0x20000008
 8001704:	053e2d63 	.word	0x053e2d63

08001708 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f003 0307 	and.w	r3, r3, #7
 8001716:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800171e:	68ba      	ldr	r2, [r7, #8]
 8001720:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001724:	4013      	ands	r3, r2
 8001726:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800172c:	68bb      	ldr	r3, [r7, #8]
 800172e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001730:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001738:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800173a:	4a04      	ldr	r2, [pc, #16]	@ (800174c <__NVIC_SetPriorityGrouping+0x44>)
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	60d3      	str	r3, [r2, #12]
}
 8001740:	bf00      	nop
 8001742:	3714      	adds	r7, #20
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001754:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <__NVIC_GetPriorityGrouping+0x18>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	0a1b      	lsrs	r3, r3, #8
 800175a:	f003 0307 	and.w	r3, r3, #7
}
 800175e:	4618      	mov	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4603      	mov	r3, r0
 8001774:	6039      	str	r1, [r7, #0]
 8001776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800177c:	2b00      	cmp	r3, #0
 800177e:	db0a      	blt.n	8001796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	b2da      	uxtb	r2, r3
 8001784:	490c      	ldr	r1, [pc, #48]	@ (80017b8 <__NVIC_SetPriority+0x4c>)
 8001786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178a:	0112      	lsls	r2, r2, #4
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	440b      	add	r3, r1
 8001790:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001794:	e00a      	b.n	80017ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	b2da      	uxtb	r2, r3
 800179a:	4908      	ldr	r1, [pc, #32]	@ (80017bc <__NVIC_SetPriority+0x50>)
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	3b04      	subs	r3, #4
 80017a4:	0112      	lsls	r2, r2, #4
 80017a6:	b2d2      	uxtb	r2, r2
 80017a8:	440b      	add	r3, r1
 80017aa:	761a      	strb	r2, [r3, #24]
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr
 80017b8:	e000e100 	.word	0xe000e100
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b089      	sub	sp, #36	@ 0x24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	60f8      	str	r0, [r7, #12]
 80017c8:	60b9      	str	r1, [r7, #8]
 80017ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f1c3 0307 	rsb	r3, r3, #7
 80017da:	2b04      	cmp	r3, #4
 80017dc:	bf28      	it	cs
 80017de:	2304      	movcs	r3, #4
 80017e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3304      	adds	r3, #4
 80017e6:	2b06      	cmp	r3, #6
 80017e8:	d902      	bls.n	80017f0 <NVIC_EncodePriority+0x30>
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	3b03      	subs	r3, #3
 80017ee:	e000      	b.n	80017f2 <NVIC_EncodePriority+0x32>
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	f04f 32ff 	mov.w	r2, #4294967295
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43da      	mvns	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	401a      	ands	r2, r3
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001808:	f04f 31ff 	mov.w	r1, #4294967295
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43d9      	mvns	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	4313      	orrs	r3, r2
         );
}
 800181a:	4618      	mov	r0, r3
 800181c:	3724      	adds	r7, #36	@ 0x24
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
	...

08001828 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3b01      	subs	r3, #1
 8001834:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001838:	d301      	bcc.n	800183e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800183a:	2301      	movs	r3, #1
 800183c:	e00f      	b.n	800185e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183e:	4a0a      	ldr	r2, [pc, #40]	@ (8001868 <SysTick_Config+0x40>)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3b01      	subs	r3, #1
 8001844:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001846:	210f      	movs	r1, #15
 8001848:	f04f 30ff 	mov.w	r0, #4294967295
 800184c:	f7ff ff8e 	bl	800176c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001850:	4b05      	ldr	r3, [pc, #20]	@ (8001868 <SysTick_Config+0x40>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001856:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <SysTick_Config+0x40>)
 8001858:	2207      	movs	r2, #7
 800185a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	e000e010 	.word	0xe000e010

0800186c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff ff47 	bl	8001708 <__NVIC_SetPriorityGrouping>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b086      	sub	sp, #24
 8001886:	af00      	add	r7, sp, #0
 8001888:	4603      	mov	r3, r0
 800188a:	60b9      	str	r1, [r7, #8]
 800188c:	607a      	str	r2, [r7, #4]
 800188e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001894:	f7ff ff5c 	bl	8001750 <__NVIC_GetPriorityGrouping>
 8001898:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	6978      	ldr	r0, [r7, #20]
 80018a0:	f7ff ff8e 	bl	80017c0 <NVIC_EncodePriority>
 80018a4:	4602      	mov	r2, r0
 80018a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff5d 	bl	800176c <__NVIC_SetPriority>
}
 80018b2:	bf00      	nop
 80018b4:	3718      	adds	r7, #24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffb0 	bl	8001828 <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b087      	sub	sp, #28
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018e2:	e17f      	b.n	8001be4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2101      	movs	r1, #1
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	fa01 f303 	lsl.w	r3, r1, r3
 80018f0:	4013      	ands	r3, r2
 80018f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f000 8171 	beq.w	8001bde <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	2b01      	cmp	r3, #1
 8001906:	d005      	beq.n	8001914 <HAL_GPIO_Init+0x40>
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d130      	bne.n	8001976 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	2203      	movs	r2, #3
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	43db      	mvns	r3, r3
 8001926:	693a      	ldr	r2, [r7, #16]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800194a:	2201      	movs	r2, #1
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	091b      	lsrs	r3, r3, #4
 8001960:	f003 0201 	and.w	r2, r3, #1
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b03      	cmp	r3, #3
 8001980:	d118      	bne.n	80019b4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001986:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001988:	2201      	movs	r2, #1
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	f003 0201 	and.w	r2, r3, #1
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d017      	beq.n	80019f0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f003 0303 	and.w	r3, r3, #3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d123      	bne.n	8001a44 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	08da      	lsrs	r2, r3, #3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3208      	adds	r2, #8
 8001a04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	220f      	movs	r2, #15
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	08da      	lsrs	r2, r3, #3
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3208      	adds	r2, #8
 8001a3e:	6939      	ldr	r1, [r7, #16]
 8001a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f003 0203 	and.w	r2, r3, #3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 80ac 	beq.w	8001bde <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b5f      	ldr	r3, [pc, #380]	@ (8001c04 <HAL_GPIO_Init+0x330>)
 8001a88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a8a:	4a5e      	ldr	r2, [pc, #376]	@ (8001c04 <HAL_GPIO_Init+0x330>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a92:	4b5c      	ldr	r3, [pc, #368]	@ (8001c04 <HAL_GPIO_Init+0x330>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a9e:	4a5a      	ldr	r2, [pc, #360]	@ (8001c08 <HAL_GPIO_Init+0x334>)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001ac8:	d025      	beq.n	8001b16 <HAL_GPIO_Init+0x242>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4f      	ldr	r2, [pc, #316]	@ (8001c0c <HAL_GPIO_Init+0x338>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01f      	beq.n	8001b12 <HAL_GPIO_Init+0x23e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c10 <HAL_GPIO_Init+0x33c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x23a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c14 <HAL_GPIO_Init+0x340>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x236>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c18 <HAL_GPIO_Init+0x344>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x232>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	@ (8001c1c <HAL_GPIO_Init+0x348>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x22e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a4a      	ldr	r2, [pc, #296]	@ (8001c20 <HAL_GPIO_Init+0x34c>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x22a>
 8001afa:	2306      	movs	r3, #6
 8001afc:	e00c      	b.n	8001b18 <HAL_GPIO_Init+0x244>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00a      	b.n	8001b18 <HAL_GPIO_Init+0x244>
 8001b02:	2305      	movs	r3, #5
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x244>
 8001b06:	2304      	movs	r3, #4
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x244>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x244>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x244>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x244>
 8001b16:	2300      	movs	r3, #0
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	f002 0203 	and.w	r2, r2, #3
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	4093      	lsls	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b28:	4937      	ldr	r1, [pc, #220]	@ (8001c08 <HAL_GPIO_Init+0x334>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3302      	adds	r3, #2
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b36:	4b3b      	ldr	r3, [pc, #236]	@ (8001c24 <HAL_GPIO_Init+0x350>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b5a:	4a32      	ldr	r2, [pc, #200]	@ (8001c24 <HAL_GPIO_Init+0x350>)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b60:	4b30      	ldr	r3, [pc, #192]	@ (8001c24 <HAL_GPIO_Init+0x350>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b84:	4a27      	ldr	r2, [pc, #156]	@ (8001c24 <HAL_GPIO_Init+0x350>)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b8a:	4b26      	ldr	r3, [pc, #152]	@ (8001c24 <HAL_GPIO_Init+0x350>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	43db      	mvns	r3, r3
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	4013      	ands	r3, r2
 8001b98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bae:	4a1d      	ldr	r2, [pc, #116]	@ (8001c24 <HAL_GPIO_Init+0x350>)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_GPIO_Init+0x350>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d003      	beq.n	8001bd8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bd8:	4a12      	ldr	r2, [pc, #72]	@ (8001c24 <HAL_GPIO_Init+0x350>)
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	3301      	adds	r3, #1
 8001be2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	f47f ae78 	bne.w	80018e4 <HAL_GPIO_Init+0x10>
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	371c      	adds	r7, #28
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40010000 	.word	0x40010000
 8001c0c:	48000400 	.word	0x48000400
 8001c10:	48000800 	.word	0x48000800
 8001c14:	48000c00 	.word	0x48000c00
 8001c18:	48001000 	.word	0x48001000
 8001c1c:	48001400 	.word	0x48001400
 8001c20:	48001800 	.word	0x48001800
 8001c24:	40010400 	.word	0x40010400

08001c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c36:	4b3e      	ldr	r3, [pc, #248]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c40:	4b3b      	ldr	r3, [pc, #236]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_RCC_GetSysClockFreq+0x34>
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b0c      	cmp	r3, #12
 8001c54:	d121      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d11e      	bne.n	8001c9a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c5c:	4b34      	ldr	r3, [pc, #208]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f003 0308 	and.w	r3, r3, #8
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c68:	4b31      	ldr	r3, [pc, #196]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e005      	b.n	8001c84 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c78:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 030f 	and.w	r3, r3, #15
 8001c82:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001c84:	4a2b      	ldr	r2, [pc, #172]	@ (8001d34 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d10d      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c98:	e00a      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	2b04      	cmp	r3, #4
 8001c9e:	d102      	bne.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ca0:	4b25      	ldr	r3, [pc, #148]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	e004      	b.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cac:	4b23      	ldr	r3, [pc, #140]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b0c      	cmp	r3, #12
 8001cb4:	d134      	bne.n	8001d20 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d003      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0xa6>
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	2b03      	cmp	r3, #3
 8001cca:	d003      	beq.n	8001cd4 <HAL_RCC_GetSysClockFreq+0xac>
 8001ccc:	e005      	b.n	8001cda <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	@ (8001d38 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cd0:	617b      	str	r3, [r7, #20]
      break;
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x114>)
 8001cd6:	617b      	str	r3, [r7, #20]
      break;
 8001cd8:	e002      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	617b      	str	r3, [r7, #20]
      break;
 8001cde:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ce0:	4b13      	ldr	r3, [pc, #76]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	091b      	lsrs	r3, r3, #4
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	3301      	adds	r3, #1
 8001cec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cee:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	0a1b      	lsrs	r3, r3, #8
 8001cf4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001cf8:	697a      	ldr	r2, [r7, #20]
 8001cfa:	fb03 f202 	mul.w	r2, r3, r2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d04:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	@ (8001d30 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	0e5b      	lsrs	r3, r3, #25
 8001d0c:	f003 0303 	and.w	r3, r3, #3
 8001d10:	3301      	adds	r3, #1
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d20:	69bb      	ldr	r3, [r7, #24]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3724      	adds	r7, #36	@ 0x24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08003bd4 	.word	0x08003bd4
 8001d38:	00f42400 	.word	0x00f42400
 8001d3c:	007a1200 	.word	0x007a1200

08001d40 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20000008 	.word	0x20000008

08001d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d5c:	f7ff fff0 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d60:	4602      	mov	r2, r0
 8001d62:	4b06      	ldr	r3, [pc, #24]	@ (8001d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	4904      	ldr	r1, [pc, #16]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d6e:	5ccb      	ldrb	r3, [r1, r3]
 8001d70:	f003 031f 	and.w	r3, r3, #31
 8001d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08003bcc 	.word	0x08003bcc

08001d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d88:	f7ff ffda 	bl	8001d40 <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0adb      	lsrs	r3, r3, #11
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4904      	ldr	r1, [pc, #16]	@ (8001dac <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	f003 031f 	and.w	r3, r3, #31
 8001da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40021000 	.word	0x40021000
 8001dac:	08003bcc 	.word	0x08003bcc

08001db0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e040      	b.n	8001e44 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d106      	bne.n	8001dd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 f83a 	bl	8001e4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2224      	movs	r2, #36	@ 0x24
 8001ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fb74 	bl	80024e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f8b9 	bl	8001f74 <UART_SetConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e01b      	b.n	8001e44 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689a      	ldr	r2, [r3, #8]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 fbf3 	bl	8002628 <UART_CheckIdleState>
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08a      	sub	sp, #40	@ 0x28
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d177      	bne.n	8001f68 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <HAL_UART_Transmit+0x24>
 8001e7e:	88fb      	ldrh	r3, [r7, #6]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e070      	b.n	8001f6a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2221      	movs	r2, #33	@ 0x21
 8001e94:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e96:	f7fe fbdd 	bl	8000654 <HAL_GetTick>
 8001e9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	88fa      	ldrh	r2, [r7, #6]
 8001ea0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	88fa      	ldrh	r2, [r7, #6]
 8001ea8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001eb4:	d108      	bne.n	8001ec8 <HAL_UART_Transmit+0x68>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d104      	bne.n	8001ec8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	61bb      	str	r3, [r7, #24]
 8001ec6:	e003      	b.n	8001ed0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ed0:	e02f      	b.n	8001f32 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	9300      	str	r3, [sp, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2180      	movs	r1, #128	@ 0x80
 8001edc:	68f8      	ldr	r0, [r7, #12]
 8001ede:	f000 fc4b 	bl	8002778 <UART_WaitOnFlagUntilTimeout>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d004      	beq.n	8001ef2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e03b      	b.n	8001f6a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d10b      	bne.n	8001f10 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	881a      	ldrh	r2, [r3, #0]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f04:	b292      	uxth	r2, r2
 8001f06:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	e007      	b.n	8001f20 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1c9      	bne.n	8001ed2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	2200      	movs	r2, #0
 8001f46:	2140      	movs	r1, #64	@ 0x40
 8001f48:	68f8      	ldr	r0, [r7, #12]
 8001f4a:	f000 fc15 	bl	8002778 <UART_WaitOnFlagUntilTimeout>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d004      	beq.n	8001f5e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2220      	movs	r2, #32
 8001f58:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e005      	b.n	8001f6a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2220      	movs	r2, #32
 8001f62:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8001f64:	2300      	movs	r3, #0
 8001f66:	e000      	b.n	8001f6a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8001f68:	2302      	movs	r3, #2
  }
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f78:	b08a      	sub	sp, #40	@ 0x28
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	431a      	orrs	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	69db      	ldr	r3, [r3, #28]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4ba4      	ldr	r3, [pc, #656]	@ (8002234 <UART_SetConfig+0x2c0>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	6812      	ldr	r2, [r2, #0]
 8001faa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001fac:	430b      	orrs	r3, r1
 8001fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a99      	ldr	r2, [pc, #612]	@ (8002238 <UART_SetConfig+0x2c4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d004      	beq.n	8001fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a90      	ldr	r2, [pc, #576]	@ (800223c <UART_SetConfig+0x2c8>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d126      	bne.n	800204c <UART_SetConfig+0xd8>
 8001ffe:	4b90      	ldr	r3, [pc, #576]	@ (8002240 <UART_SetConfig+0x2cc>)
 8002000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b03      	cmp	r3, #3
 800200a:	d81b      	bhi.n	8002044 <UART_SetConfig+0xd0>
 800200c:	a201      	add	r2, pc, #4	@ (adr r2, 8002014 <UART_SetConfig+0xa0>)
 800200e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002012:	bf00      	nop
 8002014:	08002025 	.word	0x08002025
 8002018:	08002035 	.word	0x08002035
 800201c:	0800202d 	.word	0x0800202d
 8002020:	0800203d 	.word	0x0800203d
 8002024:	2301      	movs	r3, #1
 8002026:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800202a:	e116      	b.n	800225a <UART_SetConfig+0x2e6>
 800202c:	2302      	movs	r3, #2
 800202e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002032:	e112      	b.n	800225a <UART_SetConfig+0x2e6>
 8002034:	2304      	movs	r3, #4
 8002036:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800203a:	e10e      	b.n	800225a <UART_SetConfig+0x2e6>
 800203c:	2308      	movs	r3, #8
 800203e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002042:	e10a      	b.n	800225a <UART_SetConfig+0x2e6>
 8002044:	2310      	movs	r3, #16
 8002046:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800204a:	e106      	b.n	800225a <UART_SetConfig+0x2e6>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a7c      	ldr	r2, [pc, #496]	@ (8002244 <UART_SetConfig+0x2d0>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d138      	bne.n	80020c8 <UART_SetConfig+0x154>
 8002056:	4b7a      	ldr	r3, [pc, #488]	@ (8002240 <UART_SetConfig+0x2cc>)
 8002058:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800205c:	f003 030c 	and.w	r3, r3, #12
 8002060:	2b0c      	cmp	r3, #12
 8002062:	d82d      	bhi.n	80020c0 <UART_SetConfig+0x14c>
 8002064:	a201      	add	r2, pc, #4	@ (adr r2, 800206c <UART_SetConfig+0xf8>)
 8002066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800206a:	bf00      	nop
 800206c:	080020a1 	.word	0x080020a1
 8002070:	080020c1 	.word	0x080020c1
 8002074:	080020c1 	.word	0x080020c1
 8002078:	080020c1 	.word	0x080020c1
 800207c:	080020b1 	.word	0x080020b1
 8002080:	080020c1 	.word	0x080020c1
 8002084:	080020c1 	.word	0x080020c1
 8002088:	080020c1 	.word	0x080020c1
 800208c:	080020a9 	.word	0x080020a9
 8002090:	080020c1 	.word	0x080020c1
 8002094:	080020c1 	.word	0x080020c1
 8002098:	080020c1 	.word	0x080020c1
 800209c:	080020b9 	.word	0x080020b9
 80020a0:	2300      	movs	r3, #0
 80020a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020a6:	e0d8      	b.n	800225a <UART_SetConfig+0x2e6>
 80020a8:	2302      	movs	r3, #2
 80020aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020ae:	e0d4      	b.n	800225a <UART_SetConfig+0x2e6>
 80020b0:	2304      	movs	r3, #4
 80020b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020b6:	e0d0      	b.n	800225a <UART_SetConfig+0x2e6>
 80020b8:	2308      	movs	r3, #8
 80020ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020be:	e0cc      	b.n	800225a <UART_SetConfig+0x2e6>
 80020c0:	2310      	movs	r3, #16
 80020c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020c6:	e0c8      	b.n	800225a <UART_SetConfig+0x2e6>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a5e      	ldr	r2, [pc, #376]	@ (8002248 <UART_SetConfig+0x2d4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d125      	bne.n	800211e <UART_SetConfig+0x1aa>
 80020d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002240 <UART_SetConfig+0x2cc>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80020dc:	2b30      	cmp	r3, #48	@ 0x30
 80020de:	d016      	beq.n	800210e <UART_SetConfig+0x19a>
 80020e0:	2b30      	cmp	r3, #48	@ 0x30
 80020e2:	d818      	bhi.n	8002116 <UART_SetConfig+0x1a2>
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d00a      	beq.n	80020fe <UART_SetConfig+0x18a>
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d814      	bhi.n	8002116 <UART_SetConfig+0x1a2>
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <UART_SetConfig+0x182>
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d008      	beq.n	8002106 <UART_SetConfig+0x192>
 80020f4:	e00f      	b.n	8002116 <UART_SetConfig+0x1a2>
 80020f6:	2300      	movs	r3, #0
 80020f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80020fc:	e0ad      	b.n	800225a <UART_SetConfig+0x2e6>
 80020fe:	2302      	movs	r3, #2
 8002100:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002104:	e0a9      	b.n	800225a <UART_SetConfig+0x2e6>
 8002106:	2304      	movs	r3, #4
 8002108:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800210c:	e0a5      	b.n	800225a <UART_SetConfig+0x2e6>
 800210e:	2308      	movs	r3, #8
 8002110:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002114:	e0a1      	b.n	800225a <UART_SetConfig+0x2e6>
 8002116:	2310      	movs	r3, #16
 8002118:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800211c:	e09d      	b.n	800225a <UART_SetConfig+0x2e6>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a4a      	ldr	r2, [pc, #296]	@ (800224c <UART_SetConfig+0x2d8>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d125      	bne.n	8002174 <UART_SetConfig+0x200>
 8002128:	4b45      	ldr	r3, [pc, #276]	@ (8002240 <UART_SetConfig+0x2cc>)
 800212a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800212e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002132:	2bc0      	cmp	r3, #192	@ 0xc0
 8002134:	d016      	beq.n	8002164 <UART_SetConfig+0x1f0>
 8002136:	2bc0      	cmp	r3, #192	@ 0xc0
 8002138:	d818      	bhi.n	800216c <UART_SetConfig+0x1f8>
 800213a:	2b80      	cmp	r3, #128	@ 0x80
 800213c:	d00a      	beq.n	8002154 <UART_SetConfig+0x1e0>
 800213e:	2b80      	cmp	r3, #128	@ 0x80
 8002140:	d814      	bhi.n	800216c <UART_SetConfig+0x1f8>
 8002142:	2b00      	cmp	r3, #0
 8002144:	d002      	beq.n	800214c <UART_SetConfig+0x1d8>
 8002146:	2b40      	cmp	r3, #64	@ 0x40
 8002148:	d008      	beq.n	800215c <UART_SetConfig+0x1e8>
 800214a:	e00f      	b.n	800216c <UART_SetConfig+0x1f8>
 800214c:	2300      	movs	r3, #0
 800214e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002152:	e082      	b.n	800225a <UART_SetConfig+0x2e6>
 8002154:	2302      	movs	r3, #2
 8002156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800215a:	e07e      	b.n	800225a <UART_SetConfig+0x2e6>
 800215c:	2304      	movs	r3, #4
 800215e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002162:	e07a      	b.n	800225a <UART_SetConfig+0x2e6>
 8002164:	2308      	movs	r3, #8
 8002166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800216a:	e076      	b.n	800225a <UART_SetConfig+0x2e6>
 800216c:	2310      	movs	r3, #16
 800216e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002172:	e072      	b.n	800225a <UART_SetConfig+0x2e6>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a35      	ldr	r2, [pc, #212]	@ (8002250 <UART_SetConfig+0x2dc>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d12a      	bne.n	80021d4 <UART_SetConfig+0x260>
 800217e:	4b30      	ldr	r3, [pc, #192]	@ (8002240 <UART_SetConfig+0x2cc>)
 8002180:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002184:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002188:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800218c:	d01a      	beq.n	80021c4 <UART_SetConfig+0x250>
 800218e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002192:	d81b      	bhi.n	80021cc <UART_SetConfig+0x258>
 8002194:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002198:	d00c      	beq.n	80021b4 <UART_SetConfig+0x240>
 800219a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800219e:	d815      	bhi.n	80021cc <UART_SetConfig+0x258>
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d003      	beq.n	80021ac <UART_SetConfig+0x238>
 80021a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021a8:	d008      	beq.n	80021bc <UART_SetConfig+0x248>
 80021aa:	e00f      	b.n	80021cc <UART_SetConfig+0x258>
 80021ac:	2300      	movs	r3, #0
 80021ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021b2:	e052      	b.n	800225a <UART_SetConfig+0x2e6>
 80021b4:	2302      	movs	r3, #2
 80021b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021ba:	e04e      	b.n	800225a <UART_SetConfig+0x2e6>
 80021bc:	2304      	movs	r3, #4
 80021be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021c2:	e04a      	b.n	800225a <UART_SetConfig+0x2e6>
 80021c4:	2308      	movs	r3, #8
 80021c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021ca:	e046      	b.n	800225a <UART_SetConfig+0x2e6>
 80021cc:	2310      	movs	r3, #16
 80021ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80021d2:	e042      	b.n	800225a <UART_SetConfig+0x2e6>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a17      	ldr	r2, [pc, #92]	@ (8002238 <UART_SetConfig+0x2c4>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d13a      	bne.n	8002254 <UART_SetConfig+0x2e0>
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <UART_SetConfig+0x2cc>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021e4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80021e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80021ec:	d01a      	beq.n	8002224 <UART_SetConfig+0x2b0>
 80021ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80021f2:	d81b      	bhi.n	800222c <UART_SetConfig+0x2b8>
 80021f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021f8:	d00c      	beq.n	8002214 <UART_SetConfig+0x2a0>
 80021fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80021fe:	d815      	bhi.n	800222c <UART_SetConfig+0x2b8>
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <UART_SetConfig+0x298>
 8002204:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002208:	d008      	beq.n	800221c <UART_SetConfig+0x2a8>
 800220a:	e00f      	b.n	800222c <UART_SetConfig+0x2b8>
 800220c:	2300      	movs	r3, #0
 800220e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002212:	e022      	b.n	800225a <UART_SetConfig+0x2e6>
 8002214:	2302      	movs	r3, #2
 8002216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800221a:	e01e      	b.n	800225a <UART_SetConfig+0x2e6>
 800221c:	2304      	movs	r3, #4
 800221e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002222:	e01a      	b.n	800225a <UART_SetConfig+0x2e6>
 8002224:	2308      	movs	r3, #8
 8002226:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800222a:	e016      	b.n	800225a <UART_SetConfig+0x2e6>
 800222c:	2310      	movs	r3, #16
 800222e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002232:	e012      	b.n	800225a <UART_SetConfig+0x2e6>
 8002234:	efff69f3 	.word	0xefff69f3
 8002238:	40008000 	.word	0x40008000
 800223c:	40013800 	.word	0x40013800
 8002240:	40021000 	.word	0x40021000
 8002244:	40004400 	.word	0x40004400
 8002248:	40004800 	.word	0x40004800
 800224c:	40004c00 	.word	0x40004c00
 8002250:	40005000 	.word	0x40005000
 8002254:	2310      	movs	r3, #16
 8002256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a9f      	ldr	r2, [pc, #636]	@ (80024dc <UART_SetConfig+0x568>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d17a      	bne.n	800235a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002264:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002268:	2b08      	cmp	r3, #8
 800226a:	d824      	bhi.n	80022b6 <UART_SetConfig+0x342>
 800226c:	a201      	add	r2, pc, #4	@ (adr r2, 8002274 <UART_SetConfig+0x300>)
 800226e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002272:	bf00      	nop
 8002274:	08002299 	.word	0x08002299
 8002278:	080022b7 	.word	0x080022b7
 800227c:	080022a1 	.word	0x080022a1
 8002280:	080022b7 	.word	0x080022b7
 8002284:	080022a7 	.word	0x080022a7
 8002288:	080022b7 	.word	0x080022b7
 800228c:	080022b7 	.word	0x080022b7
 8002290:	080022b7 	.word	0x080022b7
 8002294:	080022af 	.word	0x080022af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002298:	f7ff fd5e 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 800229c:	61f8      	str	r0, [r7, #28]
        break;
 800229e:	e010      	b.n	80022c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80022a0:	4b8f      	ldr	r3, [pc, #572]	@ (80024e0 <UART_SetConfig+0x56c>)
 80022a2:	61fb      	str	r3, [r7, #28]
        break;
 80022a4:	e00d      	b.n	80022c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80022a6:	f7ff fcbf 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80022aa:	61f8      	str	r0, [r7, #28]
        break;
 80022ac:	e009      	b.n	80022c2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80022b2:	61fb      	str	r3, [r7, #28]
        break;
 80022b4:	e005      	b.n	80022c2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80022c0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80fb 	beq.w	80024c0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685a      	ldr	r2, [r3, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d305      	bcc.n	80022e6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80022e0:	69fa      	ldr	r2, [r7, #28]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d903      	bls.n	80022ee <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80022ec:	e0e8      	b.n	80024c0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	2200      	movs	r2, #0
 80022f2:	461c      	mov	r4, r3
 80022f4:	4615      	mov	r5, r2
 80022f6:	f04f 0200 	mov.w	r2, #0
 80022fa:	f04f 0300 	mov.w	r3, #0
 80022fe:	022b      	lsls	r3, r5, #8
 8002300:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002304:	0222      	lsls	r2, r4, #8
 8002306:	68f9      	ldr	r1, [r7, #12]
 8002308:	6849      	ldr	r1, [r1, #4]
 800230a:	0849      	lsrs	r1, r1, #1
 800230c:	2000      	movs	r0, #0
 800230e:	4688      	mov	r8, r1
 8002310:	4681      	mov	r9, r0
 8002312:	eb12 0a08 	adds.w	sl, r2, r8
 8002316:	eb43 0b09 	adc.w	fp, r3, r9
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	607a      	str	r2, [r7, #4]
 8002324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002328:	4650      	mov	r0, sl
 800232a:	4659      	mov	r1, fp
 800232c:	f7fd ffa0 	bl	8000270 <__aeabi_uldivmod>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	4613      	mov	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800233e:	d308      	bcc.n	8002352 <UART_SetConfig+0x3de>
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002346:	d204      	bcs.n	8002352 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	e0b6      	b.n	80024c0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002358:	e0b2      	b.n	80024c0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002362:	d15e      	bne.n	8002422 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8002364:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002368:	2b08      	cmp	r3, #8
 800236a:	d828      	bhi.n	80023be <UART_SetConfig+0x44a>
 800236c:	a201      	add	r2, pc, #4	@ (adr r2, 8002374 <UART_SetConfig+0x400>)
 800236e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002372:	bf00      	nop
 8002374:	08002399 	.word	0x08002399
 8002378:	080023a1 	.word	0x080023a1
 800237c:	080023a9 	.word	0x080023a9
 8002380:	080023bf 	.word	0x080023bf
 8002384:	080023af 	.word	0x080023af
 8002388:	080023bf 	.word	0x080023bf
 800238c:	080023bf 	.word	0x080023bf
 8002390:	080023bf 	.word	0x080023bf
 8002394:	080023b7 	.word	0x080023b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002398:	f7ff fcde 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 800239c:	61f8      	str	r0, [r7, #28]
        break;
 800239e:	e014      	b.n	80023ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80023a0:	f7ff fcf0 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 80023a4:	61f8      	str	r0, [r7, #28]
        break;
 80023a6:	e010      	b.n	80023ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80023a8:	4b4d      	ldr	r3, [pc, #308]	@ (80024e0 <UART_SetConfig+0x56c>)
 80023aa:	61fb      	str	r3, [r7, #28]
        break;
 80023ac:	e00d      	b.n	80023ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80023ae:	f7ff fc3b 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 80023b2:	61f8      	str	r0, [r7, #28]
        break;
 80023b4:	e009      	b.n	80023ca <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80023b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80023ba:	61fb      	str	r3, [r7, #28]
        break;
 80023bc:	e005      	b.n	80023ca <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80023be:	2300      	movs	r3, #0
 80023c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80023c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d077      	beq.n	80024c0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005a      	lsls	r2, r3, #1
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	085b      	lsrs	r3, r3, #1
 80023da:	441a      	add	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b0f      	cmp	r3, #15
 80023ea:	d916      	bls.n	800241a <UART_SetConfig+0x4a6>
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023f2:	d212      	bcs.n	800241a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	f023 030f 	bic.w	r3, r3, #15
 80023fc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	085b      	lsrs	r3, r3, #1
 8002402:	b29b      	uxth	r3, r3
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	b29a      	uxth	r2, r3
 800240a:	8afb      	ldrh	r3, [r7, #22]
 800240c:	4313      	orrs	r3, r2
 800240e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	8afa      	ldrh	r2, [r7, #22]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	e052      	b.n	80024c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002420:	e04e      	b.n	80024c0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002422:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002426:	2b08      	cmp	r3, #8
 8002428:	d827      	bhi.n	800247a <UART_SetConfig+0x506>
 800242a:	a201      	add	r2, pc, #4	@ (adr r2, 8002430 <UART_SetConfig+0x4bc>)
 800242c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002430:	08002455 	.word	0x08002455
 8002434:	0800245d 	.word	0x0800245d
 8002438:	08002465 	.word	0x08002465
 800243c:	0800247b 	.word	0x0800247b
 8002440:	0800246b 	.word	0x0800246b
 8002444:	0800247b 	.word	0x0800247b
 8002448:	0800247b 	.word	0x0800247b
 800244c:	0800247b 	.word	0x0800247b
 8002450:	08002473 	.word	0x08002473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002454:	f7ff fc80 	bl	8001d58 <HAL_RCC_GetPCLK1Freq>
 8002458:	61f8      	str	r0, [r7, #28]
        break;
 800245a:	e014      	b.n	8002486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800245c:	f7ff fc92 	bl	8001d84 <HAL_RCC_GetPCLK2Freq>
 8002460:	61f8      	str	r0, [r7, #28]
        break;
 8002462:	e010      	b.n	8002486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002464:	4b1e      	ldr	r3, [pc, #120]	@ (80024e0 <UART_SetConfig+0x56c>)
 8002466:	61fb      	str	r3, [r7, #28]
        break;
 8002468:	e00d      	b.n	8002486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800246a:	f7ff fbdd 	bl	8001c28 <HAL_RCC_GetSysClockFreq>
 800246e:	61f8      	str	r0, [r7, #28]
        break;
 8002470:	e009      	b.n	8002486 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002476:	61fb      	str	r3, [r7, #28]
        break;
 8002478:	e005      	b.n	8002486 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002484:	bf00      	nop
    }

    if (pclk != 0U)
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d019      	beq.n	80024c0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	085a      	lsrs	r2, r3, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	441a      	add	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	fbb2 f3f3 	udiv	r3, r2, r3
 800249e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	d909      	bls.n	80024ba <UART_SetConfig+0x546>
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ac:	d205      	bcs.n	80024ba <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	b29a      	uxth	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	60da      	str	r2, [r3, #12]
 80024b8:	e002      	b.n	80024c0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80024cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3728      	adds	r7, #40	@ 0x28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024da:	bf00      	nop
 80024dc:	40008000 	.word	0x40008000
 80024e0:	00f42400 	.word	0x00f42400

080024e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	f003 0308 	and.w	r3, r3, #8
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	430a      	orrs	r2, r1
 8002572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	f003 0310 	and.w	r3, r3, #16
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800259a:	f003 0320 	and.w	r3, r3, #32
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	430a      	orrs	r2, r1
 80025b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d01a      	beq.n	80025fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80025e2:	d10a      	bne.n	80025fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	430a      	orrs	r2, r1
 80025f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	430a      	orrs	r2, r1
 800261a:	605a      	str	r2, [r3, #4]
  }
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b098      	sub	sp, #96	@ 0x60
 800262c:	af02      	add	r7, sp, #8
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002638:	f7fe f80c 	bl	8000654 <HAL_GetTick>
 800263c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b08      	cmp	r3, #8
 800264a:	d12e      	bne.n	80026aa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800264c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002654:	2200      	movs	r2, #0
 8002656:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f88c 	bl	8002778 <UART_WaitOnFlagUntilTimeout>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d021      	beq.n	80026aa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800266c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266e:	e853 3f00 	ldrex	r3, [r3]
 8002672:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002676:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800267a:	653b      	str	r3, [r7, #80]	@ 0x50
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002684:	647b      	str	r3, [r7, #68]	@ 0x44
 8002686:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002688:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800268a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800268c:	e841 2300 	strex	r3, r2, [r1]
 8002690:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e6      	bne.n	8002666 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e062      	b.n	8002770 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0304 	and.w	r3, r3, #4
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d149      	bne.n	800274c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80026b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026c0:	2200      	movs	r2, #0
 80026c2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f856 	bl	8002778 <UART_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d03c      	beq.n	800274c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026da:	e853 3f00 	ldrex	r3, [r3]
 80026de:	623b      	str	r3, [r7, #32]
   return(result);
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80026f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80026f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026f8:	e841 2300 	strex	r3, r2, [r1]
 80026fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e6      	bne.n	80026d2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	3308      	adds	r3, #8
 800270a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	e853 3f00 	ldrex	r3, [r3]
 8002712:	60fb      	str	r3, [r7, #12]
   return(result);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f023 0301 	bic.w	r3, r3, #1
 800271a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	3308      	adds	r3, #8
 8002722:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002724:	61fa      	str	r2, [r7, #28]
 8002726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002728:	69b9      	ldr	r1, [r7, #24]
 800272a:	69fa      	ldr	r2, [r7, #28]
 800272c:	e841 2300 	strex	r3, r2, [r1]
 8002730:	617b      	str	r3, [r7, #20]
   return(result);
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d1e5      	bne.n	8002704 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e011      	b.n	8002770 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2220      	movs	r2, #32
 8002750:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3758      	adds	r7, #88	@ 0x58
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	603b      	str	r3, [r7, #0]
 8002784:	4613      	mov	r3, r2
 8002786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002788:	e049      	b.n	800281e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002790:	d045      	beq.n	800281e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002792:	f7fd ff5f 	bl	8000654 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d302      	bcc.n	80027a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e048      	b.n	800283e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d031      	beq.n	800281e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	f003 0308 	and.w	r3, r3, #8
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	d110      	bne.n	80027ea <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2208      	movs	r2, #8
 80027ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f838 	bl	8002846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2208      	movs	r2, #8
 80027da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e029      	b.n	800283e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69db      	ldr	r3, [r3, #28]
 80027f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80027f8:	d111      	bne.n	800281e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002802:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f000 f81e 	bl	8002846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2220      	movs	r2, #32
 800280e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e00f      	b.n	800283e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	69da      	ldr	r2, [r3, #28]
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	4013      	ands	r3, r2
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	bf0c      	ite	eq
 800282e:	2301      	moveq	r3, #1
 8002830:	2300      	movne	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	79fb      	ldrb	r3, [r7, #7]
 8002838:	429a      	cmp	r2, r3
 800283a:	d0a6      	beq.n	800278a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002846:	b480      	push	{r7}
 8002848:	b095      	sub	sp, #84	@ 0x54
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002856:	e853 3f00 	ldrex	r3, [r3]
 800285a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800285c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800285e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800286c:	643b      	str	r3, [r7, #64]	@ 0x40
 800286e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002870:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002874:	e841 2300 	strex	r3, r2, [r1]
 8002878:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800287a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e6      	bne.n	800284e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3308      	adds	r3, #8
 8002886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	e853 3f00 	ldrex	r3, [r3]
 800288e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3308      	adds	r3, #8
 800289e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80028a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80028a8:	e841 2300 	strex	r3, r2, [r1]
 80028ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80028ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e5      	bne.n	8002880 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d118      	bne.n	80028ee <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	e853 3f00 	ldrex	r3, [r3]
 80028c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f023 0310 	bic.w	r3, r3, #16
 80028d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028da:	61bb      	str	r3, [r7, #24]
 80028dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028de:	6979      	ldr	r1, [r7, #20]
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	e841 2300 	strex	r3, r2, [r1]
 80028e6:	613b      	str	r3, [r7, #16]
   return(result);
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1e6      	bne.n	80028bc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2220      	movs	r2, #32
 80028f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8002902:	bf00      	nop
 8002904:	3754      	adds	r7, #84	@ 0x54
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
	...

08002910 <__NVIC_EnableIRQ>:
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	4603      	mov	r3, r0
 8002918:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	2b00      	cmp	r3, #0
 8002920:	db0b      	blt.n	800293a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002922:	79fb      	ldrb	r3, [r7, #7]
 8002924:	f003 021f 	and.w	r2, r3, #31
 8002928:	4907      	ldr	r1, [pc, #28]	@ (8002948 <__NVIC_EnableIRQ+0x38>)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	2001      	movs	r0, #1
 8002932:	fa00 f202 	lsl.w	r2, r0, r2
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000e100 	.word	0xe000e100

0800294c <__NVIC_SetPriority>:
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	6039      	str	r1, [r7, #0]
 8002956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	2b00      	cmp	r3, #0
 800295e:	db0a      	blt.n	8002976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2da      	uxtb	r2, r3
 8002964:	490c      	ldr	r1, [pc, #48]	@ (8002998 <__NVIC_SetPriority+0x4c>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	0112      	lsls	r2, r2, #4
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	440b      	add	r3, r1
 8002970:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002974:	e00a      	b.n	800298c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4908      	ldr	r1, [pc, #32]	@ (800299c <__NVIC_SetPriority+0x50>)
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	3b04      	subs	r3, #4
 8002984:	0112      	lsls	r2, r2, #4
 8002986:	b2d2      	uxtb	r2, r2
 8002988:	440b      	add	r3, r1
 800298a:	761a      	strb	r2, [r3, #24]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e100 	.word	0xe000e100
 800299c:	e000ed00 	.word	0xe000ed00

080029a0 <adc_interrupt_conv_init>:
}

//============Interrupt=============================

void adc_interrupt_conv_init(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b08e      	sub	sp, #56	@ 0x38
 80029a4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
 80029ae:	605a      	str	r2, [r3, #4]
 80029b0:	609a      	str	r2, [r3, #8]
 80029b2:	60da      	str	r2, [r3, #12]
 80029b4:	611a      	str	r2, [r3, #16]
	ADC_ChannelConfTypeDef sConfig ={0};
 80029b6:	f107 030c 	add.w	r3, r7, #12
 80029ba:	2200      	movs	r2, #0
 80029bc:	601a      	str	r2, [r3, #0]
 80029be:	605a      	str	r2, [r3, #4]
 80029c0:	609a      	str	r2, [r3, #8]
 80029c2:	60da      	str	r2, [r3, #12]
 80029c4:	611a      	str	r2, [r3, #16]
 80029c6:	615a      	str	r2, [r3, #20]
	//ADC_InitTypeDef


	//configure pc0 as analog pin
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80029c8:	4b30      	ldr	r3, [pc, #192]	@ (8002a8c <adc_interrupt_conv_init+0xec>)
 80029ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029cc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a8c <adc_interrupt_conv_init+0xec>)
 80029ce:	f043 0304 	orr.w	r3, r3, #4
 80029d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029d4:	4b2d      	ldr	r3, [pc, #180]	@ (8002a8c <adc_interrupt_conv_init+0xec>)
 80029d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	68bb      	ldr	r3, [r7, #8]


		GPIO_InitStruct.Pin = GPIO_PIN_0;
 80029e0:	2301      	movs	r3, #1
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e4:	2303      	movs	r3, #3
 80029e6:	62bb      	str	r3, [r7, #40]	@ 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e8:	2300      	movs	r3, #0
 80029ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029f0:	4619      	mov	r1, r3
 80029f2:	4827      	ldr	r0, [pc, #156]	@ (8002a90 <adc_interrupt_conv_init+0xf0>)
 80029f4:	f7fe ff6e 	bl	80018d4 <HAL_GPIO_Init>
	//config adc modle for ontinuous conversation
		__HAL_RCC_ADC_CLK_ENABLE();
 80029f8:	4b24      	ldr	r3, [pc, #144]	@ (8002a8c <adc_interrupt_conv_init+0xec>)
 80029fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fc:	4a23      	ldr	r2, [pc, #140]	@ (8002a8c <adc_interrupt_conv_init+0xec>)
 80029fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a04:	4b21      	ldr	r3, [pc, #132]	@ (8002a8c <adc_interrupt_conv_init+0xec>)
 8002a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	687b      	ldr	r3, [r7, #4]


		hadc1.Instance = ADC1;
 8002a10:	4b20      	ldr	r3, [pc, #128]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a12:	4a21      	ldr	r2, [pc, #132]	@ (8002a98 <adc_interrupt_conv_init+0xf8>)
 8002a14:	601a      	str	r2, [r3, #0]
		hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002a16:	4b1f      	ldr	r3, [pc, #124]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a18:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a1c:	605a      	str	r2, [r3, #4]
		hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002a1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	609a      	str	r2, [r3, #8]
		hadc1.Init.ContinuousConvMode = ENABLE;
 8002a24:	4b1b      	ldr	r3, [pc, #108]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	765a      	strb	r2, [r3, #25]
		hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2020 	strb.w	r2, [r3, #32]
		hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002a32:	4b18      	ldr	r3, [pc, #96]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	62da      	str	r2, [r3, #44]	@ 0x2c
		hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002a38:	4b16      	ldr	r3, [pc, #88]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	629a      	str	r2, [r3, #40]	@ 0x28
		hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002a3e:	4b15      	ldr	r3, [pc, #84]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	60da      	str	r2, [r3, #12]
		hadc1.Init.NbrOfConversion = 1;
 8002a44:	4b13      	ldr	r3, [pc, #76]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a46:	2201      	movs	r2, #1
 8002a48:	61da      	str	r2, [r3, #28]
		hadc1.Init.DMAContinuousRequests = DISABLE;
 8002a4a:	4b12      	ldr	r3, [pc, #72]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002a52:	4b10      	ldr	r3, [pc, #64]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a54:	2208      	movs	r2, #8
 8002a56:	615a      	str	r2, [r3, #20]


		HAL_ADC_Init(&hadc1);
 8002a58:	480e      	ldr	r0, [pc, #56]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a5a:	f7fd ffc9 	bl	80009f0 <HAL_ADC_Init>

		sConfig.Channel = ADC_CHANNEL_1;
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a9c <adc_interrupt_conv_init+0xfc>)
 8002a60:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	613b      	str	r3, [r7, #16]
		sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8002a66:	2302      	movs	r3, #2
 8002a68:	617b      	str	r3, [r7, #20]
		HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4808      	ldr	r0, [pc, #32]	@ (8002a94 <adc_interrupt_conv_init+0xf4>)
 8002a72:	f7fe f9d1 	bl	8000e18 <HAL_ADC_ConfigChannel>

		NVIC_SetPriority(ADC1_IRQn,0);
 8002a76:	2100      	movs	r1, #0
 8002a78:	2012      	movs	r0, #18
 8002a7a:	f7ff ff67 	bl	800294c <__NVIC_SetPriority>
		NVIC_EnableIRQ(ADC1_IRQn);
 8002a7e:	2012      	movs	r0, #18
 8002a80:	f7ff ff46 	bl	8002910 <__NVIC_EnableIRQ>
}
 8002a84:	bf00      	nop
 8002a86:	3738      	adds	r7, #56	@ 0x38
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40021000 	.word	0x40021000
 8002a90:	48000800 	.word	0x48000800
 8002a94:	2000008c 	.word	0x2000008c
 8002a98:	50040000 	.word	0x50040000
 8002a9c:	04300002 	.word	0x04300002

08002aa0 <main>:

uint32_t sensor_value;
 ADC_HandleTypeDef hadc1;

int main(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
   HAL_Init();
 8002aa4:	f7fd fd7a 	bl	800059c <HAL_Init>
   usart_init();
 8002aa8:	f000 f8c8 	bl	8002c3c <usart_init>
   adc_interrupt_conv_init();
 8002aac:	f7ff ff78 	bl	80029a0 <adc_interrupt_conv_init>

   HAL_ADC_Start(&hadc1);
 8002ab0:	4804      	ldr	r0, [pc, #16]	@ (8002ac4 <main+0x24>)
 8002ab2:	f7fe f8f7 	bl	8000ca4 <HAL_ADC_Start>

   while(1)
   {
	   	   printf("read data %d  \n\r",(int)sensor_value);
 8002ab6:	4b04      	ldr	r3, [pc, #16]	@ (8002ac8 <main+0x28>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4619      	mov	r1, r3
 8002abc:	4803      	ldr	r0, [pc, #12]	@ (8002acc <main+0x2c>)
 8002abe:	f000 fa03 	bl	8002ec8 <iprintf>
 8002ac2:	e7f8      	b.n	8002ab6 <main+0x16>
 8002ac4:	2000008c 	.word	0x2000008c
 8002ac8:	20000088 	.word	0x20000088
 8002acc:	08003bb8 	.word	0x08003bb8

08002ad0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e00a      	b.n	8002af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae2:	f3af 8000 	nop.w
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	60ba      	str	r2, [r7, #8]
 8002aee:	b2ca      	uxtb	r2, r1
 8002af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf0      	blt.n	8002ae2 <_read+0x12>
  }

  return len;
 8002b00:	687b      	ldr	r3, [r7, #4]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e009      	b.n	8002b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	60ba      	str	r2, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f877 	bl	8002c18 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dbf1      	blt.n	8002b1c <_write+0x12>
  }
  return len;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_close>:

int _close(int file)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <_isatty>:

int _isatty(int file)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb4:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <_sbrk+0x5c>)
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <_sbrk+0x60>)
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <_sbrk+0x64>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <_sbrk+0x68>)
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <_sbrk+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d207      	bcs.n	8002bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bdc:	f000 fa18 	bl	8003010 <__errno>
 8002be0:	4603      	mov	r3, r0
 8002be2:	220c      	movs	r2, #12
 8002be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bea:	e009      	b.n	8002c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <_sbrk+0x64>)
 8002bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20018000 	.word	0x20018000
 8002c0c:	00000400 	.word	0x00000400
 8002c10:	200000f0 	.word	0x200000f0
 8002c14:	200002c8 	.word	0x200002c8

08002c18 <__io_putchar>:
#include "stm32l4xx_hal.h"

UART_HandleTypeDef huart2;
//system call
int __io_putchar(int ch)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1,10);
 8002c20:	1d39      	adds	r1, r7, #4
 8002c22:	230a      	movs	r3, #10
 8002c24:	2201      	movs	r2, #1
 8002c26:	4804      	ldr	r0, [pc, #16]	@ (8002c38 <__io_putchar+0x20>)
 8002c28:	f7ff f91a 	bl	8001e60 <HAL_UART_Transmit>
	return ch;
 8002c2c:	687b      	ldr	r3, [r7, #4]
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	200000f4 	.word	0x200000f4

08002c3c <usart_init>:

void usart_init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b088      	sub	sp, #32
 8002c40:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c42:	f107 030c 	add.w	r3, r7, #12
 8002c46:	2200      	movs	r2, #0
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	609a      	str	r2, [r3, #8]
 8002c4e:	60da      	str	r2, [r3, #12]
 8002c50:	611a      	str	r2, [r3, #16]
	//
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	4b24      	ldr	r3, [pc, #144]	@ (8002ce4 <usart_init+0xa8>)
 8002c54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c56:	4a23      	ldr	r2, [pc, #140]	@ (8002ce4 <usart_init+0xa8>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <usart_init+0xa8>)
 8002c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	60bb      	str	r3, [r7, #8]
 8002c68:	68bb      	ldr	r3, [r7, #8]
	//
	__HAL_RCC_USART2_CLK_ENABLE();
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce4 <usart_init+0xa8>)
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce4 <usart_init+0xa8>)
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c74:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c76:	4b1b      	ldr	r3, [pc, #108]	@ (8002ce4 <usart_init+0xa8>)
 8002c78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c7e:	607b      	str	r3, [r7, #4]
 8002c80:	687b      	ldr	r3, [r7, #4]

	//config pins to act as alternate functions
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8002c82:	230c      	movs	r3, #12
 8002c84:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	2302      	movs	r3, #2
 8002c88:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c92:	2303      	movs	r3, #3
 8002c94:	61bb      	str	r3, [r7, #24]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c96:	f107 030c 	add.w	r3, r7, #12
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ca0:	f7fe fe18 	bl	80018d4 <HAL_GPIO_Init>


	//msp find what is this ?
	huart2.Instance = USART2;
 8002ca4:	4b10      	ldr	r3, [pc, #64]	@ (8002ce8 <usart_init+0xac>)
 8002ca6:	4a11      	ldr	r2, [pc, #68]	@ (8002cec <usart_init+0xb0>)
 8002ca8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002caa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ce8 <usart_init+0xac>)
 8002cac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cb0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ce8 <usart_init+0xac>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <usart_init+0xac>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <usart_init+0xac>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX;
 8002cc4:	4b08      	ldr	r3, [pc, #32]	@ (8002ce8 <usart_init+0xac>)
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cca:	4b07      	ldr	r3, [pc, #28]	@ (8002ce8 <usart_init+0xac>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd0:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <usart_init+0xac>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]

	HAL_UART_Init(&huart2);
 8002cd6:	4804      	ldr	r0, [pc, #16]	@ (8002ce8 <usart_init+0xac>)
 8002cd8:	f7ff f86a 	bl	8001db0 <HAL_UART_Init>


}
 8002cdc:	bf00      	nop
 8002cde:	3720      	adds	r7, #32
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	200000f4 	.word	0x200000f4
 8002cec:	40004400 	.word	0x40004400

08002cf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002cf0:	480d      	ldr	r0, [pc, #52]	@ (8002d28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002cf2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002cf4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002cf8:	480c      	ldr	r0, [pc, #48]	@ (8002d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8002cfa:	490d      	ldr	r1, [pc, #52]	@ (8002d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <LoopForever+0xe>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d10:	4c0a      	ldr	r4, [pc, #40]	@ (8002d3c <LoopForever+0x16>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002d1e:	f000 f97d 	bl	800301c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d22:	f7ff febd 	bl	8002aa0 <main>

08002d26 <LoopForever>:

LoopForever:
  b LoopForever
 8002d26:	e7fe      	b.n	8002d26 <LoopForever>
  ldr   r0, =_estack
 8002d28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002d34:	08003c48 	.word	0x08003c48
  ldr r2, =_sbss
 8002d38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002d3c:	200002c8 	.word	0x200002c8

08002d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC1_2_IRQHandler>
	...

08002d44 <std>:
 8002d44:	2300      	movs	r3, #0
 8002d46:	b510      	push	{r4, lr}
 8002d48:	4604      	mov	r4, r0
 8002d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d52:	6083      	str	r3, [r0, #8]
 8002d54:	8181      	strh	r1, [r0, #12]
 8002d56:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d58:	81c2      	strh	r2, [r0, #14]
 8002d5a:	6183      	str	r3, [r0, #24]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	2208      	movs	r2, #8
 8002d60:	305c      	adds	r0, #92	@ 0x5c
 8002d62:	f000 f906 	bl	8002f72 <memset>
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <std+0x58>)
 8002d68:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002da0 <std+0x5c>)
 8002d6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <std+0x60>)
 8002d70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d72:	4b0d      	ldr	r3, [pc, #52]	@ (8002da8 <std+0x64>)
 8002d74:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <std+0x68>)
 8002d78:	6224      	str	r4, [r4, #32]
 8002d7a:	429c      	cmp	r4, r3
 8002d7c:	d006      	beq.n	8002d8c <std+0x48>
 8002d7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d82:	4294      	cmp	r4, r2
 8002d84:	d002      	beq.n	8002d8c <std+0x48>
 8002d86:	33d0      	adds	r3, #208	@ 0xd0
 8002d88:	429c      	cmp	r4, r3
 8002d8a:	d105      	bne.n	8002d98 <std+0x54>
 8002d8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d94:	f000 b966 	b.w	8003064 <__retarget_lock_init_recursive>
 8002d98:	bd10      	pop	{r4, pc}
 8002d9a:	bf00      	nop
 8002d9c:	08002eed 	.word	0x08002eed
 8002da0:	08002f0f 	.word	0x08002f0f
 8002da4:	08002f47 	.word	0x08002f47
 8002da8:	08002f6b 	.word	0x08002f6b
 8002dac:	2000017c 	.word	0x2000017c

08002db0 <stdio_exit_handler>:
 8002db0:	4a02      	ldr	r2, [pc, #8]	@ (8002dbc <stdio_exit_handler+0xc>)
 8002db2:	4903      	ldr	r1, [pc, #12]	@ (8002dc0 <stdio_exit_handler+0x10>)
 8002db4:	4803      	ldr	r0, [pc, #12]	@ (8002dc4 <stdio_exit_handler+0x14>)
 8002db6:	f000 b869 	b.w	8002e8c <_fwalk_sglue>
 8002dba:	bf00      	nop
 8002dbc:	2000000c 	.word	0x2000000c
 8002dc0:	08003901 	.word	0x08003901
 8002dc4:	2000001c 	.word	0x2000001c

08002dc8 <cleanup_stdio>:
 8002dc8:	6841      	ldr	r1, [r0, #4]
 8002dca:	4b0c      	ldr	r3, [pc, #48]	@ (8002dfc <cleanup_stdio+0x34>)
 8002dcc:	4299      	cmp	r1, r3
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	4604      	mov	r4, r0
 8002dd2:	d001      	beq.n	8002dd8 <cleanup_stdio+0x10>
 8002dd4:	f000 fd94 	bl	8003900 <_fflush_r>
 8002dd8:	68a1      	ldr	r1, [r4, #8]
 8002dda:	4b09      	ldr	r3, [pc, #36]	@ (8002e00 <cleanup_stdio+0x38>)
 8002ddc:	4299      	cmp	r1, r3
 8002dde:	d002      	beq.n	8002de6 <cleanup_stdio+0x1e>
 8002de0:	4620      	mov	r0, r4
 8002de2:	f000 fd8d 	bl	8003900 <_fflush_r>
 8002de6:	68e1      	ldr	r1, [r4, #12]
 8002de8:	4b06      	ldr	r3, [pc, #24]	@ (8002e04 <cleanup_stdio+0x3c>)
 8002dea:	4299      	cmp	r1, r3
 8002dec:	d004      	beq.n	8002df8 <cleanup_stdio+0x30>
 8002dee:	4620      	mov	r0, r4
 8002df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002df4:	f000 bd84 	b.w	8003900 <_fflush_r>
 8002df8:	bd10      	pop	{r4, pc}
 8002dfa:	bf00      	nop
 8002dfc:	2000017c 	.word	0x2000017c
 8002e00:	200001e4 	.word	0x200001e4
 8002e04:	2000024c 	.word	0x2000024c

08002e08 <global_stdio_init.part.0>:
 8002e08:	b510      	push	{r4, lr}
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e38 <global_stdio_init.part.0+0x30>)
 8002e0c:	4c0b      	ldr	r4, [pc, #44]	@ (8002e3c <global_stdio_init.part.0+0x34>)
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002e40 <global_stdio_init.part.0+0x38>)
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	4620      	mov	r0, r4
 8002e14:	2200      	movs	r2, #0
 8002e16:	2104      	movs	r1, #4
 8002e18:	f7ff ff94 	bl	8002d44 <std>
 8002e1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e20:	2201      	movs	r2, #1
 8002e22:	2109      	movs	r1, #9
 8002e24:	f7ff ff8e 	bl	8002d44 <std>
 8002e28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e32:	2112      	movs	r1, #18
 8002e34:	f7ff bf86 	b.w	8002d44 <std>
 8002e38:	200002b4 	.word	0x200002b4
 8002e3c:	2000017c 	.word	0x2000017c
 8002e40:	08002db1 	.word	0x08002db1

08002e44 <__sfp_lock_acquire>:
 8002e44:	4801      	ldr	r0, [pc, #4]	@ (8002e4c <__sfp_lock_acquire+0x8>)
 8002e46:	f000 b90e 	b.w	8003066 <__retarget_lock_acquire_recursive>
 8002e4a:	bf00      	nop
 8002e4c:	200002bd 	.word	0x200002bd

08002e50 <__sfp_lock_release>:
 8002e50:	4801      	ldr	r0, [pc, #4]	@ (8002e58 <__sfp_lock_release+0x8>)
 8002e52:	f000 b909 	b.w	8003068 <__retarget_lock_release_recursive>
 8002e56:	bf00      	nop
 8002e58:	200002bd 	.word	0x200002bd

08002e5c <__sinit>:
 8002e5c:	b510      	push	{r4, lr}
 8002e5e:	4604      	mov	r4, r0
 8002e60:	f7ff fff0 	bl	8002e44 <__sfp_lock_acquire>
 8002e64:	6a23      	ldr	r3, [r4, #32]
 8002e66:	b11b      	cbz	r3, 8002e70 <__sinit+0x14>
 8002e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e6c:	f7ff bff0 	b.w	8002e50 <__sfp_lock_release>
 8002e70:	4b04      	ldr	r3, [pc, #16]	@ (8002e84 <__sinit+0x28>)
 8002e72:	6223      	str	r3, [r4, #32]
 8002e74:	4b04      	ldr	r3, [pc, #16]	@ (8002e88 <__sinit+0x2c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f5      	bne.n	8002e68 <__sinit+0xc>
 8002e7c:	f7ff ffc4 	bl	8002e08 <global_stdio_init.part.0>
 8002e80:	e7f2      	b.n	8002e68 <__sinit+0xc>
 8002e82:	bf00      	nop
 8002e84:	08002dc9 	.word	0x08002dc9
 8002e88:	200002b4 	.word	0x200002b4

08002e8c <_fwalk_sglue>:
 8002e8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e90:	4607      	mov	r7, r0
 8002e92:	4688      	mov	r8, r1
 8002e94:	4614      	mov	r4, r2
 8002e96:	2600      	movs	r6, #0
 8002e98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e9c:	f1b9 0901 	subs.w	r9, r9, #1
 8002ea0:	d505      	bpl.n	8002eae <_fwalk_sglue+0x22>
 8002ea2:	6824      	ldr	r4, [r4, #0]
 8002ea4:	2c00      	cmp	r4, #0
 8002ea6:	d1f7      	bne.n	8002e98 <_fwalk_sglue+0xc>
 8002ea8:	4630      	mov	r0, r6
 8002eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002eae:	89ab      	ldrh	r3, [r5, #12]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d907      	bls.n	8002ec4 <_fwalk_sglue+0x38>
 8002eb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	d003      	beq.n	8002ec4 <_fwalk_sglue+0x38>
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	4638      	mov	r0, r7
 8002ec0:	47c0      	blx	r8
 8002ec2:	4306      	orrs	r6, r0
 8002ec4:	3568      	adds	r5, #104	@ 0x68
 8002ec6:	e7e9      	b.n	8002e9c <_fwalk_sglue+0x10>

08002ec8 <iprintf>:
 8002ec8:	b40f      	push	{r0, r1, r2, r3}
 8002eca:	b507      	push	{r0, r1, r2, lr}
 8002ecc:	4906      	ldr	r1, [pc, #24]	@ (8002ee8 <iprintf+0x20>)
 8002ece:	ab04      	add	r3, sp, #16
 8002ed0:	6808      	ldr	r0, [r1, #0]
 8002ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ed6:	6881      	ldr	r1, [r0, #8]
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	f000 f9e9 	bl	80032b0 <_vfiprintf_r>
 8002ede:	b003      	add	sp, #12
 8002ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ee4:	b004      	add	sp, #16
 8002ee6:	4770      	bx	lr
 8002ee8:	20000018 	.word	0x20000018

08002eec <__sread>:
 8002eec:	b510      	push	{r4, lr}
 8002eee:	460c      	mov	r4, r1
 8002ef0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ef4:	f000 f868 	bl	8002fc8 <_read_r>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	bfab      	itete	ge
 8002efc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002efe:	89a3      	ldrhlt	r3, [r4, #12]
 8002f00:	181b      	addge	r3, r3, r0
 8002f02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002f06:	bfac      	ite	ge
 8002f08:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002f0a:	81a3      	strhlt	r3, [r4, #12]
 8002f0c:	bd10      	pop	{r4, pc}

08002f0e <__swrite>:
 8002f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f12:	461f      	mov	r7, r3
 8002f14:	898b      	ldrh	r3, [r1, #12]
 8002f16:	05db      	lsls	r3, r3, #23
 8002f18:	4605      	mov	r5, r0
 8002f1a:	460c      	mov	r4, r1
 8002f1c:	4616      	mov	r6, r2
 8002f1e:	d505      	bpl.n	8002f2c <__swrite+0x1e>
 8002f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f24:	2302      	movs	r3, #2
 8002f26:	2200      	movs	r2, #0
 8002f28:	f000 f83c 	bl	8002fa4 <_lseek_r>
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f36:	81a3      	strh	r3, [r4, #12]
 8002f38:	4632      	mov	r2, r6
 8002f3a:	463b      	mov	r3, r7
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f42:	f000 b853 	b.w	8002fec <_write_r>

08002f46 <__sseek>:
 8002f46:	b510      	push	{r4, lr}
 8002f48:	460c      	mov	r4, r1
 8002f4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f4e:	f000 f829 	bl	8002fa4 <_lseek_r>
 8002f52:	1c43      	adds	r3, r0, #1
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	bf15      	itete	ne
 8002f58:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f62:	81a3      	strheq	r3, [r4, #12]
 8002f64:	bf18      	it	ne
 8002f66:	81a3      	strhne	r3, [r4, #12]
 8002f68:	bd10      	pop	{r4, pc}

08002f6a <__sclose>:
 8002f6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f6e:	f000 b809 	b.w	8002f84 <_close_r>

08002f72 <memset>:
 8002f72:	4402      	add	r2, r0
 8002f74:	4603      	mov	r3, r0
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d100      	bne.n	8002f7c <memset+0xa>
 8002f7a:	4770      	bx	lr
 8002f7c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f80:	e7f9      	b.n	8002f76 <memset+0x4>
	...

08002f84 <_close_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	4d06      	ldr	r5, [pc, #24]	@ (8002fa0 <_close_r+0x1c>)
 8002f88:	2300      	movs	r3, #0
 8002f8a:	4604      	mov	r4, r0
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	602b      	str	r3, [r5, #0]
 8002f90:	f7ff fdd7 	bl	8002b42 <_close>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d102      	bne.n	8002f9e <_close_r+0x1a>
 8002f98:	682b      	ldr	r3, [r5, #0]
 8002f9a:	b103      	cbz	r3, 8002f9e <_close_r+0x1a>
 8002f9c:	6023      	str	r3, [r4, #0]
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	200002b8 	.word	0x200002b8

08002fa4 <_lseek_r>:
 8002fa4:	b538      	push	{r3, r4, r5, lr}
 8002fa6:	4d07      	ldr	r5, [pc, #28]	@ (8002fc4 <_lseek_r+0x20>)
 8002fa8:	4604      	mov	r4, r0
 8002faa:	4608      	mov	r0, r1
 8002fac:	4611      	mov	r1, r2
 8002fae:	2200      	movs	r2, #0
 8002fb0:	602a      	str	r2, [r5, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f7ff fdec 	bl	8002b90 <_lseek>
 8002fb8:	1c43      	adds	r3, r0, #1
 8002fba:	d102      	bne.n	8002fc2 <_lseek_r+0x1e>
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	b103      	cbz	r3, 8002fc2 <_lseek_r+0x1e>
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	bd38      	pop	{r3, r4, r5, pc}
 8002fc4:	200002b8 	.word	0x200002b8

08002fc8 <_read_r>:
 8002fc8:	b538      	push	{r3, r4, r5, lr}
 8002fca:	4d07      	ldr	r5, [pc, #28]	@ (8002fe8 <_read_r+0x20>)
 8002fcc:	4604      	mov	r4, r0
 8002fce:	4608      	mov	r0, r1
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	602a      	str	r2, [r5, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f7ff fd7a 	bl	8002ad0 <_read>
 8002fdc:	1c43      	adds	r3, r0, #1
 8002fde:	d102      	bne.n	8002fe6 <_read_r+0x1e>
 8002fe0:	682b      	ldr	r3, [r5, #0]
 8002fe2:	b103      	cbz	r3, 8002fe6 <_read_r+0x1e>
 8002fe4:	6023      	str	r3, [r4, #0]
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}
 8002fe8:	200002b8 	.word	0x200002b8

08002fec <_write_r>:
 8002fec:	b538      	push	{r3, r4, r5, lr}
 8002fee:	4d07      	ldr	r5, [pc, #28]	@ (800300c <_write_r+0x20>)
 8002ff0:	4604      	mov	r4, r0
 8002ff2:	4608      	mov	r0, r1
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	602a      	str	r2, [r5, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f7ff fd85 	bl	8002b0a <_write>
 8003000:	1c43      	adds	r3, r0, #1
 8003002:	d102      	bne.n	800300a <_write_r+0x1e>
 8003004:	682b      	ldr	r3, [r5, #0]
 8003006:	b103      	cbz	r3, 800300a <_write_r+0x1e>
 8003008:	6023      	str	r3, [r4, #0]
 800300a:	bd38      	pop	{r3, r4, r5, pc}
 800300c:	200002b8 	.word	0x200002b8

08003010 <__errno>:
 8003010:	4b01      	ldr	r3, [pc, #4]	@ (8003018 <__errno+0x8>)
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	4770      	bx	lr
 8003016:	bf00      	nop
 8003018:	20000018 	.word	0x20000018

0800301c <__libc_init_array>:
 800301c:	b570      	push	{r4, r5, r6, lr}
 800301e:	4d0d      	ldr	r5, [pc, #52]	@ (8003054 <__libc_init_array+0x38>)
 8003020:	4c0d      	ldr	r4, [pc, #52]	@ (8003058 <__libc_init_array+0x3c>)
 8003022:	1b64      	subs	r4, r4, r5
 8003024:	10a4      	asrs	r4, r4, #2
 8003026:	2600      	movs	r6, #0
 8003028:	42a6      	cmp	r6, r4
 800302a:	d109      	bne.n	8003040 <__libc_init_array+0x24>
 800302c:	4d0b      	ldr	r5, [pc, #44]	@ (800305c <__libc_init_array+0x40>)
 800302e:	4c0c      	ldr	r4, [pc, #48]	@ (8003060 <__libc_init_array+0x44>)
 8003030:	f000 fdb6 	bl	8003ba0 <_init>
 8003034:	1b64      	subs	r4, r4, r5
 8003036:	10a4      	asrs	r4, r4, #2
 8003038:	2600      	movs	r6, #0
 800303a:	42a6      	cmp	r6, r4
 800303c:	d105      	bne.n	800304a <__libc_init_array+0x2e>
 800303e:	bd70      	pop	{r4, r5, r6, pc}
 8003040:	f855 3b04 	ldr.w	r3, [r5], #4
 8003044:	4798      	blx	r3
 8003046:	3601      	adds	r6, #1
 8003048:	e7ee      	b.n	8003028 <__libc_init_array+0xc>
 800304a:	f855 3b04 	ldr.w	r3, [r5], #4
 800304e:	4798      	blx	r3
 8003050:	3601      	adds	r6, #1
 8003052:	e7f2      	b.n	800303a <__libc_init_array+0x1e>
 8003054:	08003c40 	.word	0x08003c40
 8003058:	08003c40 	.word	0x08003c40
 800305c:	08003c40 	.word	0x08003c40
 8003060:	08003c44 	.word	0x08003c44

08003064 <__retarget_lock_init_recursive>:
 8003064:	4770      	bx	lr

08003066 <__retarget_lock_acquire_recursive>:
 8003066:	4770      	bx	lr

08003068 <__retarget_lock_release_recursive>:
 8003068:	4770      	bx	lr
	...

0800306c <_free_r>:
 800306c:	b538      	push	{r3, r4, r5, lr}
 800306e:	4605      	mov	r5, r0
 8003070:	2900      	cmp	r1, #0
 8003072:	d041      	beq.n	80030f8 <_free_r+0x8c>
 8003074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003078:	1f0c      	subs	r4, r1, #4
 800307a:	2b00      	cmp	r3, #0
 800307c:	bfb8      	it	lt
 800307e:	18e4      	addlt	r4, r4, r3
 8003080:	f000 f8e0 	bl	8003244 <__malloc_lock>
 8003084:	4a1d      	ldr	r2, [pc, #116]	@ (80030fc <_free_r+0x90>)
 8003086:	6813      	ldr	r3, [r2, #0]
 8003088:	b933      	cbnz	r3, 8003098 <_free_r+0x2c>
 800308a:	6063      	str	r3, [r4, #4]
 800308c:	6014      	str	r4, [r2, #0]
 800308e:	4628      	mov	r0, r5
 8003090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003094:	f000 b8dc 	b.w	8003250 <__malloc_unlock>
 8003098:	42a3      	cmp	r3, r4
 800309a:	d908      	bls.n	80030ae <_free_r+0x42>
 800309c:	6820      	ldr	r0, [r4, #0]
 800309e:	1821      	adds	r1, r4, r0
 80030a0:	428b      	cmp	r3, r1
 80030a2:	bf01      	itttt	eq
 80030a4:	6819      	ldreq	r1, [r3, #0]
 80030a6:	685b      	ldreq	r3, [r3, #4]
 80030a8:	1809      	addeq	r1, r1, r0
 80030aa:	6021      	streq	r1, [r4, #0]
 80030ac:	e7ed      	b.n	800308a <_free_r+0x1e>
 80030ae:	461a      	mov	r2, r3
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	b10b      	cbz	r3, 80030b8 <_free_r+0x4c>
 80030b4:	42a3      	cmp	r3, r4
 80030b6:	d9fa      	bls.n	80030ae <_free_r+0x42>
 80030b8:	6811      	ldr	r1, [r2, #0]
 80030ba:	1850      	adds	r0, r2, r1
 80030bc:	42a0      	cmp	r0, r4
 80030be:	d10b      	bne.n	80030d8 <_free_r+0x6c>
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	4401      	add	r1, r0
 80030c4:	1850      	adds	r0, r2, r1
 80030c6:	4283      	cmp	r3, r0
 80030c8:	6011      	str	r1, [r2, #0]
 80030ca:	d1e0      	bne.n	800308e <_free_r+0x22>
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	6053      	str	r3, [r2, #4]
 80030d2:	4408      	add	r0, r1
 80030d4:	6010      	str	r0, [r2, #0]
 80030d6:	e7da      	b.n	800308e <_free_r+0x22>
 80030d8:	d902      	bls.n	80030e0 <_free_r+0x74>
 80030da:	230c      	movs	r3, #12
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	e7d6      	b.n	800308e <_free_r+0x22>
 80030e0:	6820      	ldr	r0, [r4, #0]
 80030e2:	1821      	adds	r1, r4, r0
 80030e4:	428b      	cmp	r3, r1
 80030e6:	bf04      	itt	eq
 80030e8:	6819      	ldreq	r1, [r3, #0]
 80030ea:	685b      	ldreq	r3, [r3, #4]
 80030ec:	6063      	str	r3, [r4, #4]
 80030ee:	bf04      	itt	eq
 80030f0:	1809      	addeq	r1, r1, r0
 80030f2:	6021      	streq	r1, [r4, #0]
 80030f4:	6054      	str	r4, [r2, #4]
 80030f6:	e7ca      	b.n	800308e <_free_r+0x22>
 80030f8:	bd38      	pop	{r3, r4, r5, pc}
 80030fa:	bf00      	nop
 80030fc:	200002c4 	.word	0x200002c4

08003100 <sbrk_aligned>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4e0f      	ldr	r6, [pc, #60]	@ (8003140 <sbrk_aligned+0x40>)
 8003104:	460c      	mov	r4, r1
 8003106:	6831      	ldr	r1, [r6, #0]
 8003108:	4605      	mov	r5, r0
 800310a:	b911      	cbnz	r1, 8003112 <sbrk_aligned+0x12>
 800310c:	f000 fcb4 	bl	8003a78 <_sbrk_r>
 8003110:	6030      	str	r0, [r6, #0]
 8003112:	4621      	mov	r1, r4
 8003114:	4628      	mov	r0, r5
 8003116:	f000 fcaf 	bl	8003a78 <_sbrk_r>
 800311a:	1c43      	adds	r3, r0, #1
 800311c:	d103      	bne.n	8003126 <sbrk_aligned+0x26>
 800311e:	f04f 34ff 	mov.w	r4, #4294967295
 8003122:	4620      	mov	r0, r4
 8003124:	bd70      	pop	{r4, r5, r6, pc}
 8003126:	1cc4      	adds	r4, r0, #3
 8003128:	f024 0403 	bic.w	r4, r4, #3
 800312c:	42a0      	cmp	r0, r4
 800312e:	d0f8      	beq.n	8003122 <sbrk_aligned+0x22>
 8003130:	1a21      	subs	r1, r4, r0
 8003132:	4628      	mov	r0, r5
 8003134:	f000 fca0 	bl	8003a78 <_sbrk_r>
 8003138:	3001      	adds	r0, #1
 800313a:	d1f2      	bne.n	8003122 <sbrk_aligned+0x22>
 800313c:	e7ef      	b.n	800311e <sbrk_aligned+0x1e>
 800313e:	bf00      	nop
 8003140:	200002c0 	.word	0x200002c0

08003144 <_malloc_r>:
 8003144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003148:	1ccd      	adds	r5, r1, #3
 800314a:	f025 0503 	bic.w	r5, r5, #3
 800314e:	3508      	adds	r5, #8
 8003150:	2d0c      	cmp	r5, #12
 8003152:	bf38      	it	cc
 8003154:	250c      	movcc	r5, #12
 8003156:	2d00      	cmp	r5, #0
 8003158:	4606      	mov	r6, r0
 800315a:	db01      	blt.n	8003160 <_malloc_r+0x1c>
 800315c:	42a9      	cmp	r1, r5
 800315e:	d904      	bls.n	800316a <_malloc_r+0x26>
 8003160:	230c      	movs	r3, #12
 8003162:	6033      	str	r3, [r6, #0]
 8003164:	2000      	movs	r0, #0
 8003166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800316a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003240 <_malloc_r+0xfc>
 800316e:	f000 f869 	bl	8003244 <__malloc_lock>
 8003172:	f8d8 3000 	ldr.w	r3, [r8]
 8003176:	461c      	mov	r4, r3
 8003178:	bb44      	cbnz	r4, 80031cc <_malloc_r+0x88>
 800317a:	4629      	mov	r1, r5
 800317c:	4630      	mov	r0, r6
 800317e:	f7ff ffbf 	bl	8003100 <sbrk_aligned>
 8003182:	1c43      	adds	r3, r0, #1
 8003184:	4604      	mov	r4, r0
 8003186:	d158      	bne.n	800323a <_malloc_r+0xf6>
 8003188:	f8d8 4000 	ldr.w	r4, [r8]
 800318c:	4627      	mov	r7, r4
 800318e:	2f00      	cmp	r7, #0
 8003190:	d143      	bne.n	800321a <_malloc_r+0xd6>
 8003192:	2c00      	cmp	r4, #0
 8003194:	d04b      	beq.n	800322e <_malloc_r+0xea>
 8003196:	6823      	ldr	r3, [r4, #0]
 8003198:	4639      	mov	r1, r7
 800319a:	4630      	mov	r0, r6
 800319c:	eb04 0903 	add.w	r9, r4, r3
 80031a0:	f000 fc6a 	bl	8003a78 <_sbrk_r>
 80031a4:	4581      	cmp	r9, r0
 80031a6:	d142      	bne.n	800322e <_malloc_r+0xea>
 80031a8:	6821      	ldr	r1, [r4, #0]
 80031aa:	1a6d      	subs	r5, r5, r1
 80031ac:	4629      	mov	r1, r5
 80031ae:	4630      	mov	r0, r6
 80031b0:	f7ff ffa6 	bl	8003100 <sbrk_aligned>
 80031b4:	3001      	adds	r0, #1
 80031b6:	d03a      	beq.n	800322e <_malloc_r+0xea>
 80031b8:	6823      	ldr	r3, [r4, #0]
 80031ba:	442b      	add	r3, r5
 80031bc:	6023      	str	r3, [r4, #0]
 80031be:	f8d8 3000 	ldr.w	r3, [r8]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	bb62      	cbnz	r2, 8003220 <_malloc_r+0xdc>
 80031c6:	f8c8 7000 	str.w	r7, [r8]
 80031ca:	e00f      	b.n	80031ec <_malloc_r+0xa8>
 80031cc:	6822      	ldr	r2, [r4, #0]
 80031ce:	1b52      	subs	r2, r2, r5
 80031d0:	d420      	bmi.n	8003214 <_malloc_r+0xd0>
 80031d2:	2a0b      	cmp	r2, #11
 80031d4:	d917      	bls.n	8003206 <_malloc_r+0xc2>
 80031d6:	1961      	adds	r1, r4, r5
 80031d8:	42a3      	cmp	r3, r4
 80031da:	6025      	str	r5, [r4, #0]
 80031dc:	bf18      	it	ne
 80031de:	6059      	strne	r1, [r3, #4]
 80031e0:	6863      	ldr	r3, [r4, #4]
 80031e2:	bf08      	it	eq
 80031e4:	f8c8 1000 	streq.w	r1, [r8]
 80031e8:	5162      	str	r2, [r4, r5]
 80031ea:	604b      	str	r3, [r1, #4]
 80031ec:	4630      	mov	r0, r6
 80031ee:	f000 f82f 	bl	8003250 <__malloc_unlock>
 80031f2:	f104 000b 	add.w	r0, r4, #11
 80031f6:	1d23      	adds	r3, r4, #4
 80031f8:	f020 0007 	bic.w	r0, r0, #7
 80031fc:	1ac2      	subs	r2, r0, r3
 80031fe:	bf1c      	itt	ne
 8003200:	1a1b      	subne	r3, r3, r0
 8003202:	50a3      	strne	r3, [r4, r2]
 8003204:	e7af      	b.n	8003166 <_malloc_r+0x22>
 8003206:	6862      	ldr	r2, [r4, #4]
 8003208:	42a3      	cmp	r3, r4
 800320a:	bf0c      	ite	eq
 800320c:	f8c8 2000 	streq.w	r2, [r8]
 8003210:	605a      	strne	r2, [r3, #4]
 8003212:	e7eb      	b.n	80031ec <_malloc_r+0xa8>
 8003214:	4623      	mov	r3, r4
 8003216:	6864      	ldr	r4, [r4, #4]
 8003218:	e7ae      	b.n	8003178 <_malloc_r+0x34>
 800321a:	463c      	mov	r4, r7
 800321c:	687f      	ldr	r7, [r7, #4]
 800321e:	e7b6      	b.n	800318e <_malloc_r+0x4a>
 8003220:	461a      	mov	r2, r3
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	42a3      	cmp	r3, r4
 8003226:	d1fb      	bne.n	8003220 <_malloc_r+0xdc>
 8003228:	2300      	movs	r3, #0
 800322a:	6053      	str	r3, [r2, #4]
 800322c:	e7de      	b.n	80031ec <_malloc_r+0xa8>
 800322e:	230c      	movs	r3, #12
 8003230:	6033      	str	r3, [r6, #0]
 8003232:	4630      	mov	r0, r6
 8003234:	f000 f80c 	bl	8003250 <__malloc_unlock>
 8003238:	e794      	b.n	8003164 <_malloc_r+0x20>
 800323a:	6005      	str	r5, [r0, #0]
 800323c:	e7d6      	b.n	80031ec <_malloc_r+0xa8>
 800323e:	bf00      	nop
 8003240:	200002c4 	.word	0x200002c4

08003244 <__malloc_lock>:
 8003244:	4801      	ldr	r0, [pc, #4]	@ (800324c <__malloc_lock+0x8>)
 8003246:	f7ff bf0e 	b.w	8003066 <__retarget_lock_acquire_recursive>
 800324a:	bf00      	nop
 800324c:	200002bc 	.word	0x200002bc

08003250 <__malloc_unlock>:
 8003250:	4801      	ldr	r0, [pc, #4]	@ (8003258 <__malloc_unlock+0x8>)
 8003252:	f7ff bf09 	b.w	8003068 <__retarget_lock_release_recursive>
 8003256:	bf00      	nop
 8003258:	200002bc 	.word	0x200002bc

0800325c <__sfputc_r>:
 800325c:	6893      	ldr	r3, [r2, #8]
 800325e:	3b01      	subs	r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	b410      	push	{r4}
 8003264:	6093      	str	r3, [r2, #8]
 8003266:	da08      	bge.n	800327a <__sfputc_r+0x1e>
 8003268:	6994      	ldr	r4, [r2, #24]
 800326a:	42a3      	cmp	r3, r4
 800326c:	db01      	blt.n	8003272 <__sfputc_r+0x16>
 800326e:	290a      	cmp	r1, #10
 8003270:	d103      	bne.n	800327a <__sfputc_r+0x1e>
 8003272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003276:	f000 bb6b 	b.w	8003950 <__swbuf_r>
 800327a:	6813      	ldr	r3, [r2, #0]
 800327c:	1c58      	adds	r0, r3, #1
 800327e:	6010      	str	r0, [r2, #0]
 8003280:	7019      	strb	r1, [r3, #0]
 8003282:	4608      	mov	r0, r1
 8003284:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003288:	4770      	bx	lr

0800328a <__sfputs_r>:
 800328a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328c:	4606      	mov	r6, r0
 800328e:	460f      	mov	r7, r1
 8003290:	4614      	mov	r4, r2
 8003292:	18d5      	adds	r5, r2, r3
 8003294:	42ac      	cmp	r4, r5
 8003296:	d101      	bne.n	800329c <__sfputs_r+0x12>
 8003298:	2000      	movs	r0, #0
 800329a:	e007      	b.n	80032ac <__sfputs_r+0x22>
 800329c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a0:	463a      	mov	r2, r7
 80032a2:	4630      	mov	r0, r6
 80032a4:	f7ff ffda 	bl	800325c <__sfputc_r>
 80032a8:	1c43      	adds	r3, r0, #1
 80032aa:	d1f3      	bne.n	8003294 <__sfputs_r+0xa>
 80032ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032b0 <_vfiprintf_r>:
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	460d      	mov	r5, r1
 80032b6:	b09d      	sub	sp, #116	@ 0x74
 80032b8:	4614      	mov	r4, r2
 80032ba:	4698      	mov	r8, r3
 80032bc:	4606      	mov	r6, r0
 80032be:	b118      	cbz	r0, 80032c8 <_vfiprintf_r+0x18>
 80032c0:	6a03      	ldr	r3, [r0, #32]
 80032c2:	b90b      	cbnz	r3, 80032c8 <_vfiprintf_r+0x18>
 80032c4:	f7ff fdca 	bl	8002e5c <__sinit>
 80032c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032ca:	07d9      	lsls	r1, r3, #31
 80032cc:	d405      	bmi.n	80032da <_vfiprintf_r+0x2a>
 80032ce:	89ab      	ldrh	r3, [r5, #12]
 80032d0:	059a      	lsls	r2, r3, #22
 80032d2:	d402      	bmi.n	80032da <_vfiprintf_r+0x2a>
 80032d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032d6:	f7ff fec6 	bl	8003066 <__retarget_lock_acquire_recursive>
 80032da:	89ab      	ldrh	r3, [r5, #12]
 80032dc:	071b      	lsls	r3, r3, #28
 80032de:	d501      	bpl.n	80032e4 <_vfiprintf_r+0x34>
 80032e0:	692b      	ldr	r3, [r5, #16]
 80032e2:	b99b      	cbnz	r3, 800330c <_vfiprintf_r+0x5c>
 80032e4:	4629      	mov	r1, r5
 80032e6:	4630      	mov	r0, r6
 80032e8:	f000 fb70 	bl	80039cc <__swsetup_r>
 80032ec:	b170      	cbz	r0, 800330c <_vfiprintf_r+0x5c>
 80032ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032f0:	07dc      	lsls	r4, r3, #31
 80032f2:	d504      	bpl.n	80032fe <_vfiprintf_r+0x4e>
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	b01d      	add	sp, #116	@ 0x74
 80032fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032fe:	89ab      	ldrh	r3, [r5, #12]
 8003300:	0598      	lsls	r0, r3, #22
 8003302:	d4f7      	bmi.n	80032f4 <_vfiprintf_r+0x44>
 8003304:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003306:	f7ff feaf 	bl	8003068 <__retarget_lock_release_recursive>
 800330a:	e7f3      	b.n	80032f4 <_vfiprintf_r+0x44>
 800330c:	2300      	movs	r3, #0
 800330e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003310:	2320      	movs	r3, #32
 8003312:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003316:	f8cd 800c 	str.w	r8, [sp, #12]
 800331a:	2330      	movs	r3, #48	@ 0x30
 800331c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80034cc <_vfiprintf_r+0x21c>
 8003320:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003324:	f04f 0901 	mov.w	r9, #1
 8003328:	4623      	mov	r3, r4
 800332a:	469a      	mov	sl, r3
 800332c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003330:	b10a      	cbz	r2, 8003336 <_vfiprintf_r+0x86>
 8003332:	2a25      	cmp	r2, #37	@ 0x25
 8003334:	d1f9      	bne.n	800332a <_vfiprintf_r+0x7a>
 8003336:	ebba 0b04 	subs.w	fp, sl, r4
 800333a:	d00b      	beq.n	8003354 <_vfiprintf_r+0xa4>
 800333c:	465b      	mov	r3, fp
 800333e:	4622      	mov	r2, r4
 8003340:	4629      	mov	r1, r5
 8003342:	4630      	mov	r0, r6
 8003344:	f7ff ffa1 	bl	800328a <__sfputs_r>
 8003348:	3001      	adds	r0, #1
 800334a:	f000 80a7 	beq.w	800349c <_vfiprintf_r+0x1ec>
 800334e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003350:	445a      	add	r2, fp
 8003352:	9209      	str	r2, [sp, #36]	@ 0x24
 8003354:	f89a 3000 	ldrb.w	r3, [sl]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 809f 	beq.w	800349c <_vfiprintf_r+0x1ec>
 800335e:	2300      	movs	r3, #0
 8003360:	f04f 32ff 	mov.w	r2, #4294967295
 8003364:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003368:	f10a 0a01 	add.w	sl, sl, #1
 800336c:	9304      	str	r3, [sp, #16]
 800336e:	9307      	str	r3, [sp, #28]
 8003370:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003374:	931a      	str	r3, [sp, #104]	@ 0x68
 8003376:	4654      	mov	r4, sl
 8003378:	2205      	movs	r2, #5
 800337a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800337e:	4853      	ldr	r0, [pc, #332]	@ (80034cc <_vfiprintf_r+0x21c>)
 8003380:	f7fc ff26 	bl	80001d0 <memchr>
 8003384:	9a04      	ldr	r2, [sp, #16]
 8003386:	b9d8      	cbnz	r0, 80033c0 <_vfiprintf_r+0x110>
 8003388:	06d1      	lsls	r1, r2, #27
 800338a:	bf44      	itt	mi
 800338c:	2320      	movmi	r3, #32
 800338e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003392:	0713      	lsls	r3, r2, #28
 8003394:	bf44      	itt	mi
 8003396:	232b      	movmi	r3, #43	@ 0x2b
 8003398:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800339c:	f89a 3000 	ldrb.w	r3, [sl]
 80033a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80033a2:	d015      	beq.n	80033d0 <_vfiprintf_r+0x120>
 80033a4:	9a07      	ldr	r2, [sp, #28]
 80033a6:	4654      	mov	r4, sl
 80033a8:	2000      	movs	r0, #0
 80033aa:	f04f 0c0a 	mov.w	ip, #10
 80033ae:	4621      	mov	r1, r4
 80033b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033b4:	3b30      	subs	r3, #48	@ 0x30
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	d94b      	bls.n	8003452 <_vfiprintf_r+0x1a2>
 80033ba:	b1b0      	cbz	r0, 80033ea <_vfiprintf_r+0x13a>
 80033bc:	9207      	str	r2, [sp, #28]
 80033be:	e014      	b.n	80033ea <_vfiprintf_r+0x13a>
 80033c0:	eba0 0308 	sub.w	r3, r0, r8
 80033c4:	fa09 f303 	lsl.w	r3, r9, r3
 80033c8:	4313      	orrs	r3, r2
 80033ca:	9304      	str	r3, [sp, #16]
 80033cc:	46a2      	mov	sl, r4
 80033ce:	e7d2      	b.n	8003376 <_vfiprintf_r+0xc6>
 80033d0:	9b03      	ldr	r3, [sp, #12]
 80033d2:	1d19      	adds	r1, r3, #4
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	9103      	str	r1, [sp, #12]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	bfbb      	ittet	lt
 80033dc:	425b      	neglt	r3, r3
 80033de:	f042 0202 	orrlt.w	r2, r2, #2
 80033e2:	9307      	strge	r3, [sp, #28]
 80033e4:	9307      	strlt	r3, [sp, #28]
 80033e6:	bfb8      	it	lt
 80033e8:	9204      	strlt	r2, [sp, #16]
 80033ea:	7823      	ldrb	r3, [r4, #0]
 80033ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80033ee:	d10a      	bne.n	8003406 <_vfiprintf_r+0x156>
 80033f0:	7863      	ldrb	r3, [r4, #1]
 80033f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80033f4:	d132      	bne.n	800345c <_vfiprintf_r+0x1ac>
 80033f6:	9b03      	ldr	r3, [sp, #12]
 80033f8:	1d1a      	adds	r2, r3, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	9203      	str	r2, [sp, #12]
 80033fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003402:	3402      	adds	r4, #2
 8003404:	9305      	str	r3, [sp, #20]
 8003406:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80034dc <_vfiprintf_r+0x22c>
 800340a:	7821      	ldrb	r1, [r4, #0]
 800340c:	2203      	movs	r2, #3
 800340e:	4650      	mov	r0, sl
 8003410:	f7fc fede 	bl	80001d0 <memchr>
 8003414:	b138      	cbz	r0, 8003426 <_vfiprintf_r+0x176>
 8003416:	9b04      	ldr	r3, [sp, #16]
 8003418:	eba0 000a 	sub.w	r0, r0, sl
 800341c:	2240      	movs	r2, #64	@ 0x40
 800341e:	4082      	lsls	r2, r0
 8003420:	4313      	orrs	r3, r2
 8003422:	3401      	adds	r4, #1
 8003424:	9304      	str	r3, [sp, #16]
 8003426:	f814 1b01 	ldrb.w	r1, [r4], #1
 800342a:	4829      	ldr	r0, [pc, #164]	@ (80034d0 <_vfiprintf_r+0x220>)
 800342c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003430:	2206      	movs	r2, #6
 8003432:	f7fc fecd 	bl	80001d0 <memchr>
 8003436:	2800      	cmp	r0, #0
 8003438:	d03f      	beq.n	80034ba <_vfiprintf_r+0x20a>
 800343a:	4b26      	ldr	r3, [pc, #152]	@ (80034d4 <_vfiprintf_r+0x224>)
 800343c:	bb1b      	cbnz	r3, 8003486 <_vfiprintf_r+0x1d6>
 800343e:	9b03      	ldr	r3, [sp, #12]
 8003440:	3307      	adds	r3, #7
 8003442:	f023 0307 	bic.w	r3, r3, #7
 8003446:	3308      	adds	r3, #8
 8003448:	9303      	str	r3, [sp, #12]
 800344a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800344c:	443b      	add	r3, r7
 800344e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003450:	e76a      	b.n	8003328 <_vfiprintf_r+0x78>
 8003452:	fb0c 3202 	mla	r2, ip, r2, r3
 8003456:	460c      	mov	r4, r1
 8003458:	2001      	movs	r0, #1
 800345a:	e7a8      	b.n	80033ae <_vfiprintf_r+0xfe>
 800345c:	2300      	movs	r3, #0
 800345e:	3401      	adds	r4, #1
 8003460:	9305      	str	r3, [sp, #20]
 8003462:	4619      	mov	r1, r3
 8003464:	f04f 0c0a 	mov.w	ip, #10
 8003468:	4620      	mov	r0, r4
 800346a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800346e:	3a30      	subs	r2, #48	@ 0x30
 8003470:	2a09      	cmp	r2, #9
 8003472:	d903      	bls.n	800347c <_vfiprintf_r+0x1cc>
 8003474:	2b00      	cmp	r3, #0
 8003476:	d0c6      	beq.n	8003406 <_vfiprintf_r+0x156>
 8003478:	9105      	str	r1, [sp, #20]
 800347a:	e7c4      	b.n	8003406 <_vfiprintf_r+0x156>
 800347c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003480:	4604      	mov	r4, r0
 8003482:	2301      	movs	r3, #1
 8003484:	e7f0      	b.n	8003468 <_vfiprintf_r+0x1b8>
 8003486:	ab03      	add	r3, sp, #12
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	462a      	mov	r2, r5
 800348c:	4b12      	ldr	r3, [pc, #72]	@ (80034d8 <_vfiprintf_r+0x228>)
 800348e:	a904      	add	r1, sp, #16
 8003490:	4630      	mov	r0, r6
 8003492:	f3af 8000 	nop.w
 8003496:	4607      	mov	r7, r0
 8003498:	1c78      	adds	r0, r7, #1
 800349a:	d1d6      	bne.n	800344a <_vfiprintf_r+0x19a>
 800349c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800349e:	07d9      	lsls	r1, r3, #31
 80034a0:	d405      	bmi.n	80034ae <_vfiprintf_r+0x1fe>
 80034a2:	89ab      	ldrh	r3, [r5, #12]
 80034a4:	059a      	lsls	r2, r3, #22
 80034a6:	d402      	bmi.n	80034ae <_vfiprintf_r+0x1fe>
 80034a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80034aa:	f7ff fddd 	bl	8003068 <__retarget_lock_release_recursive>
 80034ae:	89ab      	ldrh	r3, [r5, #12]
 80034b0:	065b      	lsls	r3, r3, #25
 80034b2:	f53f af1f 	bmi.w	80032f4 <_vfiprintf_r+0x44>
 80034b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034b8:	e71e      	b.n	80032f8 <_vfiprintf_r+0x48>
 80034ba:	ab03      	add	r3, sp, #12
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	462a      	mov	r2, r5
 80034c0:	4b05      	ldr	r3, [pc, #20]	@ (80034d8 <_vfiprintf_r+0x228>)
 80034c2:	a904      	add	r1, sp, #16
 80034c4:	4630      	mov	r0, r6
 80034c6:	f000 f879 	bl	80035bc <_printf_i>
 80034ca:	e7e4      	b.n	8003496 <_vfiprintf_r+0x1e6>
 80034cc:	08003c04 	.word	0x08003c04
 80034d0:	08003c0e 	.word	0x08003c0e
 80034d4:	00000000 	.word	0x00000000
 80034d8:	0800328b 	.word	0x0800328b
 80034dc:	08003c0a 	.word	0x08003c0a

080034e0 <_printf_common>:
 80034e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e4:	4616      	mov	r6, r2
 80034e6:	4698      	mov	r8, r3
 80034e8:	688a      	ldr	r2, [r1, #8]
 80034ea:	690b      	ldr	r3, [r1, #16]
 80034ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bfb8      	it	lt
 80034f4:	4613      	movlt	r3, r2
 80034f6:	6033      	str	r3, [r6, #0]
 80034f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034fc:	4607      	mov	r7, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	b10a      	cbz	r2, 8003506 <_printf_common+0x26>
 8003502:	3301      	adds	r3, #1
 8003504:	6033      	str	r3, [r6, #0]
 8003506:	6823      	ldr	r3, [r4, #0]
 8003508:	0699      	lsls	r1, r3, #26
 800350a:	bf42      	ittt	mi
 800350c:	6833      	ldrmi	r3, [r6, #0]
 800350e:	3302      	addmi	r3, #2
 8003510:	6033      	strmi	r3, [r6, #0]
 8003512:	6825      	ldr	r5, [r4, #0]
 8003514:	f015 0506 	ands.w	r5, r5, #6
 8003518:	d106      	bne.n	8003528 <_printf_common+0x48>
 800351a:	f104 0a19 	add.w	sl, r4, #25
 800351e:	68e3      	ldr	r3, [r4, #12]
 8003520:	6832      	ldr	r2, [r6, #0]
 8003522:	1a9b      	subs	r3, r3, r2
 8003524:	42ab      	cmp	r3, r5
 8003526:	dc26      	bgt.n	8003576 <_printf_common+0x96>
 8003528:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800352c:	6822      	ldr	r2, [r4, #0]
 800352e:	3b00      	subs	r3, #0
 8003530:	bf18      	it	ne
 8003532:	2301      	movne	r3, #1
 8003534:	0692      	lsls	r2, r2, #26
 8003536:	d42b      	bmi.n	8003590 <_printf_common+0xb0>
 8003538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800353c:	4641      	mov	r1, r8
 800353e:	4638      	mov	r0, r7
 8003540:	47c8      	blx	r9
 8003542:	3001      	adds	r0, #1
 8003544:	d01e      	beq.n	8003584 <_printf_common+0xa4>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	6922      	ldr	r2, [r4, #16]
 800354a:	f003 0306 	and.w	r3, r3, #6
 800354e:	2b04      	cmp	r3, #4
 8003550:	bf02      	ittt	eq
 8003552:	68e5      	ldreq	r5, [r4, #12]
 8003554:	6833      	ldreq	r3, [r6, #0]
 8003556:	1aed      	subeq	r5, r5, r3
 8003558:	68a3      	ldr	r3, [r4, #8]
 800355a:	bf0c      	ite	eq
 800355c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003560:	2500      	movne	r5, #0
 8003562:	4293      	cmp	r3, r2
 8003564:	bfc4      	itt	gt
 8003566:	1a9b      	subgt	r3, r3, r2
 8003568:	18ed      	addgt	r5, r5, r3
 800356a:	2600      	movs	r6, #0
 800356c:	341a      	adds	r4, #26
 800356e:	42b5      	cmp	r5, r6
 8003570:	d11a      	bne.n	80035a8 <_printf_common+0xc8>
 8003572:	2000      	movs	r0, #0
 8003574:	e008      	b.n	8003588 <_printf_common+0xa8>
 8003576:	2301      	movs	r3, #1
 8003578:	4652      	mov	r2, sl
 800357a:	4641      	mov	r1, r8
 800357c:	4638      	mov	r0, r7
 800357e:	47c8      	blx	r9
 8003580:	3001      	adds	r0, #1
 8003582:	d103      	bne.n	800358c <_printf_common+0xac>
 8003584:	f04f 30ff 	mov.w	r0, #4294967295
 8003588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800358c:	3501      	adds	r5, #1
 800358e:	e7c6      	b.n	800351e <_printf_common+0x3e>
 8003590:	18e1      	adds	r1, r4, r3
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	2030      	movs	r0, #48	@ 0x30
 8003596:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800359a:	4422      	add	r2, r4
 800359c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035a4:	3302      	adds	r3, #2
 80035a6:	e7c7      	b.n	8003538 <_printf_common+0x58>
 80035a8:	2301      	movs	r3, #1
 80035aa:	4622      	mov	r2, r4
 80035ac:	4641      	mov	r1, r8
 80035ae:	4638      	mov	r0, r7
 80035b0:	47c8      	blx	r9
 80035b2:	3001      	adds	r0, #1
 80035b4:	d0e6      	beq.n	8003584 <_printf_common+0xa4>
 80035b6:	3601      	adds	r6, #1
 80035b8:	e7d9      	b.n	800356e <_printf_common+0x8e>
	...

080035bc <_printf_i>:
 80035bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035c0:	7e0f      	ldrb	r7, [r1, #24]
 80035c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035c4:	2f78      	cmp	r7, #120	@ 0x78
 80035c6:	4691      	mov	r9, r2
 80035c8:	4680      	mov	r8, r0
 80035ca:	460c      	mov	r4, r1
 80035cc:	469a      	mov	sl, r3
 80035ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035d2:	d807      	bhi.n	80035e4 <_printf_i+0x28>
 80035d4:	2f62      	cmp	r7, #98	@ 0x62
 80035d6:	d80a      	bhi.n	80035ee <_printf_i+0x32>
 80035d8:	2f00      	cmp	r7, #0
 80035da:	f000 80d1 	beq.w	8003780 <_printf_i+0x1c4>
 80035de:	2f58      	cmp	r7, #88	@ 0x58
 80035e0:	f000 80b8 	beq.w	8003754 <_printf_i+0x198>
 80035e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035ec:	e03a      	b.n	8003664 <_printf_i+0xa8>
 80035ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035f2:	2b15      	cmp	r3, #21
 80035f4:	d8f6      	bhi.n	80035e4 <_printf_i+0x28>
 80035f6:	a101      	add	r1, pc, #4	@ (adr r1, 80035fc <_printf_i+0x40>)
 80035f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035fc:	08003655 	.word	0x08003655
 8003600:	08003669 	.word	0x08003669
 8003604:	080035e5 	.word	0x080035e5
 8003608:	080035e5 	.word	0x080035e5
 800360c:	080035e5 	.word	0x080035e5
 8003610:	080035e5 	.word	0x080035e5
 8003614:	08003669 	.word	0x08003669
 8003618:	080035e5 	.word	0x080035e5
 800361c:	080035e5 	.word	0x080035e5
 8003620:	080035e5 	.word	0x080035e5
 8003624:	080035e5 	.word	0x080035e5
 8003628:	08003767 	.word	0x08003767
 800362c:	08003693 	.word	0x08003693
 8003630:	08003721 	.word	0x08003721
 8003634:	080035e5 	.word	0x080035e5
 8003638:	080035e5 	.word	0x080035e5
 800363c:	08003789 	.word	0x08003789
 8003640:	080035e5 	.word	0x080035e5
 8003644:	08003693 	.word	0x08003693
 8003648:	080035e5 	.word	0x080035e5
 800364c:	080035e5 	.word	0x080035e5
 8003650:	08003729 	.word	0x08003729
 8003654:	6833      	ldr	r3, [r6, #0]
 8003656:	1d1a      	adds	r2, r3, #4
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	6032      	str	r2, [r6, #0]
 800365c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003660:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003664:	2301      	movs	r3, #1
 8003666:	e09c      	b.n	80037a2 <_printf_i+0x1e6>
 8003668:	6833      	ldr	r3, [r6, #0]
 800366a:	6820      	ldr	r0, [r4, #0]
 800366c:	1d19      	adds	r1, r3, #4
 800366e:	6031      	str	r1, [r6, #0]
 8003670:	0606      	lsls	r6, r0, #24
 8003672:	d501      	bpl.n	8003678 <_printf_i+0xbc>
 8003674:	681d      	ldr	r5, [r3, #0]
 8003676:	e003      	b.n	8003680 <_printf_i+0xc4>
 8003678:	0645      	lsls	r5, r0, #25
 800367a:	d5fb      	bpl.n	8003674 <_printf_i+0xb8>
 800367c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003680:	2d00      	cmp	r5, #0
 8003682:	da03      	bge.n	800368c <_printf_i+0xd0>
 8003684:	232d      	movs	r3, #45	@ 0x2d
 8003686:	426d      	negs	r5, r5
 8003688:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800368c:	4858      	ldr	r0, [pc, #352]	@ (80037f0 <_printf_i+0x234>)
 800368e:	230a      	movs	r3, #10
 8003690:	e011      	b.n	80036b6 <_printf_i+0xfa>
 8003692:	6821      	ldr	r1, [r4, #0]
 8003694:	6833      	ldr	r3, [r6, #0]
 8003696:	0608      	lsls	r0, r1, #24
 8003698:	f853 5b04 	ldr.w	r5, [r3], #4
 800369c:	d402      	bmi.n	80036a4 <_printf_i+0xe8>
 800369e:	0649      	lsls	r1, r1, #25
 80036a0:	bf48      	it	mi
 80036a2:	b2ad      	uxthmi	r5, r5
 80036a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80036a6:	4852      	ldr	r0, [pc, #328]	@ (80037f0 <_printf_i+0x234>)
 80036a8:	6033      	str	r3, [r6, #0]
 80036aa:	bf14      	ite	ne
 80036ac:	230a      	movne	r3, #10
 80036ae:	2308      	moveq	r3, #8
 80036b0:	2100      	movs	r1, #0
 80036b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036b6:	6866      	ldr	r6, [r4, #4]
 80036b8:	60a6      	str	r6, [r4, #8]
 80036ba:	2e00      	cmp	r6, #0
 80036bc:	db05      	blt.n	80036ca <_printf_i+0x10e>
 80036be:	6821      	ldr	r1, [r4, #0]
 80036c0:	432e      	orrs	r6, r5
 80036c2:	f021 0104 	bic.w	r1, r1, #4
 80036c6:	6021      	str	r1, [r4, #0]
 80036c8:	d04b      	beq.n	8003762 <_printf_i+0x1a6>
 80036ca:	4616      	mov	r6, r2
 80036cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80036d0:	fb03 5711 	mls	r7, r3, r1, r5
 80036d4:	5dc7      	ldrb	r7, [r0, r7]
 80036d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036da:	462f      	mov	r7, r5
 80036dc:	42bb      	cmp	r3, r7
 80036de:	460d      	mov	r5, r1
 80036e0:	d9f4      	bls.n	80036cc <_printf_i+0x110>
 80036e2:	2b08      	cmp	r3, #8
 80036e4:	d10b      	bne.n	80036fe <_printf_i+0x142>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	07df      	lsls	r7, r3, #31
 80036ea:	d508      	bpl.n	80036fe <_printf_i+0x142>
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	6861      	ldr	r1, [r4, #4]
 80036f0:	4299      	cmp	r1, r3
 80036f2:	bfde      	ittt	le
 80036f4:	2330      	movle	r3, #48	@ 0x30
 80036f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036fa:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036fe:	1b92      	subs	r2, r2, r6
 8003700:	6122      	str	r2, [r4, #16]
 8003702:	f8cd a000 	str.w	sl, [sp]
 8003706:	464b      	mov	r3, r9
 8003708:	aa03      	add	r2, sp, #12
 800370a:	4621      	mov	r1, r4
 800370c:	4640      	mov	r0, r8
 800370e:	f7ff fee7 	bl	80034e0 <_printf_common>
 8003712:	3001      	adds	r0, #1
 8003714:	d14a      	bne.n	80037ac <_printf_i+0x1f0>
 8003716:	f04f 30ff 	mov.w	r0, #4294967295
 800371a:	b004      	add	sp, #16
 800371c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	f043 0320 	orr.w	r3, r3, #32
 8003726:	6023      	str	r3, [r4, #0]
 8003728:	4832      	ldr	r0, [pc, #200]	@ (80037f4 <_printf_i+0x238>)
 800372a:	2778      	movs	r7, #120	@ 0x78
 800372c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	6831      	ldr	r1, [r6, #0]
 8003734:	061f      	lsls	r7, r3, #24
 8003736:	f851 5b04 	ldr.w	r5, [r1], #4
 800373a:	d402      	bmi.n	8003742 <_printf_i+0x186>
 800373c:	065f      	lsls	r7, r3, #25
 800373e:	bf48      	it	mi
 8003740:	b2ad      	uxthmi	r5, r5
 8003742:	6031      	str	r1, [r6, #0]
 8003744:	07d9      	lsls	r1, r3, #31
 8003746:	bf44      	itt	mi
 8003748:	f043 0320 	orrmi.w	r3, r3, #32
 800374c:	6023      	strmi	r3, [r4, #0]
 800374e:	b11d      	cbz	r5, 8003758 <_printf_i+0x19c>
 8003750:	2310      	movs	r3, #16
 8003752:	e7ad      	b.n	80036b0 <_printf_i+0xf4>
 8003754:	4826      	ldr	r0, [pc, #152]	@ (80037f0 <_printf_i+0x234>)
 8003756:	e7e9      	b.n	800372c <_printf_i+0x170>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	f023 0320 	bic.w	r3, r3, #32
 800375e:	6023      	str	r3, [r4, #0]
 8003760:	e7f6      	b.n	8003750 <_printf_i+0x194>
 8003762:	4616      	mov	r6, r2
 8003764:	e7bd      	b.n	80036e2 <_printf_i+0x126>
 8003766:	6833      	ldr	r3, [r6, #0]
 8003768:	6825      	ldr	r5, [r4, #0]
 800376a:	6961      	ldr	r1, [r4, #20]
 800376c:	1d18      	adds	r0, r3, #4
 800376e:	6030      	str	r0, [r6, #0]
 8003770:	062e      	lsls	r6, r5, #24
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	d501      	bpl.n	800377a <_printf_i+0x1be>
 8003776:	6019      	str	r1, [r3, #0]
 8003778:	e002      	b.n	8003780 <_printf_i+0x1c4>
 800377a:	0668      	lsls	r0, r5, #25
 800377c:	d5fb      	bpl.n	8003776 <_printf_i+0x1ba>
 800377e:	8019      	strh	r1, [r3, #0]
 8003780:	2300      	movs	r3, #0
 8003782:	6123      	str	r3, [r4, #16]
 8003784:	4616      	mov	r6, r2
 8003786:	e7bc      	b.n	8003702 <_printf_i+0x146>
 8003788:	6833      	ldr	r3, [r6, #0]
 800378a:	1d1a      	adds	r2, r3, #4
 800378c:	6032      	str	r2, [r6, #0]
 800378e:	681e      	ldr	r6, [r3, #0]
 8003790:	6862      	ldr	r2, [r4, #4]
 8003792:	2100      	movs	r1, #0
 8003794:	4630      	mov	r0, r6
 8003796:	f7fc fd1b 	bl	80001d0 <memchr>
 800379a:	b108      	cbz	r0, 80037a0 <_printf_i+0x1e4>
 800379c:	1b80      	subs	r0, r0, r6
 800379e:	6060      	str	r0, [r4, #4]
 80037a0:	6863      	ldr	r3, [r4, #4]
 80037a2:	6123      	str	r3, [r4, #16]
 80037a4:	2300      	movs	r3, #0
 80037a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037aa:	e7aa      	b.n	8003702 <_printf_i+0x146>
 80037ac:	6923      	ldr	r3, [r4, #16]
 80037ae:	4632      	mov	r2, r6
 80037b0:	4649      	mov	r1, r9
 80037b2:	4640      	mov	r0, r8
 80037b4:	47d0      	blx	sl
 80037b6:	3001      	adds	r0, #1
 80037b8:	d0ad      	beq.n	8003716 <_printf_i+0x15a>
 80037ba:	6823      	ldr	r3, [r4, #0]
 80037bc:	079b      	lsls	r3, r3, #30
 80037be:	d413      	bmi.n	80037e8 <_printf_i+0x22c>
 80037c0:	68e0      	ldr	r0, [r4, #12]
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	4298      	cmp	r0, r3
 80037c6:	bfb8      	it	lt
 80037c8:	4618      	movlt	r0, r3
 80037ca:	e7a6      	b.n	800371a <_printf_i+0x15e>
 80037cc:	2301      	movs	r3, #1
 80037ce:	4632      	mov	r2, r6
 80037d0:	4649      	mov	r1, r9
 80037d2:	4640      	mov	r0, r8
 80037d4:	47d0      	blx	sl
 80037d6:	3001      	adds	r0, #1
 80037d8:	d09d      	beq.n	8003716 <_printf_i+0x15a>
 80037da:	3501      	adds	r5, #1
 80037dc:	68e3      	ldr	r3, [r4, #12]
 80037de:	9903      	ldr	r1, [sp, #12]
 80037e0:	1a5b      	subs	r3, r3, r1
 80037e2:	42ab      	cmp	r3, r5
 80037e4:	dcf2      	bgt.n	80037cc <_printf_i+0x210>
 80037e6:	e7eb      	b.n	80037c0 <_printf_i+0x204>
 80037e8:	2500      	movs	r5, #0
 80037ea:	f104 0619 	add.w	r6, r4, #25
 80037ee:	e7f5      	b.n	80037dc <_printf_i+0x220>
 80037f0:	08003c15 	.word	0x08003c15
 80037f4:	08003c26 	.word	0x08003c26

080037f8 <__sflush_r>:
 80037f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003800:	0716      	lsls	r6, r2, #28
 8003802:	4605      	mov	r5, r0
 8003804:	460c      	mov	r4, r1
 8003806:	d454      	bmi.n	80038b2 <__sflush_r+0xba>
 8003808:	684b      	ldr	r3, [r1, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	dc02      	bgt.n	8003814 <__sflush_r+0x1c>
 800380e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003810:	2b00      	cmp	r3, #0
 8003812:	dd48      	ble.n	80038a6 <__sflush_r+0xae>
 8003814:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003816:	2e00      	cmp	r6, #0
 8003818:	d045      	beq.n	80038a6 <__sflush_r+0xae>
 800381a:	2300      	movs	r3, #0
 800381c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003820:	682f      	ldr	r7, [r5, #0]
 8003822:	6a21      	ldr	r1, [r4, #32]
 8003824:	602b      	str	r3, [r5, #0]
 8003826:	d030      	beq.n	800388a <__sflush_r+0x92>
 8003828:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800382a:	89a3      	ldrh	r3, [r4, #12]
 800382c:	0759      	lsls	r1, r3, #29
 800382e:	d505      	bpl.n	800383c <__sflush_r+0x44>
 8003830:	6863      	ldr	r3, [r4, #4]
 8003832:	1ad2      	subs	r2, r2, r3
 8003834:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003836:	b10b      	cbz	r3, 800383c <__sflush_r+0x44>
 8003838:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800383a:	1ad2      	subs	r2, r2, r3
 800383c:	2300      	movs	r3, #0
 800383e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003840:	6a21      	ldr	r1, [r4, #32]
 8003842:	4628      	mov	r0, r5
 8003844:	47b0      	blx	r6
 8003846:	1c43      	adds	r3, r0, #1
 8003848:	89a3      	ldrh	r3, [r4, #12]
 800384a:	d106      	bne.n	800385a <__sflush_r+0x62>
 800384c:	6829      	ldr	r1, [r5, #0]
 800384e:	291d      	cmp	r1, #29
 8003850:	d82b      	bhi.n	80038aa <__sflush_r+0xb2>
 8003852:	4a2a      	ldr	r2, [pc, #168]	@ (80038fc <__sflush_r+0x104>)
 8003854:	40ca      	lsrs	r2, r1
 8003856:	07d6      	lsls	r6, r2, #31
 8003858:	d527      	bpl.n	80038aa <__sflush_r+0xb2>
 800385a:	2200      	movs	r2, #0
 800385c:	6062      	str	r2, [r4, #4]
 800385e:	04d9      	lsls	r1, r3, #19
 8003860:	6922      	ldr	r2, [r4, #16]
 8003862:	6022      	str	r2, [r4, #0]
 8003864:	d504      	bpl.n	8003870 <__sflush_r+0x78>
 8003866:	1c42      	adds	r2, r0, #1
 8003868:	d101      	bne.n	800386e <__sflush_r+0x76>
 800386a:	682b      	ldr	r3, [r5, #0]
 800386c:	b903      	cbnz	r3, 8003870 <__sflush_r+0x78>
 800386e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003872:	602f      	str	r7, [r5, #0]
 8003874:	b1b9      	cbz	r1, 80038a6 <__sflush_r+0xae>
 8003876:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800387a:	4299      	cmp	r1, r3
 800387c:	d002      	beq.n	8003884 <__sflush_r+0x8c>
 800387e:	4628      	mov	r0, r5
 8003880:	f7ff fbf4 	bl	800306c <_free_r>
 8003884:	2300      	movs	r3, #0
 8003886:	6363      	str	r3, [r4, #52]	@ 0x34
 8003888:	e00d      	b.n	80038a6 <__sflush_r+0xae>
 800388a:	2301      	movs	r3, #1
 800388c:	4628      	mov	r0, r5
 800388e:	47b0      	blx	r6
 8003890:	4602      	mov	r2, r0
 8003892:	1c50      	adds	r0, r2, #1
 8003894:	d1c9      	bne.n	800382a <__sflush_r+0x32>
 8003896:	682b      	ldr	r3, [r5, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d0c6      	beq.n	800382a <__sflush_r+0x32>
 800389c:	2b1d      	cmp	r3, #29
 800389e:	d001      	beq.n	80038a4 <__sflush_r+0xac>
 80038a0:	2b16      	cmp	r3, #22
 80038a2:	d11e      	bne.n	80038e2 <__sflush_r+0xea>
 80038a4:	602f      	str	r7, [r5, #0]
 80038a6:	2000      	movs	r0, #0
 80038a8:	e022      	b.n	80038f0 <__sflush_r+0xf8>
 80038aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ae:	b21b      	sxth	r3, r3
 80038b0:	e01b      	b.n	80038ea <__sflush_r+0xf2>
 80038b2:	690f      	ldr	r7, [r1, #16]
 80038b4:	2f00      	cmp	r7, #0
 80038b6:	d0f6      	beq.n	80038a6 <__sflush_r+0xae>
 80038b8:	0793      	lsls	r3, r2, #30
 80038ba:	680e      	ldr	r6, [r1, #0]
 80038bc:	bf08      	it	eq
 80038be:	694b      	ldreq	r3, [r1, #20]
 80038c0:	600f      	str	r7, [r1, #0]
 80038c2:	bf18      	it	ne
 80038c4:	2300      	movne	r3, #0
 80038c6:	eba6 0807 	sub.w	r8, r6, r7
 80038ca:	608b      	str	r3, [r1, #8]
 80038cc:	f1b8 0f00 	cmp.w	r8, #0
 80038d0:	dde9      	ble.n	80038a6 <__sflush_r+0xae>
 80038d2:	6a21      	ldr	r1, [r4, #32]
 80038d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80038d6:	4643      	mov	r3, r8
 80038d8:	463a      	mov	r2, r7
 80038da:	4628      	mov	r0, r5
 80038dc:	47b0      	blx	r6
 80038de:	2800      	cmp	r0, #0
 80038e0:	dc08      	bgt.n	80038f4 <__sflush_r+0xfc>
 80038e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038ea:	81a3      	strh	r3, [r4, #12]
 80038ec:	f04f 30ff 	mov.w	r0, #4294967295
 80038f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038f4:	4407      	add	r7, r0
 80038f6:	eba8 0800 	sub.w	r8, r8, r0
 80038fa:	e7e7      	b.n	80038cc <__sflush_r+0xd4>
 80038fc:	20400001 	.word	0x20400001

08003900 <_fflush_r>:
 8003900:	b538      	push	{r3, r4, r5, lr}
 8003902:	690b      	ldr	r3, [r1, #16]
 8003904:	4605      	mov	r5, r0
 8003906:	460c      	mov	r4, r1
 8003908:	b913      	cbnz	r3, 8003910 <_fflush_r+0x10>
 800390a:	2500      	movs	r5, #0
 800390c:	4628      	mov	r0, r5
 800390e:	bd38      	pop	{r3, r4, r5, pc}
 8003910:	b118      	cbz	r0, 800391a <_fflush_r+0x1a>
 8003912:	6a03      	ldr	r3, [r0, #32]
 8003914:	b90b      	cbnz	r3, 800391a <_fflush_r+0x1a>
 8003916:	f7ff faa1 	bl	8002e5c <__sinit>
 800391a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f3      	beq.n	800390a <_fflush_r+0xa>
 8003922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003924:	07d0      	lsls	r0, r2, #31
 8003926:	d404      	bmi.n	8003932 <_fflush_r+0x32>
 8003928:	0599      	lsls	r1, r3, #22
 800392a:	d402      	bmi.n	8003932 <_fflush_r+0x32>
 800392c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800392e:	f7ff fb9a 	bl	8003066 <__retarget_lock_acquire_recursive>
 8003932:	4628      	mov	r0, r5
 8003934:	4621      	mov	r1, r4
 8003936:	f7ff ff5f 	bl	80037f8 <__sflush_r>
 800393a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800393c:	07da      	lsls	r2, r3, #31
 800393e:	4605      	mov	r5, r0
 8003940:	d4e4      	bmi.n	800390c <_fflush_r+0xc>
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	059b      	lsls	r3, r3, #22
 8003946:	d4e1      	bmi.n	800390c <_fflush_r+0xc>
 8003948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800394a:	f7ff fb8d 	bl	8003068 <__retarget_lock_release_recursive>
 800394e:	e7dd      	b.n	800390c <_fflush_r+0xc>

08003950 <__swbuf_r>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	460e      	mov	r6, r1
 8003954:	4614      	mov	r4, r2
 8003956:	4605      	mov	r5, r0
 8003958:	b118      	cbz	r0, 8003962 <__swbuf_r+0x12>
 800395a:	6a03      	ldr	r3, [r0, #32]
 800395c:	b90b      	cbnz	r3, 8003962 <__swbuf_r+0x12>
 800395e:	f7ff fa7d 	bl	8002e5c <__sinit>
 8003962:	69a3      	ldr	r3, [r4, #24]
 8003964:	60a3      	str	r3, [r4, #8]
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	071a      	lsls	r2, r3, #28
 800396a:	d501      	bpl.n	8003970 <__swbuf_r+0x20>
 800396c:	6923      	ldr	r3, [r4, #16]
 800396e:	b943      	cbnz	r3, 8003982 <__swbuf_r+0x32>
 8003970:	4621      	mov	r1, r4
 8003972:	4628      	mov	r0, r5
 8003974:	f000 f82a 	bl	80039cc <__swsetup_r>
 8003978:	b118      	cbz	r0, 8003982 <__swbuf_r+0x32>
 800397a:	f04f 37ff 	mov.w	r7, #4294967295
 800397e:	4638      	mov	r0, r7
 8003980:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	6922      	ldr	r2, [r4, #16]
 8003986:	1a98      	subs	r0, r3, r2
 8003988:	6963      	ldr	r3, [r4, #20]
 800398a:	b2f6      	uxtb	r6, r6
 800398c:	4283      	cmp	r3, r0
 800398e:	4637      	mov	r7, r6
 8003990:	dc05      	bgt.n	800399e <__swbuf_r+0x4e>
 8003992:	4621      	mov	r1, r4
 8003994:	4628      	mov	r0, r5
 8003996:	f7ff ffb3 	bl	8003900 <_fflush_r>
 800399a:	2800      	cmp	r0, #0
 800399c:	d1ed      	bne.n	800397a <__swbuf_r+0x2a>
 800399e:	68a3      	ldr	r3, [r4, #8]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	60a3      	str	r3, [r4, #8]
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	1c5a      	adds	r2, r3, #1
 80039a8:	6022      	str	r2, [r4, #0]
 80039aa:	701e      	strb	r6, [r3, #0]
 80039ac:	6962      	ldr	r2, [r4, #20]
 80039ae:	1c43      	adds	r3, r0, #1
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d004      	beq.n	80039be <__swbuf_r+0x6e>
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	07db      	lsls	r3, r3, #31
 80039b8:	d5e1      	bpl.n	800397e <__swbuf_r+0x2e>
 80039ba:	2e0a      	cmp	r6, #10
 80039bc:	d1df      	bne.n	800397e <__swbuf_r+0x2e>
 80039be:	4621      	mov	r1, r4
 80039c0:	4628      	mov	r0, r5
 80039c2:	f7ff ff9d 	bl	8003900 <_fflush_r>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d0d9      	beq.n	800397e <__swbuf_r+0x2e>
 80039ca:	e7d6      	b.n	800397a <__swbuf_r+0x2a>

080039cc <__swsetup_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	4b29      	ldr	r3, [pc, #164]	@ (8003a74 <__swsetup_r+0xa8>)
 80039d0:	4605      	mov	r5, r0
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	460c      	mov	r4, r1
 80039d6:	b118      	cbz	r0, 80039e0 <__swsetup_r+0x14>
 80039d8:	6a03      	ldr	r3, [r0, #32]
 80039da:	b90b      	cbnz	r3, 80039e0 <__swsetup_r+0x14>
 80039dc:	f7ff fa3e 	bl	8002e5c <__sinit>
 80039e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039e4:	0719      	lsls	r1, r3, #28
 80039e6:	d422      	bmi.n	8003a2e <__swsetup_r+0x62>
 80039e8:	06da      	lsls	r2, r3, #27
 80039ea:	d407      	bmi.n	80039fc <__swsetup_r+0x30>
 80039ec:	2209      	movs	r2, #9
 80039ee:	602a      	str	r2, [r5, #0]
 80039f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039f4:	81a3      	strh	r3, [r4, #12]
 80039f6:	f04f 30ff 	mov.w	r0, #4294967295
 80039fa:	e033      	b.n	8003a64 <__swsetup_r+0x98>
 80039fc:	0758      	lsls	r0, r3, #29
 80039fe:	d512      	bpl.n	8003a26 <__swsetup_r+0x5a>
 8003a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003a02:	b141      	cbz	r1, 8003a16 <__swsetup_r+0x4a>
 8003a04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003a08:	4299      	cmp	r1, r3
 8003a0a:	d002      	beq.n	8003a12 <__swsetup_r+0x46>
 8003a0c:	4628      	mov	r0, r5
 8003a0e:	f7ff fb2d 	bl	800306c <_free_r>
 8003a12:	2300      	movs	r3, #0
 8003a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a16:	89a3      	ldrh	r3, [r4, #12]
 8003a18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a1c:	81a3      	strh	r3, [r4, #12]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	6063      	str	r3, [r4, #4]
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	6023      	str	r3, [r4, #0]
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f043 0308 	orr.w	r3, r3, #8
 8003a2c:	81a3      	strh	r3, [r4, #12]
 8003a2e:	6923      	ldr	r3, [r4, #16]
 8003a30:	b94b      	cbnz	r3, 8003a46 <__swsetup_r+0x7a>
 8003a32:	89a3      	ldrh	r3, [r4, #12]
 8003a34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a3c:	d003      	beq.n	8003a46 <__swsetup_r+0x7a>
 8003a3e:	4621      	mov	r1, r4
 8003a40:	4628      	mov	r0, r5
 8003a42:	f000 f84f 	bl	8003ae4 <__smakebuf_r>
 8003a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a4a:	f013 0201 	ands.w	r2, r3, #1
 8003a4e:	d00a      	beq.n	8003a66 <__swsetup_r+0x9a>
 8003a50:	2200      	movs	r2, #0
 8003a52:	60a2      	str	r2, [r4, #8]
 8003a54:	6962      	ldr	r2, [r4, #20]
 8003a56:	4252      	negs	r2, r2
 8003a58:	61a2      	str	r2, [r4, #24]
 8003a5a:	6922      	ldr	r2, [r4, #16]
 8003a5c:	b942      	cbnz	r2, 8003a70 <__swsetup_r+0xa4>
 8003a5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a62:	d1c5      	bne.n	80039f0 <__swsetup_r+0x24>
 8003a64:	bd38      	pop	{r3, r4, r5, pc}
 8003a66:	0799      	lsls	r1, r3, #30
 8003a68:	bf58      	it	pl
 8003a6a:	6962      	ldrpl	r2, [r4, #20]
 8003a6c:	60a2      	str	r2, [r4, #8]
 8003a6e:	e7f4      	b.n	8003a5a <__swsetup_r+0x8e>
 8003a70:	2000      	movs	r0, #0
 8003a72:	e7f7      	b.n	8003a64 <__swsetup_r+0x98>
 8003a74:	20000018 	.word	0x20000018

08003a78 <_sbrk_r>:
 8003a78:	b538      	push	{r3, r4, r5, lr}
 8003a7a:	4d06      	ldr	r5, [pc, #24]	@ (8003a94 <_sbrk_r+0x1c>)
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	602b      	str	r3, [r5, #0]
 8003a84:	f7ff f892 	bl	8002bac <_sbrk>
 8003a88:	1c43      	adds	r3, r0, #1
 8003a8a:	d102      	bne.n	8003a92 <_sbrk_r+0x1a>
 8003a8c:	682b      	ldr	r3, [r5, #0]
 8003a8e:	b103      	cbz	r3, 8003a92 <_sbrk_r+0x1a>
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	bd38      	pop	{r3, r4, r5, pc}
 8003a94:	200002b8 	.word	0x200002b8

08003a98 <__swhatbuf_r>:
 8003a98:	b570      	push	{r4, r5, r6, lr}
 8003a9a:	460c      	mov	r4, r1
 8003a9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003aa0:	2900      	cmp	r1, #0
 8003aa2:	b096      	sub	sp, #88	@ 0x58
 8003aa4:	4615      	mov	r5, r2
 8003aa6:	461e      	mov	r6, r3
 8003aa8:	da0d      	bge.n	8003ac6 <__swhatbuf_r+0x2e>
 8003aaa:	89a3      	ldrh	r3, [r4, #12]
 8003aac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003ab0:	f04f 0100 	mov.w	r1, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2340      	movne	r3, #64	@ 0x40
 8003ab8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003abc:	2000      	movs	r0, #0
 8003abe:	6031      	str	r1, [r6, #0]
 8003ac0:	602b      	str	r3, [r5, #0]
 8003ac2:	b016      	add	sp, #88	@ 0x58
 8003ac4:	bd70      	pop	{r4, r5, r6, pc}
 8003ac6:	466a      	mov	r2, sp
 8003ac8:	f000 f848 	bl	8003b5c <_fstat_r>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	dbec      	blt.n	8003aaa <__swhatbuf_r+0x12>
 8003ad0:	9901      	ldr	r1, [sp, #4]
 8003ad2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003ad6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ada:	4259      	negs	r1, r3
 8003adc:	4159      	adcs	r1, r3
 8003ade:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ae2:	e7eb      	b.n	8003abc <__swhatbuf_r+0x24>

08003ae4 <__smakebuf_r>:
 8003ae4:	898b      	ldrh	r3, [r1, #12]
 8003ae6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ae8:	079d      	lsls	r5, r3, #30
 8003aea:	4606      	mov	r6, r0
 8003aec:	460c      	mov	r4, r1
 8003aee:	d507      	bpl.n	8003b00 <__smakebuf_r+0x1c>
 8003af0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003af4:	6023      	str	r3, [r4, #0]
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	2301      	movs	r3, #1
 8003afa:	6163      	str	r3, [r4, #20]
 8003afc:	b003      	add	sp, #12
 8003afe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b00:	ab01      	add	r3, sp, #4
 8003b02:	466a      	mov	r2, sp
 8003b04:	f7ff ffc8 	bl	8003a98 <__swhatbuf_r>
 8003b08:	9f00      	ldr	r7, [sp, #0]
 8003b0a:	4605      	mov	r5, r0
 8003b0c:	4639      	mov	r1, r7
 8003b0e:	4630      	mov	r0, r6
 8003b10:	f7ff fb18 	bl	8003144 <_malloc_r>
 8003b14:	b948      	cbnz	r0, 8003b2a <__smakebuf_r+0x46>
 8003b16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b1a:	059a      	lsls	r2, r3, #22
 8003b1c:	d4ee      	bmi.n	8003afc <__smakebuf_r+0x18>
 8003b1e:	f023 0303 	bic.w	r3, r3, #3
 8003b22:	f043 0302 	orr.w	r3, r3, #2
 8003b26:	81a3      	strh	r3, [r4, #12]
 8003b28:	e7e2      	b.n	8003af0 <__smakebuf_r+0xc>
 8003b2a:	89a3      	ldrh	r3, [r4, #12]
 8003b2c:	6020      	str	r0, [r4, #0]
 8003b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b32:	81a3      	strh	r3, [r4, #12]
 8003b34:	9b01      	ldr	r3, [sp, #4]
 8003b36:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b3a:	b15b      	cbz	r3, 8003b54 <__smakebuf_r+0x70>
 8003b3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b40:	4630      	mov	r0, r6
 8003b42:	f000 f81d 	bl	8003b80 <_isatty_r>
 8003b46:	b128      	cbz	r0, 8003b54 <__smakebuf_r+0x70>
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	f023 0303 	bic.w	r3, r3, #3
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	81a3      	strh	r3, [r4, #12]
 8003b54:	89a3      	ldrh	r3, [r4, #12]
 8003b56:	431d      	orrs	r5, r3
 8003b58:	81a5      	strh	r5, [r4, #12]
 8003b5a:	e7cf      	b.n	8003afc <__smakebuf_r+0x18>

08003b5c <_fstat_r>:
 8003b5c:	b538      	push	{r3, r4, r5, lr}
 8003b5e:	4d07      	ldr	r5, [pc, #28]	@ (8003b7c <_fstat_r+0x20>)
 8003b60:	2300      	movs	r3, #0
 8003b62:	4604      	mov	r4, r0
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	602b      	str	r3, [r5, #0]
 8003b6a:	f7fe fff6 	bl	8002b5a <_fstat>
 8003b6e:	1c43      	adds	r3, r0, #1
 8003b70:	d102      	bne.n	8003b78 <_fstat_r+0x1c>
 8003b72:	682b      	ldr	r3, [r5, #0]
 8003b74:	b103      	cbz	r3, 8003b78 <_fstat_r+0x1c>
 8003b76:	6023      	str	r3, [r4, #0]
 8003b78:	bd38      	pop	{r3, r4, r5, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200002b8 	.word	0x200002b8

08003b80 <_isatty_r>:
 8003b80:	b538      	push	{r3, r4, r5, lr}
 8003b82:	4d06      	ldr	r5, [pc, #24]	@ (8003b9c <_isatty_r+0x1c>)
 8003b84:	2300      	movs	r3, #0
 8003b86:	4604      	mov	r4, r0
 8003b88:	4608      	mov	r0, r1
 8003b8a:	602b      	str	r3, [r5, #0]
 8003b8c:	f7fe fff5 	bl	8002b7a <_isatty>
 8003b90:	1c43      	adds	r3, r0, #1
 8003b92:	d102      	bne.n	8003b9a <_isatty_r+0x1a>
 8003b94:	682b      	ldr	r3, [r5, #0]
 8003b96:	b103      	cbz	r3, 8003b9a <_isatty_r+0x1a>
 8003b98:	6023      	str	r3, [r4, #0]
 8003b9a:	bd38      	pop	{r3, r4, r5, pc}
 8003b9c:	200002b8 	.word	0x200002b8

08003ba0 <_init>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr

08003bac <_fini>:
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bae:	bf00      	nop
 8003bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bb2:	bc08      	pop	{r3}
 8003bb4:	469e      	mov	lr, r3
 8003bb6:	4770      	bx	lr
